
f411_master_uirs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b40  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf8  08008cf8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008cf8  08008cf8  00018cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d00  08008d00  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  2000001c  08008d24  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f0  08008d24  000209f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012885  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002111  00000000  00000000  000328d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000349e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00035aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f5  00000000  00000000  00036b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001233c  00000000  00000000  0004e4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c135  00000000  00000000  00060831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc966  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004830  00000000  00000000  000fc9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008cc0 	.word	0x08008cc0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08008cc0 	.word	0x08008cc0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b974 	b.w	8000cc4 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468e      	mov	lr, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14d      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4694      	mov	ip, r2
 8000a06:	d969      	bls.n	8000adc <__udivmoddi4+0xe8>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b152      	cbz	r2, 8000a24 <__udivmoddi4+0x30>
 8000a0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a12:	f1c2 0120 	rsb	r1, r2, #32
 8000a16:	fa20 f101 	lsr.w	r1, r0, r1
 8000a1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a22:	4094      	lsls	r4, r2
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	0c21      	lsrs	r1, r4, #16
 8000a2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a2e:	fa1f f78c 	uxth.w	r7, ip
 8000a32:	fb08 e316 	mls	r3, r8, r6, lr
 8000a36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a3a:	fb06 f107 	mul.w	r1, r6, r7
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a4a:	f080 811f 	bcs.w	8000c8c <__udivmoddi4+0x298>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 811c 	bls.w	8000c8c <__udivmoddi4+0x298>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a60:	fb08 3310 	mls	r3, r8, r0, r3
 8000a64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a68:	fb00 f707 	mul.w	r7, r0, r7
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x92>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a78:	f080 810a 	bcs.w	8000c90 <__udivmoddi4+0x29c>
 8000a7c:	42a7      	cmp	r7, r4
 8000a7e:	f240 8107 	bls.w	8000c90 <__udivmoddi4+0x29c>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	1be4      	subs	r4, r4, r7
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	b11d      	cbz	r5, 8000a98 <__udivmoddi4+0xa4>
 8000a90:	40d4      	lsrs	r4, r2
 8000a92:	2300      	movs	r3, #0
 8000a94:	e9c5 4300 	strd	r4, r3, [r5]
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d909      	bls.n	8000ab6 <__udivmoddi4+0xc2>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	f000 80ef 	beq.w	8000c86 <__udivmoddi4+0x292>
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000aae:	4630      	mov	r0, r6
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	fab3 f683 	clz	r6, r3
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d14a      	bne.n	8000b54 <__udivmoddi4+0x160>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d302      	bcc.n	8000ac8 <__udivmoddi4+0xd4>
 8000ac2:	4282      	cmp	r2, r0
 8000ac4:	f200 80f9 	bhi.w	8000cba <__udivmoddi4+0x2c6>
 8000ac8:	1a84      	subs	r4, r0, r2
 8000aca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ace:	2001      	movs	r0, #1
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e0      	beq.n	8000a98 <__udivmoddi4+0xa4>
 8000ad6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ada:	e7dd      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000adc:	b902      	cbnz	r2, 8000ae0 <__udivmoddi4+0xec>
 8000ade:	deff      	udf	#255	; 0xff
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	f040 8092 	bne.w	8000c0e <__udivmoddi4+0x21a>
 8000aea:	eba1 010c 	sub.w	r1, r1, ip
 8000aee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	2601      	movs	r6, #1
 8000af8:	0c20      	lsrs	r0, r4, #16
 8000afa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000afe:	fb07 1113 	mls	r1, r7, r3, r1
 8000b02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b06:	fb0e f003 	mul.w	r0, lr, r3
 8000b0a:	4288      	cmp	r0, r1
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x12c>
 8000b0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x12a>
 8000b18:	4288      	cmp	r0, r1
 8000b1a:	f200 80cb 	bhi.w	8000cb4 <__udivmoddi4+0x2c0>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	1a09      	subs	r1, r1, r0
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b28:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b30:	fb0e fe00 	mul.w	lr, lr, r0
 8000b34:	45a6      	cmp	lr, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x156>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x154>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f200 80bb 	bhi.w	8000cbe <__udivmoddi4+0x2ca>
 8000b48:	4608      	mov	r0, r1
 8000b4a:	eba4 040e 	sub.w	r4, r4, lr
 8000b4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b52:	e79c      	b.n	8000a8e <__udivmoddi4+0x9a>
 8000b54:	f1c6 0720 	rsb	r7, r6, #32
 8000b58:	40b3      	lsls	r3, r6
 8000b5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b62:	fa20 f407 	lsr.w	r4, r0, r7
 8000b66:	fa01 f306 	lsl.w	r3, r1, r6
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	40f9      	lsrs	r1, r7
 8000b6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b72:	fa00 f306 	lsl.w	r3, r0, r6
 8000b76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b7a:	0c20      	lsrs	r0, r4, #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fb09 1118 	mls	r1, r9, r8, r1
 8000b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b88:	fb08 f00e 	mul.w	r0, r8, lr
 8000b8c:	4288      	cmp	r0, r1
 8000b8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b92:	d90b      	bls.n	8000bac <__udivmoddi4+0x1b8>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b9c:	f080 8088 	bcs.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f240 8085 	bls.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba6:	f1a8 0802 	sub.w	r8, r8, #2
 8000baa:	4461      	add	r1, ip
 8000bac:	1a09      	subs	r1, r1, r0
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	458e      	cmp	lr, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1e2>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bcc:	d26c      	bcs.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bce:	458e      	cmp	lr, r1
 8000bd0:	d96a      	bls.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bda:	fba0 9402 	umull	r9, r4, r0, r2
 8000bde:	eba1 010e 	sub.w	r1, r1, lr
 8000be2:	42a1      	cmp	r1, r4
 8000be4:	46c8      	mov	r8, r9
 8000be6:	46a6      	mov	lr, r4
 8000be8:	d356      	bcc.n	8000c98 <__udivmoddi4+0x2a4>
 8000bea:	d053      	beq.n	8000c94 <__udivmoddi4+0x2a0>
 8000bec:	b15d      	cbz	r5, 8000c06 <__udivmoddi4+0x212>
 8000bee:	ebb3 0208 	subs.w	r2, r3, r8
 8000bf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bfe:	40f1      	lsrs	r1, r6
 8000c00:	431f      	orrs	r7, r3
 8000c02:	e9c5 7100 	strd	r7, r1, [r5]
 8000c06:	2600      	movs	r6, #0
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	fa21 f303 	lsr.w	r3, r1, r3
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c30:	0c0b      	lsrs	r3, r1, #16
 8000c32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c36:	fb00 f60e 	mul.w	r6, r0, lr
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x260>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c4a:	d22f      	bcs.n	8000cac <__udivmoddi4+0x2b8>
 8000c4c:	429e      	cmp	r6, r3
 8000c4e:	d92d      	bls.n	8000cac <__udivmoddi4+0x2b8>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	b289      	uxth	r1, r1
 8000c58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c64:	fb06 f30e 	mul.w	r3, r6, lr
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x28a>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c74:	d216      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d914      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c7a:	3e02      	subs	r6, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	1ac9      	subs	r1, r1, r3
 8000c80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c84:	e738      	b.n	8000af8 <__udivmoddi4+0x104>
 8000c86:	462e      	mov	r6, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e705      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e3      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6f8      	b.n	8000a86 <__udivmoddi4+0x92>
 8000c94:	454b      	cmp	r3, r9
 8000c96:	d2a9      	bcs.n	8000bec <__udivmoddi4+0x1f8>
 8000c98:	ebb9 0802 	subs.w	r8, r9, r2
 8000c9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e7a3      	b.n	8000bec <__udivmoddi4+0x1f8>
 8000ca4:	4646      	mov	r6, r8
 8000ca6:	e7ea      	b.n	8000c7e <__udivmoddi4+0x28a>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	e794      	b.n	8000bd6 <__udivmoddi4+0x1e2>
 8000cac:	4640      	mov	r0, r8
 8000cae:	e7d1      	b.n	8000c54 <__udivmoddi4+0x260>
 8000cb0:	46d0      	mov	r8, sl
 8000cb2:	e77b      	b.n	8000bac <__udivmoddi4+0x1b8>
 8000cb4:	3b02      	subs	r3, #2
 8000cb6:	4461      	add	r1, ip
 8000cb8:	e732      	b.n	8000b20 <__udivmoddi4+0x12c>
 8000cba:	4630      	mov	r0, r6
 8000cbc:	e709      	b.n	8000ad2 <__udivmoddi4+0xde>
 8000cbe:	4464      	add	r4, ip
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	e742      	b.n	8000b4a <__udivmoddi4+0x156>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <HAL_UART_ErrorCallback>:
		average_speed_diff, main_speed_vector, cos_phi, sin_phi, sum_phi;
float vector_speed_x, vector_speed_y;
float path_x, path_y;
volatile int reset = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_UART_ErrorCallback+0x40>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d112      	bne.n	8000cfe <HAL_UART_ErrorCallback+0x36>
		message_r = 0;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_UART_ErrorCallback+0x44>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		HAL_UART_MspDeInit(&huart1);
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <HAL_UART_ErrorCallback+0x40>)
 8000ce0:	f003 f97c 	bl	8003fdc <HAL_UART_MspDeInit>
		HAL_UART_MspInit(&huart1);
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <HAL_UART_ErrorCallback+0x40>)
 8000ce6:	f003 f821 	bl	8003d2c <HAL_UART_MspInit>
		HAL_UART_Receive_DMA(&huart1, &message_r, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <HAL_UART_ErrorCallback+0x44>)
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <HAL_UART_ErrorCallback+0x40>)
 8000cf0:	f006 fea0 	bl	8007a34 <HAL_UART_Receive_DMA>
		error_counter_uart++;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_UART_ErrorCallback+0x48>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <HAL_UART_ErrorCallback+0x48>)
 8000cfc:	6013      	str	r3, [r2, #0]
	}
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200004b8 	.word	0x200004b8
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000988 	.word	0x20000988

08000d14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d18:	f003 fad8 	bl	80042cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d1c:	f000 f884 	bl	8000e28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d20:	f000 fb60 	bl	80013e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d24:	f000 fae0 	bl	80012e8 <MX_DMA_Init>
	MX_SPI1_Init();
 8000d28:	f000 f946 	bl	8000fb8 <MX_SPI1_Init>
	MX_SPI2_Init();
 8000d2c:	f000 f97c 	bl	8001028 <MX_SPI2_Init>
	MX_SPI3_Init();
 8000d30:	f000 f9b2 	bl	8001098 <MX_SPI3_Init>
	MX_TIM3_Init();
 8000d34:	f000 fa36 	bl	80011a4 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000d38:	f000 f8de 	bl	8000ef8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000d3c:	f000 f9e4 	bl	8001108 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8000d40:	f000 faa8 	bl	8001294 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8000d44:	f000 fa7c 	bl	8001240 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000d48:	482b      	ldr	r0, [pc, #172]	; (8000df8 <main+0xe4>)
 8000d4a:	f006 f9a7 	bl	800709c <HAL_TIM_Base_Start_IT>
	protocol = 666;
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <main+0xe8>)
 8000d50:	f240 229a 	movw	r2, #666	; 0x29a
 8000d54:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcValBuf, 2);
 8000d56:	2202      	movs	r2, #2
 8000d58:	4929      	ldr	r1, [pc, #164]	; (8000e00 <main+0xec>)
 8000d5a:	482a      	ldr	r0, [pc, #168]	; (8000e04 <main+0xf0>)
 8000d5c:	f003 fb6c 	bl	8004438 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000d60:	4829      	ldr	r0, [pc, #164]	; (8000e08 <main+0xf4>)
 8000d62:	f006 f99b 	bl	800709c <HAL_TIM_Base_Start_IT>
	allow_work = 1;
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <main+0xf8>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (allow_work == 1) {
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <main+0xf8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d101      	bne.n	8000d78 <main+0x64>
			joystick_manual();
 8000d74:	f001 f8f2 	bl	8001f5c <joystick_manual>
		}
		flag_on();
 8000d78:	f001 fc4a 	bl	8002610 <flag_on>
		transmit_info();
 8000d7c:	f001 fc5c 	bl	8002638 <transmit_info>
		if (spi_tick) {
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <main+0xfc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d02b      	beq.n	8000de0 <main+0xcc>
			spi_check();
 8000d88:	f002 f846 	bl	8002e18 <spi_check>
			if (adc_flag) {
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <main+0x100>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d01a      	beq.n	8000dca <main+0xb6>
				adc_flag = 0;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <main+0x100>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
				vx_joy = adcValBuf[0];
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <main+0xec>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <main+0x104>)
 8000da4:	601a      	str	r2, [r3, #0]
				vy_joy = adcValBuf[1];
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <main+0xec>)
 8000da8:	885b      	ldrh	r3, [r3, #2]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <main+0x108>)
 8000db0:	601a      	str	r2, [r3, #0]
				if (message_r == 20) {
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <main+0x10c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b14      	cmp	r3, #20
 8000db8:	d101      	bne.n	8000dbe <main+0xaa>
					joystick_control();
 8000dba:	f001 f945 	bl	8002048 <joystick_control>
				}
				if (message_r != 20) {
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <main+0x10c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b14      	cmp	r3, #20
 8000dc4:	d001      	beq.n	8000dca <main+0xb6>
					bluetooth_control();
 8000dc6:	f001 f9e1 	bl	800218c <bluetooth_control>
				}
			}
			spi_tick = 0;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <main+0xfc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
			spi1_send();
 8000dd0:	f001 fa3e 	bl	8002250 <spi1_send>
			spi2_send();
 8000dd4:	f001 fae0 	bl	8002398 <spi2_send>
			spi3_send();
 8000dd8:	f001 fb7c 	bl	80024d4 <spi3_send>
			received_transform();
 8000ddc:	f001 fd6a 	bl	80028b4 <received_transform>
		}
		if (odometry) {
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <main+0x110>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0c1      	beq.n	8000d6c <main+0x58>
			odometry = 0;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <main+0x110>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
//			angle_motor_calc();
//			f_kinematics();
			bluetooth_uart();
 8000dee:	f002 fc77 	bl	80036e0 <bluetooth_uart>
			spi_to_uart();
 8000df2:	f001 feb7 	bl	8002b64 <spi_to_uart>
		if (allow_work == 1) {
 8000df6:	e7b9      	b.n	8000d6c <main+0x58>
 8000df8:	20000470 	.word	0x20000470
 8000dfc:	200008d8 	.word	0x200008d8
 8000e00:	2000098c 	.word	0x2000098c
 8000e04:	20000038 	.word	0x20000038
 8000e08:	20000428 	.word	0x20000428
 8000e0c:	200009e0 	.word	0x200009e0
 8000e10:	200006c0 	.word	0x200006c0
 8000e14:	20000990 	.word	0x20000990
 8000e18:	20000994 	.word	0x20000994
 8000e1c:	20000998 	.word	0x20000998
 8000e20:	20000000 	.word	0x20000000
 8000e24:	200009d8 	.word	0x200009d8

08000e28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	; 0x50
 8000e2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	2230      	movs	r2, #48	; 0x30
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f007 ff3a 	bl	8008cb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <SystemClock_Config+0xc8>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <SystemClock_Config+0xc8>)
 8000e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <SystemClock_Config+0xc8>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e90:	2302      	movs	r3, #2
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ea8:	f107 0320 	add.w	r3, r7, #32
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 febf 	bl	8005c30 <HAL_RCC_OscConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x94>
		Error_Handler();
 8000eb8:	f002 fc2c 	bl	8003714 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ecc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f005 f921 	bl	8006120 <HAL_RCC_ClockConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0xc0>
		Error_Handler();
 8000ee4:	f002 fc16 	bl	8003714 <Error_Handler>
	}
}
 8000ee8:	bf00      	nop
 8000eea:	3750      	adds	r7, #80	; 0x50
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f0c:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <MX_ADC1_Init+0xb8>)
 8000f0e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f16:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <MX_ADC1_Init+0xbc>)
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f5a:	f003 fa29 	bl	80043b0 <HAL_ADC_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000f64:	f002 fbd6 	bl	8003714 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f70:	2307      	movs	r3, #7
 8000f72:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f7a:	f003 fb6b 	bl	8004654 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000f84:	f002 fbc6 	bl	8003714 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_ADC1_Init+0xb4>)
 8000f96:	f003 fb5d 	bl	8004654 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000fa0:	f002 fbb8 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000038 	.word	0x20000038
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	0f000001 	.word	0x0f000001

08000fb8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <MX_SPI1_Init+0x6c>)
 8000fc0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fe4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fe8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fec:	2238      	movs	r2, #56	; 0x38
 8000fee:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_SPI1_Init+0x68>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_SPI1_Init+0x68>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_SPI1_Init+0x68>)
 8000ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_SPI1_Init+0x68>)
 8001006:	220a      	movs	r2, #10
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_SPI1_Init+0x68>)
 800100c:	f005 fa68 	bl	80064e0 <HAL_SPI_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_SPI1_Init+0x62>
		Error_Handler();
 8001016:	f002 fb7d 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000e0 	.word	0x200000e0
 8001024:	40013000 	.word	0x40013000

08001028 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_SPI2_Init+0x68>)
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <MX_SPI2_Init+0x6c>)
 8001030:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_SPI2_Init+0x68>)
 8001034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001038:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_SPI2_Init+0x68>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_SPI2_Init+0x68>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_SPI2_Init+0x68>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_SPI2_Init+0x68>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_SPI2_Init+0x68>)
 8001054:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001058:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_SPI2_Init+0x68>)
 800105c:	2238      	movs	r2, #56	; 0x38
 800105e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_SPI2_Init+0x68>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_SPI2_Init+0x68>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_SPI2_Init+0x68>)
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI2_Init+0x68>)
 8001076:	220a      	movs	r2, #10
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_SPI2_Init+0x68>)
 800107c:	f005 fa30 	bl	80064e0 <HAL_SPI_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_SPI2_Init+0x62>
		Error_Handler();
 8001086:	f002 fb45 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000138 	.word	0x20000138
 8001094:	40003800 	.word	0x40003800

08001098 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_SPI3_Init+0x68>)
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <MX_SPI3_Init+0x6c>)
 80010a0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_SPI3_Init+0x68>)
 80010a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_SPI3_Init+0x68>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_SPI3_Init+0x68>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_SPI3_Init+0x68>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_SPI3_Init+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_SPI3_Init+0x68>)
 80010c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010c8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_SPI3_Init+0x68>)
 80010cc:	2238      	movs	r2, #56	; 0x38
 80010ce:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_SPI3_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_SPI3_Init+0x68>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_SPI3_Init+0x68>)
 80010de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_SPI3_Init+0x68>)
 80010e6:	220a      	movs	r2, #10
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_SPI3_Init+0x68>)
 80010ec:	f005 f9f8 	bl	80064e0 <HAL_SPI_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_SPI3_Init+0x62>
		Error_Handler();
 80010f6:	f002 fb0d 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000190 	.word	0x20000190
 8001104:	40003c00 	.word	0x40003c00

08001108 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_TIM2_Init+0x98>)
 8001126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_TIM2_Init+0x98>)
 800112e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001132:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_TIM2_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_TIM2_Init+0x98>)
 800113c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001140:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_TIM2_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_TIM2_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_TIM2_Init+0x98>)
 8001150:	f005 ff54 	bl	8006ffc <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x56>
		Error_Handler();
 800115a:	f002 fadb 	bl	8003714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4619      	mov	r1, r3
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_TIM2_Init+0x98>)
 800116c:	f006 f900 	bl	8007370 <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x72>
		Error_Handler();
 8001176:	f002 facd 	bl	8003714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_TIM2_Init+0x98>)
 8001188:	f006 fb06 	bl	8007798 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001192:	f002 fabf 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000428 	.word	0x20000428

080011a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_TIM3_Init+0x94>)
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <MX_TIM3_Init+0x98>)
 80011c4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1000 - 1;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_TIM3_Init+0x94>)
 80011c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011cc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_TIM3_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_TIM3_Init+0x94>)
 80011d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011da:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_TIM3_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_TIM3_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80011e8:	4813      	ldr	r0, [pc, #76]	; (8001238 <MX_TIM3_Init+0x94>)
 80011ea:	f005 ff07 	bl	8006ffc <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x54>
		Error_Handler();
 80011f4:	f002 fa8e 	bl	8003714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_TIM3_Init+0x94>)
 8001206:	f006 f8b3 	bl	8007370 <HAL_TIM_ConfigClockSource>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001210:	f002 fa80 	bl	8003714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_TIM3_Init+0x94>)
 8001222:	f006 fab9 	bl	8007798 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800122c:	f002 fa72 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000470 	.word	0x20000470
 800123c:	40000400 	.word	0x40000400

08001240 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <MX_USART1_UART_Init+0x50>)
 8001248:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <MX_USART1_UART_Init+0x4c>)
 800124c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001250:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART1_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001278:	f006 fb10 	bl	800789c <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001282:	f002 fa47 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004b8 	.word	0x200004b8
 8001290:	40011000 	.word	0x40011000

08001294 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_USART6_UART_Init+0x50>)
 800129c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART6_UART_Init+0x4c>)
 80012cc:	f006 fae6 	bl	800789c <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART6_UART_Init+0x46>
		Error_Handler();
 80012d6:	f002 fa1d 	bl	8003714 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200004fc 	.word	0x200004fc
 80012e4:	40011400 	.word	0x40011400

080012e8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <MX_DMA_Init+0xf8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <MX_DMA_Init+0xf8>)
 80012f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <MX_DMA_Init+0xf8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <MX_DMA_Init+0xf8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <MX_DMA_Init+0xf8>)
 8001314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <MX_DMA_Init+0xf8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200b      	movs	r0, #11
 800132c:	f003 fd41 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001330:	200b      	movs	r0, #11
 8001332:	f003 fd5a 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	200e      	movs	r0, #14
 800133c:	f003 fd39 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001340:	200e      	movs	r0, #14
 8001342:	f003 fd52 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	200f      	movs	r0, #15
 800134c:	f003 fd31 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001350:	200f      	movs	r0, #15
 8001352:	f003 fd4a 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2010      	movs	r0, #16
 800135c:	f003 fd29 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001360:	2010      	movs	r0, #16
 8001362:	f003 fd42 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2038      	movs	r0, #56	; 0x38
 800136c:	f003 fd21 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001370:	2038      	movs	r0, #56	; 0x38
 8001372:	f003 fd3a 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2039      	movs	r0, #57	; 0x39
 800137c:	f003 fd19 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001380:	2039      	movs	r0, #57	; 0x39
 8001382:	f003 fd32 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	203a      	movs	r0, #58	; 0x3a
 800138c:	f003 fd11 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001390:	203a      	movs	r0, #58	; 0x3a
 8001392:	f003 fd2a 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	203c      	movs	r0, #60	; 0x3c
 800139c:	f003 fd09 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80013a0:	203c      	movs	r0, #60	; 0x3c
 80013a2:	f003 fd22 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2044      	movs	r0, #68	; 0x44
 80013ac:	f003 fd01 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80013b0:	2044      	movs	r0, #68	; 0x44
 80013b2:	f003 fd1a 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2045      	movs	r0, #69	; 0x45
 80013bc:	f003 fcf9 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013c0:	2045      	movs	r0, #69	; 0x45
 80013c2:	f003 fd12 	bl	8004dea <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2046      	movs	r0, #70	; 0x46
 80013cc:	f003 fcf1 	bl	8004db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80013d0:	2046      	movs	r0, #70	; 0x46
 80013d2:	f003 fd0a 	bl	8004dea <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a37      	ldr	r2, [pc, #220]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <MX_GPIO_Init+0xfc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_GPIO_Init+0xfc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <MX_GPIO_Init+0xfc>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <MX_GPIO_Init+0xfc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RED_LED_SPI_Pin | GREEN_LED_SPI_Pin,
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001470:	481c      	ldr	r0, [pc, #112]	; (80014e4 <MX_GPIO_Init+0x100>)
 8001472:	f004 fbc3 	bl	8005bfc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_2_Pin | SPI_1_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7140 	mov.w	r1, #768	; 0x300
 800147c:	481a      	ldr	r0, [pc, #104]	; (80014e8 <MX_GPIO_Init+0x104>)
 800147e:	f004 fbbd 	bl	8005bfc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RED_LED_SPI_Pin GREEN_LED_SPI_Pin */
	GPIO_InitStruct.Pin = RED_LED_SPI_Pin | GREEN_LED_SPI_Pin;
 8001482:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001486:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_GPIO_Init+0x100>)
 800149c:	f004 f92e 	bl	80056fc <HAL_GPIO_Init>

	/*Configure GPIO pin : IFREADY3_Pin */
	GPIO_InitStruct.Pin = IFREADY3_Pin;
 80014a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(IFREADY3_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <MX_GPIO_Init+0x100>)
 80014b6:	f004 f921 	bl	80056fc <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI_2_Pin SPI_1_Pin */
	GPIO_InitStruct.Pin = SPI_2_Pin | SPI_1_Pin;
 80014ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_GPIO_Init+0x104>)
 80014d4:	f004 f912 	bl	80056fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020400 	.word	0x40020400

080014ec <com_forward>:
//				com_spi3_angle2 -= 360;
//			}
//		}
//	}
//}
void com_forward() {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
	if (start != 0) {
 80014f2:	4b8d      	ldr	r3, [pc, #564]	; (8001728 <com_forward+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8111 	beq.w	800171e <com_forward+0x232>
		ifready = 1;
 80014fc:	4b8b      	ldr	r3, [pc, #556]	; (800172c <com_forward+0x240>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
		int rc_angle_1 =
				(first_wheel) ?
 8001502:	4b8b      	ldr	r3, [pc, #556]	; (8001730 <com_forward+0x244>)
 8001504:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_1 =
 8001506:	2b00      	cmp	r3, #0
 8001508:	d011      	beq.n	800152e <com_forward+0x42>
						rc_spi1_angle_1 / 100.0 : rc_spi1_angle_2 / 100.0;
 800150a:	4b8a      	ldr	r3, [pc, #552]	; (8001734 <com_forward+0x248>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ffb4 	bl	800047c <__aeabi_i2d>
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b87      	ldr	r3, [pc, #540]	; (8001738 <com_forward+0x24c>)
 800151a:	f7ff f943 	bl	80007a4 <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
		int rc_angle_1 =
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fa25 	bl	8000974 <__aeabi_d2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	e010      	b.n	8001550 <com_forward+0x64>
						rc_spi1_angle_1 / 100.0 : rc_spi1_angle_2 / 100.0;
 800152e:	4b83      	ldr	r3, [pc, #524]	; (800173c <com_forward+0x250>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffa2 	bl	800047c <__aeabi_i2d>
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b7e      	ldr	r3, [pc, #504]	; (8001738 <com_forward+0x24c>)
 800153e:	f7ff f931 	bl	80007a4 <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
		int rc_angle_1 =
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fa13 	bl	8000974 <__aeabi_d2iz>
 800154e:	4603      	mov	r3, r0
 8001550:	60fb      	str	r3, [r7, #12]
		int rc_angle_2 =
				(first_wheel) ?
 8001552:	4b77      	ldr	r3, [pc, #476]	; (8001730 <com_forward+0x244>)
 8001554:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_2 =
 8001556:	2b00      	cmp	r3, #0
 8001558:	d011      	beq.n	800157e <com_forward+0x92>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 800155a:	4b79      	ldr	r3, [pc, #484]	; (8001740 <com_forward+0x254>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff8c 	bl	800047c <__aeabi_i2d>
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b73      	ldr	r3, [pc, #460]	; (8001738 <com_forward+0x24c>)
 800156a:	f7ff f91b 	bl	80007a4 <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
		int rc_angle_2 =
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff f9fd 	bl	8000974 <__aeabi_d2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	e010      	b.n	80015a0 <com_forward+0xb4>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 800157e:	4b71      	ldr	r3, [pc, #452]	; (8001744 <com_forward+0x258>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff7a 	bl	800047c <__aeabi_i2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <com_forward+0x24c>)
 800158e:	f7ff f909 	bl	80007a4 <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
		int rc_angle_2 =
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff f9eb 	bl	8000974 <__aeabi_d2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	60bb      	str	r3, [r7, #8]
		int rc_angle_3 =
				(first_wheel) ?
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <com_forward+0x244>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_3 =
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d011      	beq.n	80015ce <com_forward+0xe2>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <com_forward+0x25c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff64 	bl	800047c <__aeabi_i2d>
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <com_forward+0x24c>)
 80015ba:	f7ff f8f3 	bl	80007a4 <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
		int rc_angle_3 =
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff f9d5 	bl	8000974 <__aeabi_d2iz>
 80015ca:	4603      	mov	r3, r0
 80015cc:	e010      	b.n	80015f0 <com_forward+0x104>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 80015ce:	4b5f      	ldr	r3, [pc, #380]	; (800174c <com_forward+0x260>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff52 	bl	800047c <__aeabi_i2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b56      	ldr	r3, [pc, #344]	; (8001738 <com_forward+0x24c>)
 80015de:	f7ff f8e1 	bl	80007a4 <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
		int rc_angle_3 =
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff f9c3 	bl	8000974 <__aeabi_d2iz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	607b      	str	r3, [r7, #4]

		if ((abs(
				rc_angle_1
						- ((first_wheel) ? com_spi1_angle2 : com_spi1_angle1))
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <com_forward+0x244>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <com_forward+0x114>
 80015fa:	4b55      	ldr	r3, [pc, #340]	; (8001750 <com_forward+0x264>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	e001      	b.n	8001604 <com_forward+0x118>
 8001600:	4b54      	ldr	r3, [pc, #336]	; (8001754 <com_forward+0x268>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
		if ((abs(
 8001608:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800160c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
				< tolerance)
 8001610:	4b51      	ldr	r3, [pc, #324]	; (8001758 <com_forward+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
		if ((abs(
 8001614:	429a      	cmp	r2, r3
 8001616:	f280 8082 	bge.w	800171e <com_forward+0x232>
				&& (abs(
						rc_angle_2
								- ((first_wheel) ?
 800161a:	4b45      	ldr	r3, [pc, #276]	; (8001730 <com_forward+0x244>)
 800161c:	781b      	ldrb	r3, [r3, #0]
										com_spi2_angle1 : com_spi2_angle2))
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <com_forward+0x13c>
 8001622:	4b4e      	ldr	r3, [pc, #312]	; (800175c <com_forward+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	e001      	b.n	800162c <com_forward+0x140>
 8001628:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <com_forward+0x274>)
 800162a:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	1ad3      	subs	r3, r2, r3
				&& (abs(
 8001630:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001634:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <com_forward+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 800163c:	429a      	cmp	r2, r3
 800163e:	da6e      	bge.n	800171e <com_forward+0x232>
				&& (abs(
						rc_angle_3
								- ((first_wheel) ?
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <com_forward+0x244>)
 8001642:	781b      	ldrb	r3, [r3, #0]
										com_spi3_angle1 : com_spi3_angle2))
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <com_forward+0x162>
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <com_forward+0x278>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	e001      	b.n	8001652 <com_forward+0x166>
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <com_forward+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	1ad3      	subs	r3, r2, r3
				&& (abs(
 8001656:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800165a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)) {
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <com_forward+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 8001662:	429a      	cmp	r2, r3
 8001664:	da5b      	bge.n	800171e <com_forward+0x232>
			first_wheel = !first_wheel;
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <com_forward+0x244>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	bf14      	ite	ne
 800166e:	2301      	movne	r3, #1
 8001670:	2300      	moveq	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f083 0301 	eor.w	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <com_forward+0x244>)
 8001682:	701a      	strb	r2, [r3, #0]
			if (first_wheel) {
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <com_forward+0x244>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d024      	beq.n	80016d6 <com_forward+0x1ea>
				com_spi1_angle1 += 360;
 800168c:	4b31      	ldr	r3, [pc, #196]	; (8001754 <com_forward+0x268>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <com_forward+0x268>)
 8001696:	6013      	str	r3, [r2, #0]
				com_spi2_angle1 += 360;
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <com_forward+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016a0:	4a2e      	ldr	r2, [pc, #184]	; (800175c <com_forward+0x270>)
 80016a2:	6013      	str	r3, [r2, #0]
				com_spi3_angle1 += 360;
 80016a4:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <com_forward+0x278>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ac:	4a2d      	ldr	r2, [pc, #180]	; (8001764 <com_forward+0x278>)
 80016ae:	6013      	str	r3, [r2, #0]

				spi1_adaptive_1_var1 = 1;
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <com_forward+0x280>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 1;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <com_forward+0x284>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 1;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <com_forward+0x288>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

				spi1_adaptive_2_var1 = 0;
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <com_forward+0x28c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 0;
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <com_forward+0x290>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 0;
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <com_forward+0x294>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 0;
				spi3_adaptive_1_var1 = 0;
			}
		}
	}
}
 80016d4:	e023      	b.n	800171e <com_forward+0x232>
				com_spi1_angle2 += 360;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <com_forward+0x264>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <com_forward+0x264>)
 80016e0:	6013      	str	r3, [r2, #0]
				com_spi2_angle2 += 360;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <com_forward+0x274>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ea:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <com_forward+0x274>)
 80016ec:	6013      	str	r3, [r2, #0]
				com_spi3_angle2 += 360;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <com_forward+0x27c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <com_forward+0x27c>)
 80016f8:	6013      	str	r3, [r2, #0]
				spi1_adaptive_2_var1 = 1;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <com_forward+0x28c>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 1;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <com_forward+0x290>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 1;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <com_forward+0x294>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
				spi1_adaptive_1_var1 = 0;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <com_forward+0x280>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 0;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <com_forward+0x284>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 0;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <com_forward+0x288>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000000c 	.word	0x2000000c
 800172c:	200008d4 	.word	0x200008d4
 8001730:	20000008 	.word	0x20000008
 8001734:	200007e4 	.word	0x200007e4
 8001738:	40590000 	.word	0x40590000
 800173c:	200007f0 	.word	0x200007f0
 8001740:	2000079c 	.word	0x2000079c
 8001744:	200007a8 	.word	0x200007a8
 8001748:	2000082c 	.word	0x2000082c
 800174c:	20000838 	.word	0x20000838
 8001750:	200009ac 	.word	0x200009ac
 8001754:	200009a8 	.word	0x200009a8
 8001758:	20000004 	.word	0x20000004
 800175c:	200009b0 	.word	0x200009b0
 8001760:	200009b4 	.word	0x200009b4
 8001764:	200009b8 	.word	0x200009b8
 8001768:	200009bc 	.word	0x200009bc
 800176c:	200009c0 	.word	0x200009c0
 8001770:	200009c4 	.word	0x200009c4
 8001774:	200009c8 	.word	0x200009c8
 8001778:	200009cc 	.word	0x200009cc
 800177c:	200009d0 	.word	0x200009d0
 8001780:	200009d4 	.word	0x200009d4

08001784 <com_backward>:

void com_backward() {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
	if (start != 0) {
 800178a:	4b8d      	ldr	r3, [pc, #564]	; (80019c0 <com_backward+0x23c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8111 	beq.w	80019b6 <com_backward+0x232>
		ifready = 1;
 8001794:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <com_backward+0x240>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
		int rc_angle_1 =
				(first_wheel) ?
 800179a:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <com_backward+0x244>)
 800179c:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_1 =
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d011      	beq.n	80017c6 <com_backward+0x42>
						rc_spi1_angle_1 / 100.0 : rc_spi1_angle_2 / 100.0;
 80017a2:	4b8a      	ldr	r3, [pc, #552]	; (80019cc <com_backward+0x248>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe68 	bl	800047c <__aeabi_i2d>
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b87      	ldr	r3, [pc, #540]	; (80019d0 <com_backward+0x24c>)
 80017b2:	f7fe fff7 	bl	80007a4 <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
		int rc_angle_1 =
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f8d9 	bl	8000974 <__aeabi_d2iz>
 80017c2:	4603      	mov	r3, r0
 80017c4:	e010      	b.n	80017e8 <com_backward+0x64>
						rc_spi1_angle_1 / 100.0 : rc_spi1_angle_2 / 100.0;
 80017c6:	4b83      	ldr	r3, [pc, #524]	; (80019d4 <com_backward+0x250>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe56 	bl	800047c <__aeabi_i2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b7e      	ldr	r3, [pc, #504]	; (80019d0 <com_backward+0x24c>)
 80017d6:	f7fe ffe5 	bl	80007a4 <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
		int rc_angle_1 =
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f8c7 	bl	8000974 <__aeabi_d2iz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60fb      	str	r3, [r7, #12]
		int rc_angle_2 =
				(first_wheel) ?
 80017ea:	4b77      	ldr	r3, [pc, #476]	; (80019c8 <com_backward+0x244>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_2 =
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d011      	beq.n	8001816 <com_backward+0x92>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 80017f2:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <com_backward+0x254>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe40 	bl	800047c <__aeabi_i2d>
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <com_backward+0x24c>)
 8001802:	f7fe ffcf 	bl	80007a4 <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
		int rc_angle_2 =
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f8b1 	bl	8000974 <__aeabi_d2iz>
 8001812:	4603      	mov	r3, r0
 8001814:	e010      	b.n	8001838 <com_backward+0xb4>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 8001816:	4b71      	ldr	r3, [pc, #452]	; (80019dc <com_backward+0x258>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe2e 	bl	800047c <__aeabi_i2d>
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <com_backward+0x24c>)
 8001826:	f7fe ffbd 	bl	80007a4 <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
		int rc_angle_2 =
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f89f 	bl	8000974 <__aeabi_d2iz>
 8001836:	4603      	mov	r3, r0
 8001838:	60bb      	str	r3, [r7, #8]
		int rc_angle_3 =
				(first_wheel) ?
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <com_backward+0x244>)
 800183c:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_3 =
 800183e:	2b00      	cmp	r3, #0
 8001840:	d011      	beq.n	8001866 <com_backward+0xe2>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 8001842:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <com_backward+0x25c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe18 	bl	800047c <__aeabi_i2d>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b5f      	ldr	r3, [pc, #380]	; (80019d0 <com_backward+0x24c>)
 8001852:	f7fe ffa7 	bl	80007a4 <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
		int rc_angle_3 =
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f889 	bl	8000974 <__aeabi_d2iz>
 8001862:	4603      	mov	r3, r0
 8001864:	e010      	b.n	8001888 <com_backward+0x104>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 8001866:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <com_backward+0x260>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe06 	bl	800047c <__aeabi_i2d>
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b56      	ldr	r3, [pc, #344]	; (80019d0 <com_backward+0x24c>)
 8001876:	f7fe ff95 	bl	80007a4 <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
		int rc_angle_3 =
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f877 	bl	8000974 <__aeabi_d2iz>
 8001886:	4603      	mov	r3, r0
 8001888:	607b      	str	r3, [r7, #4]

		if ((abs(
				rc_angle_1
						- ((first_wheel) ? com_spi1_angle2 : com_spi1_angle1))
 800188a:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <com_backward+0x244>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <com_backward+0x114>
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <com_backward+0x264>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	e001      	b.n	800189c <com_backward+0x118>
 8001898:	4b54      	ldr	r3, [pc, #336]	; (80019ec <com_backward+0x268>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
		if ((abs(
 80018a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
				< tolerance)
 80018a8:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <com_backward+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
		if ((abs(
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f280 8082 	bge.w	80019b6 <com_backward+0x232>
				&& (abs(
						rc_angle_2
								- ((first_wheel) ?
 80018b2:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <com_backward+0x244>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
										com_spi2_angle1 : com_spi2_angle2))
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <com_backward+0x13c>
 80018ba:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <com_backward+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	e001      	b.n	80018c4 <com_backward+0x140>
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <com_backward+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	1ad3      	subs	r3, r2, r3
				&& (abs(
 80018c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)
 80018d0:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <com_backward+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 80018d4:	429a      	cmp	r2, r3
 80018d6:	da6e      	bge.n	80019b6 <com_backward+0x232>
				&& (abs(
						rc_angle_3
								- ((first_wheel) ?
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <com_backward+0x244>)
 80018da:	781b      	ldrb	r3, [r3, #0]
										com_spi3_angle1 : com_spi3_angle2))
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <com_backward+0x162>
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <com_backward+0x278>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	e001      	b.n	80018ea <com_backward+0x166>
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <com_backward+0x27c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	1ad3      	subs	r3, r2, r3
				&& (abs(
 80018ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)) {
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <com_backward+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 80018fa:	429a      	cmp	r2, r3
 80018fc:	da5b      	bge.n	80019b6 <com_backward+0x232>
			first_wheel = !first_wheel;
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <com_backward+0x244>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <com_backward+0x244>)
 800191a:	701a      	strb	r2, [r3, #0]
			if (first_wheel) {
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <com_backward+0x244>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d024      	beq.n	800196e <com_backward+0x1ea>
				com_spi1_angle1 -= 360;
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <com_backward+0x268>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800192c:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <com_backward+0x268>)
 800192e:	6013      	str	r3, [r2, #0]
				com_spi2_angle1 -= 360;
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <com_backward+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001938:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <com_backward+0x270>)
 800193a:	6013      	str	r3, [r2, #0]
				com_spi3_angle1 -= 360;
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <com_backward+0x278>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <com_backward+0x278>)
 8001946:	6013      	str	r3, [r2, #0]

				spi1_adaptive_2_var1 = 0;
 8001948:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <com_backward+0x280>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 0;
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <com_backward+0x284>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 0;
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <com_backward+0x288>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

				spi1_adaptive_1_var1 = 2;
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <com_backward+0x28c>)
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 2;
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <com_backward+0x290>)
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 2;
 8001966:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <com_backward+0x294>)
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 0;
				spi3_adaptive_1_var1 = 0;
			}
		}
	}
}
 800196c:	e023      	b.n	80019b6 <com_backward+0x232>
				com_spi1_angle2 -= 360;
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <com_backward+0x264>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <com_backward+0x264>)
 8001978:	6013      	str	r3, [r2, #0]
				com_spi2_angle2 -= 360;
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <com_backward+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <com_backward+0x274>)
 8001984:	6013      	str	r3, [r2, #0]
				com_spi3_angle2 -= 360;
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <com_backward+0x27c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <com_backward+0x27c>)
 8001990:	6013      	str	r3, [r2, #0]
				spi1_adaptive_2_var1 = 2;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <com_backward+0x280>)
 8001994:	2202      	movs	r2, #2
 8001996:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 2;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <com_backward+0x284>)
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 2;
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <com_backward+0x288>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	601a      	str	r2, [r3, #0]
				spi1_adaptive_1_var1 = 0;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <com_backward+0x28c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 0;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <com_backward+0x290>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 0;
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <com_backward+0x294>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	200008d4 	.word	0x200008d4
 80019c8:	20000008 	.word	0x20000008
 80019cc:	200007e4 	.word	0x200007e4
 80019d0:	40590000 	.word	0x40590000
 80019d4:	200007f0 	.word	0x200007f0
 80019d8:	2000079c 	.word	0x2000079c
 80019dc:	200007a8 	.word	0x200007a8
 80019e0:	2000082c 	.word	0x2000082c
 80019e4:	20000838 	.word	0x20000838
 80019e8:	200009ac 	.word	0x200009ac
 80019ec:	200009a8 	.word	0x200009a8
 80019f0:	20000004 	.word	0x20000004
 80019f4:	200009b0 	.word	0x200009b0
 80019f8:	200009b4 	.word	0x200009b4
 80019fc:	200009b8 	.word	0x200009b8
 8001a00:	200009bc 	.word	0x200009bc
 8001a04:	200009cc 	.word	0x200009cc
 8001a08:	200009d0 	.word	0x200009d0
 8001a0c:	200009d4 	.word	0x200009d4
 8001a10:	200009c0 	.word	0x200009c0
 8001a14:	200009c4 	.word	0x200009c4
 8001a18:	200009c8 	.word	0x200009c8

08001a1c <com_left>:
void com_left() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
	if (start != 0) {
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <com_left+0x23c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8111 	beq.w	8001c4e <com_left+0x232>
		ifready = 1;
 8001a2c:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <com_left+0x240>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
		int rc_angle_1 =
				(first_wheel) ?
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <com_left+0x244>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_1 =
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d011      	beq.n	8001a5e <com_left+0x42>
						rc_spi1_angle_1 / 100.0 : rc_spi1_angle_2 / 100.0;
 8001a3a:	4b8a      	ldr	r3, [pc, #552]	; (8001c64 <com_left+0x248>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd1c 	bl	800047c <__aeabi_i2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b87      	ldr	r3, [pc, #540]	; (8001c68 <com_left+0x24c>)
 8001a4a:	f7fe feab 	bl	80007a4 <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
		int rc_angle_1 =
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7fe ff8d 	bl	8000974 <__aeabi_d2iz>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	e010      	b.n	8001a80 <com_left+0x64>
						rc_spi1_angle_1 / 100.0 : rc_spi1_angle_2 / 100.0;
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <com_left+0x250>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd0a 	bl	800047c <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b7e      	ldr	r3, [pc, #504]	; (8001c68 <com_left+0x24c>)
 8001a6e:	f7fe fe99 	bl	80007a4 <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
		int rc_angle_1 =
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7fe ff7b 	bl	8000974 <__aeabi_d2iz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]
		int rc_angle_2 =
				(first_wheel) ?
 8001a82:	4b77      	ldr	r3, [pc, #476]	; (8001c60 <com_left+0x244>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_2 =
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d011      	beq.n	8001aae <com_left+0x92>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 8001a8a:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <com_left+0x254>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcf4 	bl	800047c <__aeabi_i2d>
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <com_left+0x24c>)
 8001a9a:	f7fe fe83 	bl	80007a4 <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
		int rc_angle_2 =
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7fe ff65 	bl	8000974 <__aeabi_d2iz>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	e010      	b.n	8001ad0 <com_left+0xb4>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 8001aae:	4b71      	ldr	r3, [pc, #452]	; (8001c74 <com_left+0x258>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fce2 	bl	800047c <__aeabi_i2d>
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <com_left+0x24c>)
 8001abe:	f7fe fe71 	bl	80007a4 <__aeabi_ddiv>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
		int rc_angle_2 =
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7fe ff53 	bl	8000974 <__aeabi_d2iz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	60bb      	str	r3, [r7, #8]
		int rc_angle_3 =
				(first_wheel) ?
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <com_left+0x244>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_3 =
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d011      	beq.n	8001afe <com_left+0xe2>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 8001ada:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <com_left+0x25c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fccc 	bl	800047c <__aeabi_i2d>
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <com_left+0x24c>)
 8001aea:	f7fe fe5b 	bl	80007a4 <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
		int rc_angle_3 =
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe ff3d 	bl	8000974 <__aeabi_d2iz>
 8001afa:	4603      	mov	r3, r0
 8001afc:	e010      	b.n	8001b20 <com_left+0x104>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <com_left+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fcba 	bl	800047c <__aeabi_i2d>
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <com_left+0x24c>)
 8001b0e:	f7fe fe49 	bl	80007a4 <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
		int rc_angle_3 =
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe ff2b 	bl	8000974 <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	607b      	str	r3, [r7, #4]

		if ((abs(
				rc_angle_1
						- ((first_wheel) ? com_spi1_angle2 : com_spi1_angle1))
 8001b22:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <com_left+0x244>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <com_left+0x114>
 8001b2a:	4b55      	ldr	r3, [pc, #340]	; (8001c80 <com_left+0x264>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	e001      	b.n	8001b34 <com_left+0x118>
 8001b30:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <com_left+0x268>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
		if ((abs(
 8001b38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
				< tolerance)
 8001b40:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <com_left+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
		if ((abs(
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f280 8082 	bge.w	8001c4e <com_left+0x232>
				&& (abs(
						rc_angle_2
								- ((first_wheel) ?
 8001b4a:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <com_left+0x244>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
										com_spi2_angle1 : com_spi2_angle2))
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <com_left+0x13c>
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <com_left+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	e001      	b.n	8001b5c <com_left+0x140>
 8001b58:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <com_left+0x274>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	1ad3      	subs	r3, r2, r3
				&& (abs(
 8001b60:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b64:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <com_left+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	da6e      	bge.n	8001c4e <com_left+0x232>
				&& (abs(
						rc_angle_3
								- ((first_wheel) ?
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <com_left+0x244>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
										com_spi3_angle1 : com_spi3_angle2))
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <com_left+0x162>
 8001b78:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <com_left+0x278>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e001      	b.n	8001b82 <com_left+0x166>
 8001b7e:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <com_left+0x27c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	1ad3      	subs	r3, r2, r3
				&& (abs(
 8001b86:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b8a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)) {
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <com_left+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 8001b92:	429a      	cmp	r2, r3
 8001b94:	da5b      	bge.n	8001c4e <com_left+0x232>
			first_wheel = !first_wheel;
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <com_left+0x244>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f083 0301 	eor.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <com_left+0x244>)
 8001bb2:	701a      	strb	r2, [r3, #0]
			if (first_wheel) {
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <com_left+0x244>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d024      	beq.n	8001c06 <com_left+0x1ea>
				com_spi1_angle1 += 360;
 8001bbc:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <com_left+0x268>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc4:	4a2f      	ldr	r2, [pc, #188]	; (8001c84 <com_left+0x268>)
 8001bc6:	6013      	str	r3, [r2, #0]
				com_spi2_angle1 -= 360;
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <com_left+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bd0:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <com_left+0x270>)
 8001bd2:	6013      	str	r3, [r2, #0]
				com_spi3_angle1 += 360;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <com_left+0x278>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <com_left+0x278>)
 8001bde:	6013      	str	r3, [r2, #0]

				spi1_adaptive_1_var1 = 1;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <com_left+0x280>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 2;
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <com_left+0x284>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 1;
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <com_left+0x288>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

				spi1_adaptive_2_var1 = 0;
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <com_left+0x28c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 0;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <com_left+0x290>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 0;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <com_left+0x294>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 0;

			}
		}
	}
}
 8001c04:	e023      	b.n	8001c4e <com_left+0x232>
				com_spi1_angle2 -= 360;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <com_left+0x264>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <com_left+0x264>)
 8001c10:	6013      	str	r3, [r2, #0]
				com_spi2_angle2 += 360;
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <com_left+0x274>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1a:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <com_left+0x274>)
 8001c1c:	6013      	str	r3, [r2, #0]
				com_spi3_angle2 -= 360;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <com_left+0x27c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c26:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <com_left+0x27c>)
 8001c28:	6013      	str	r3, [r2, #0]
				spi1_adaptive_2_var1 = 2;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <com_left+0x28c>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 1;
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <com_left+0x290>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 2;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <com_left+0x294>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	601a      	str	r2, [r3, #0]
				spi1_adaptive_1_var1 = 0;
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <com_left+0x280>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 0;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <com_left+0x284>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 0;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <com_left+0x288>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	200008d4 	.word	0x200008d4
 8001c60:	20000008 	.word	0x20000008
 8001c64:	200007e4 	.word	0x200007e4
 8001c68:	40590000 	.word	0x40590000
 8001c6c:	200007f0 	.word	0x200007f0
 8001c70:	2000079c 	.word	0x2000079c
 8001c74:	200007a8 	.word	0x200007a8
 8001c78:	2000082c 	.word	0x2000082c
 8001c7c:	20000838 	.word	0x20000838
 8001c80:	200009ac 	.word	0x200009ac
 8001c84:	200009a8 	.word	0x200009a8
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	200009b0 	.word	0x200009b0
 8001c90:	200009b4 	.word	0x200009b4
 8001c94:	200009b8 	.word	0x200009b8
 8001c98:	200009bc 	.word	0x200009bc
 8001c9c:	200009c0 	.word	0x200009c0
 8001ca0:	200009c4 	.word	0x200009c4
 8001ca4:	200009c8 	.word	0x200009c8
 8001ca8:	200009cc 	.word	0x200009cc
 8001cac:	200009d0 	.word	0x200009d0
 8001cb0:	200009d4 	.word	0x200009d4

08001cb4 <com_right>:
void com_right() {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
	if (start != 0) {
 8001cba:	4b8d      	ldr	r3, [pc, #564]	; (8001ef0 <com_right+0x23c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8111 	beq.w	8001ee6 <com_right+0x232>
		ifready = 1;
 8001cc4:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <com_right+0x240>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
		int rc_angle_1 =
				(first_wheel) ?
 8001cca:	4b8b      	ldr	r3, [pc, #556]	; (8001ef8 <com_right+0x244>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_1 =
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d011      	beq.n	8001cf6 <com_right+0x42>
						rc_spi1_angle_2 / 100.0 : rc_spi1_angle_1 / 100.0;
 8001cd2:	4b8a      	ldr	r3, [pc, #552]	; (8001efc <com_right+0x248>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fbd0 	bl	800047c <__aeabi_i2d>
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4b87      	ldr	r3, [pc, #540]	; (8001f00 <com_right+0x24c>)
 8001ce2:	f7fe fd5f 	bl	80007a4 <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
		int rc_angle_1 =
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe fe41 	bl	8000974 <__aeabi_d2iz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	e010      	b.n	8001d18 <com_right+0x64>
						rc_spi1_angle_2 / 100.0 : rc_spi1_angle_1 / 100.0;
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <com_right+0x250>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fbbe 	bl	800047c <__aeabi_i2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <com_right+0x24c>)
 8001d06:	f7fe fd4d 	bl	80007a4 <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
		int rc_angle_1 =
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fe2f 	bl	8000974 <__aeabi_d2iz>
 8001d16:	4603      	mov	r3, r0
 8001d18:	60fb      	str	r3, [r7, #12]
		int rc_angle_2 =
				(first_wheel) ?
 8001d1a:	4b77      	ldr	r3, [pc, #476]	; (8001ef8 <com_right+0x244>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_2 =
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d011      	beq.n	8001d46 <com_right+0x92>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 8001d22:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <com_right+0x254>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fba8 	bl	800047c <__aeabi_i2d>
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <com_right+0x24c>)
 8001d32:	f7fe fd37 	bl	80007a4 <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
		int rc_angle_2 =
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe fe19 	bl	8000974 <__aeabi_d2iz>
 8001d42:	4603      	mov	r3, r0
 8001d44:	e010      	b.n	8001d68 <com_right+0xb4>
						rc_spi2_angle_1 / 100.0 : rc_spi2_angle_2 / 100.0;
 8001d46:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <com_right+0x258>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fb96 	bl	800047c <__aeabi_i2d>
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <com_right+0x24c>)
 8001d56:	f7fe fd25 	bl	80007a4 <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
		int rc_angle_2 =
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fe07 	bl	8000974 <__aeabi_d2iz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	60bb      	str	r3, [r7, #8]
		int rc_angle_3 =
				(first_wheel) ?
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <com_right+0x244>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
		int rc_angle_3 =
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d011      	beq.n	8001d96 <com_right+0xe2>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <com_right+0x25c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fb80 	bl	800047c <__aeabi_i2d>
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <com_right+0x24c>)
 8001d82:	f7fe fd0f 	bl	80007a4 <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
		int rc_angle_3 =
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe fdf1 	bl	8000974 <__aeabi_d2iz>
 8001d92:	4603      	mov	r3, r0
 8001d94:	e010      	b.n	8001db8 <com_right+0x104>
						rc_spi3_angle_1 / 100.0 : rc_spi3_angle_2 / 100.0;
 8001d96:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <com_right+0x260>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb6e 	bl	800047c <__aeabi_i2d>
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <com_right+0x24c>)
 8001da6:	f7fe fcfd 	bl	80007a4 <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
		int rc_angle_3 =
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe fddf 	bl	8000974 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	607b      	str	r3, [r7, #4]

		if ((abs(
				rc_angle_1
						- ((first_wheel) ? com_spi1_angle1 : com_spi1_angle2))
 8001dba:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <com_right+0x244>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <com_right+0x114>
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <com_right+0x264>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	e001      	b.n	8001dcc <com_right+0x118>
 8001dc8:	4b54      	ldr	r3, [pc, #336]	; (8001f1c <com_right+0x268>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
		if ((abs(
 8001dd0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001dd4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
				< tolerance)
 8001dd8:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <com_right+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
		if ((abs(
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f280 8082 	bge.w	8001ee6 <com_right+0x232>
				&& (abs(
						rc_angle_2
								- ((first_wheel) ?
 8001de2:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <com_right+0x244>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
										com_spi2_angle1 : com_spi2_angle2))
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <com_right+0x13c>
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <com_right+0x270>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e001      	b.n	8001df4 <com_right+0x140>
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <com_right+0x274>)
 8001df2:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	1ad3      	subs	r3, r2, r3
				&& (abs(
 8001df8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001dfc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <com_right+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 8001e04:	429a      	cmp	r2, r3
 8001e06:	da6e      	bge.n	8001ee6 <com_right+0x232>
				&& (abs(
						rc_angle_3
								- ((first_wheel) ?
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <com_right+0x244>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
										com_spi3_angle1 : com_spi3_angle2))
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <com_right+0x162>
 8001e10:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <com_right+0x278>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	e001      	b.n	8001e1a <com_right+0x166>
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <com_right+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
								- ((first_wheel) ?
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	1ad3      	subs	r3, r2, r3
				&& (abs(
 8001e1e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e22:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
						< tolerance)) {
 8001e26:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <com_right+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
				&& (abs(
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	da5b      	bge.n	8001ee6 <com_right+0x232>
			first_wheel = !first_wheel;
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <com_right+0x244>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f083 0301 	eor.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <com_right+0x244>)
 8001e4a:	701a      	strb	r2, [r3, #0]
			if (first_wheel) {
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <com_right+0x244>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d024      	beq.n	8001e9e <com_right+0x1ea>
				com_spi1_angle1 -= 360;
 8001e54:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <com_right+0x264>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <com_right+0x264>)
 8001e5e:	6013      	str	r3, [r2, #0]
				com_spi2_angle1 += 360;
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <com_right+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e68:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <com_right+0x270>)
 8001e6a:	6013      	str	r3, [r2, #0]
				com_spi3_angle1 -= 360;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <com_right+0x278>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e74:	4a2d      	ldr	r2, [pc, #180]	; (8001f2c <com_right+0x278>)
 8001e76:	6013      	str	r3, [r2, #0]

				spi1_adaptive_1_var1 = 2;
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <com_right+0x280>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 1;
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <com_right+0x284>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 2;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <com_right+0x288>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]

				spi1_adaptive_2_var1 = 0;
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <com_right+0x28c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 0;
 8001e90:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <com_right+0x290>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 0;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <com_right+0x294>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 0;
				spi3_adaptive_1_var1 = 0;
			}
		}
	}
}
 8001e9c:	e023      	b.n	8001ee6 <com_right+0x232>
				com_spi1_angle2 += 360;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <com_right+0x268>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <com_right+0x268>)
 8001ea8:	6013      	str	r3, [r2, #0]
				com_spi2_angle2 -= 360;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <com_right+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <com_right+0x274>)
 8001eb4:	6013      	str	r3, [r2, #0]
				com_spi3_angle2 += 360;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <com_right+0x27c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <com_right+0x27c>)
 8001ec0:	6013      	str	r3, [r2, #0]
				spi1_adaptive_2_var1 = 1;
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <com_right+0x28c>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
				spi2_adaptive_2_var1 = 2;
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <com_right+0x290>)
 8001eca:	2202      	movs	r2, #2
 8001ecc:	601a      	str	r2, [r3, #0]
				spi3_adaptive_2_var1 = 1;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <com_right+0x294>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
				spi1_adaptive_1_var1 = 0;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <com_right+0x280>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
				spi2_adaptive_1_var1 = 0;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <com_right+0x284>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
				spi3_adaptive_1_var1 = 0;
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <com_right+0x288>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	200008d4 	.word	0x200008d4
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	200007f0 	.word	0x200007f0
 8001f00:	40590000 	.word	0x40590000
 8001f04:	200007e4 	.word	0x200007e4
 8001f08:	2000079c 	.word	0x2000079c
 8001f0c:	200007a8 	.word	0x200007a8
 8001f10:	2000082c 	.word	0x2000082c
 8001f14:	20000838 	.word	0x20000838
 8001f18:	200009a8 	.word	0x200009a8
 8001f1c:	200009ac 	.word	0x200009ac
 8001f20:	20000004 	.word	0x20000004
 8001f24:	200009b0 	.word	0x200009b0
 8001f28:	200009b4 	.word	0x200009b4
 8001f2c:	200009b8 	.word	0x200009b8
 8001f30:	200009bc 	.word	0x200009bc
 8001f34:	200009c0 	.word	0x200009c0
 8001f38:	200009c4 	.word	0x200009c4
 8001f3c:	200009c8 	.word	0x200009c8
 8001f40:	200009cc 	.word	0x200009cc
 8001f44:	200009d0 	.word	0x200009d0
 8001f48:	200009d4 	.word	0x200009d4

08001f4c <com_stop>:
void com_stop() {
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
//	} else if (!second_condition_met && first_condition_met) {
//		first_condition_met = false;
//		second_condition_met = true;
//	}
//
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <joystick_manual>:

}
void com_start() {

}
void joystick_manual() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	if (master_receive_1[6] == 666 && master_receive_2[6] == 666
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <joystick_manual+0xcc>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f240 229a 	movw	r2, #666	; 0x29a
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d15a      	bne.n	8002022 <joystick_manual+0xc6>
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <joystick_manual+0xd0>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f240 229a 	movw	r2, #666	; 0x29a
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d154      	bne.n	8002022 <joystick_manual+0xc6>
			&& master_receive_3[6] == 666) {
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <joystick_manual+0xd4>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f240 229a 	movw	r2, #666	; 0x29a
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d14e      	bne.n	8002022 <joystick_manual+0xc6>

		set_to_zero = 0;
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <joystick_manual+0xd8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
		if (flag_com_a == 0) {
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <joystick_manual+0xdc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d147      	bne.n	8002022 <joystick_manual+0xc6>
			if (control_direction == 1) { // ВПЕРЕД
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <joystick_manual+0xe0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <joystick_manual+0x42>
				com_forward();
 8001f9a:	f7ff faa7 	bl	80014ec <com_forward>
			}
			if (control_direction == 3) { // ВПРАВО
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <joystick_manual+0xe0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d101      	bne.n	8001faa <joystick_manual+0x4e>
				com_right();
 8001fa6:	f7ff fe85 	bl	8001cb4 <com_right>
			}
			if (control_direction == 5) { // НАЗАД
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <joystick_manual+0xe0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d101      	bne.n	8001fb6 <joystick_manual+0x5a>
				com_backward();
 8001fb2:	f7ff fbe7 	bl	8001784 <com_backward>
			}
			if (control_direction == 7) { // ВЛЕВО
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <joystick_manual+0xe0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b07      	cmp	r3, #7
 8001fbc:	d101      	bne.n	8001fc2 <joystick_manual+0x66>
				com_left();
 8001fbe:	f7ff fd2d 	bl	8001a1c <com_left>
			}
			if (control_direction == 9) { // STOP
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <joystick_manual+0xe0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b09      	cmp	r3, #9
 8001fc8:	d101      	bne.n	8001fce <joystick_manual+0x72>
				com_stop();
 8001fca:	f7ff ffbf 	bl	8001f4c <com_stop>
			}
			if (control_direction == 10) { // A
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <joystick_manual+0xe0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d102      	bne.n	8001fdc <joystick_manual+0x80>
				set_speed_limit = 1;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <joystick_manual+0xe4>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
			}
			if (control_direction == 11) { // B
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <joystick_manual+0xe0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b0b      	cmp	r3, #11
 8001fe2:	d102      	bne.n	8001fea <joystick_manual+0x8e>
				set_speed_limit = 2;
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <joystick_manual+0xe4>)
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	601a      	str	r2, [r3, #0]
			}
			if (control_direction == 12) { // X
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <joystick_manual+0xe0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d102      	bne.n	8001ff8 <joystick_manual+0x9c>
				set_speed_limit = 3;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <joystick_manual+0xe4>)
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	601a      	str	r2, [r3, #0]
			}
			if (control_direction == 13) { // Y
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <joystick_manual+0xe0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b0d      	cmp	r3, #13
 8001ffe:	d102      	bne.n	8002006 <joystick_manual+0xaa>
				tolerance = 200;
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <joystick_manual+0xe8>)
 8002002:	22c8      	movs	r2, #200	; 0xc8
 8002004:	601a      	str	r2, [r3, #0]
			}
			if (control_direction == 14) { // PAUSE
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <joystick_manual+0xe0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b0e      	cmp	r3, #14
 800200c:	d102      	bne.n	8002014 <joystick_manual+0xb8>
				tolerance = 120;
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <joystick_manual+0xe8>)
 8002010:	2278      	movs	r2, #120	; 0x78
 8002012:	601a      	str	r2, [r3, #0]
			}
			if (control_direction == 15) { // START
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <joystick_manual+0xe0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d102      	bne.n	8002022 <joystick_manual+0xc6>
				tolerance = 100;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <joystick_manual+0xe8>)
 800201e:	2264      	movs	r2, #100	; 0x64
 8002020:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200006e8 	.word	0x200006e8
 800202c:	20000730 	.word	0x20000730
 8002030:	20000778 	.word	0x20000778
 8002034:	200009dc 	.word	0x200009dc
 8002038:	200009e8 	.word	0x200009e8
 800203c:	200009a4 	.word	0x200009a4
 8002040:	200009e4 	.word	0x200009e4
 8002044:	20000004 	.word	0x20000004

08002048 <joystick_control>:
void joystick_control() {
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
	if (vx_joy < 600) {
 800204c:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <joystick_control+0x130>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002054:	da03      	bge.n	800205e <joystick_control+0x16>
		left_right = 1;
 8002056:	4b49      	ldr	r3, [pc, #292]	; (800217c <joystick_control+0x134>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e00c      	b.n	8002078 <joystick_control+0x30>
	} else if (vx_joy > 3000) {
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <joystick_control+0x130>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002066:	4293      	cmp	r3, r2
 8002068:	dd03      	ble.n	8002072 <joystick_control+0x2a>
		left_right = 0;
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <joystick_control+0x134>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e002      	b.n	8002078 <joystick_control+0x30>
	} else {
		left_right = 2;
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <joystick_control+0x134>)
 8002074:	2202      	movs	r2, #2
 8002076:	601a      	str	r2, [r3, #0]
	}
	if (vy_joy < 600) {
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <joystick_control+0x138>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002080:	da03      	bge.n	800208a <joystick_control+0x42>
		up_down = 0;
 8002082:	4b40      	ldr	r3, [pc, #256]	; (8002184 <joystick_control+0x13c>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e00c      	b.n	80020a4 <joystick_control+0x5c>
	} else if (vy_joy > 3000) {
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <joystick_control+0x138>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002092:	4293      	cmp	r3, r2
 8002094:	dd03      	ble.n	800209e <joystick_control+0x56>
		up_down = 1;
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <joystick_control+0x13c>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e002      	b.n	80020a4 <joystick_control+0x5c>
	} else {
		up_down = 2;
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <joystick_control+0x13c>)
 80020a0:	2202      	movs	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
	}
	if (left_right == 2 && up_down == 0) {
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <joystick_control+0x134>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d107      	bne.n	80020bc <joystick_control+0x74>
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <joystick_control+0x13c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <joystick_control+0x74>
		control_direction = 1;
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <joystick_control+0x140>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e057      	b.n	800216c <joystick_control+0x124>
	} else if (left_right == 0 && up_down == 0) {
 80020bc:	4b2f      	ldr	r3, [pc, #188]	; (800217c <joystick_control+0x134>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <joystick_control+0x8c>
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <joystick_control+0x13c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <joystick_control+0x8c>
		control_direction = 2;
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <joystick_control+0x140>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e04b      	b.n	800216c <joystick_control+0x124>
	} else if (left_right == 0 && up_down == 2) {
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <joystick_control+0x134>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d107      	bne.n	80020ec <joystick_control+0xa4>
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <joystick_control+0x13c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d103      	bne.n	80020ec <joystick_control+0xa4>
		control_direction = 3;
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <joystick_control+0x140>)
 80020e6:	2203      	movs	r2, #3
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e03f      	b.n	800216c <joystick_control+0x124>
	} else if (left_right == 0 && up_down == 1) {
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <joystick_control+0x134>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <joystick_control+0xbc>
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <joystick_control+0x13c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d103      	bne.n	8002104 <joystick_control+0xbc>
		control_direction = 4;
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <joystick_control+0x140>)
 80020fe:	2204      	movs	r2, #4
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e033      	b.n	800216c <joystick_control+0x124>
	} else if (left_right == 2 && up_down == 1) {
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <joystick_control+0x134>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d107      	bne.n	800211c <joystick_control+0xd4>
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <joystick_control+0x13c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d103      	bne.n	800211c <joystick_control+0xd4>
		control_direction = 5;
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <joystick_control+0x140>)
 8002116:	2205      	movs	r2, #5
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e027      	b.n	800216c <joystick_control+0x124>
	} else if (left_right == 1 && up_down == 1) {
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <joystick_control+0x134>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <joystick_control+0xec>
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <joystick_control+0x13c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d103      	bne.n	8002134 <joystick_control+0xec>
		control_direction = 6;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <joystick_control+0x140>)
 800212e:	2206      	movs	r2, #6
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e01b      	b.n	800216c <joystick_control+0x124>
	} else if (left_right == 1 && up_down == 2) {
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <joystick_control+0x134>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d107      	bne.n	800214c <joystick_control+0x104>
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <joystick_control+0x13c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d103      	bne.n	800214c <joystick_control+0x104>
		control_direction = 7;
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <joystick_control+0x140>)
 8002146:	2207      	movs	r2, #7
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e00f      	b.n	800216c <joystick_control+0x124>
	} else if (left_right == 1 && up_down == 0) {
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <joystick_control+0x134>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <joystick_control+0x11c>
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <joystick_control+0x13c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d103      	bne.n	8002164 <joystick_control+0x11c>
		control_direction = 8;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <joystick_control+0x140>)
 800215e:	2208      	movs	r2, #8
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e003      	b.n	800216c <joystick_control+0x124>
	} else {
		control_direction = 9;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <joystick_control+0x140>)
 8002166:	2209      	movs	r2, #9
 8002168:	601a      	str	r2, [r3, #0]
	}
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000994 	.word	0x20000994
 800217c:	200009a0 	.word	0x200009a0
 8002180:	20000998 	.word	0x20000998
 8002184:	2000099c 	.word	0x2000099c
 8002188:	200009a4 	.word	0x200009a4

0800218c <bluetooth_control>:
void bluetooth_control() {
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
	if (message_r == 70) { // FORWARD
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <bluetooth_control+0xbc>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b46      	cmp	r3, #70	; 0x46
 8002196:	d103      	bne.n	80021a0 <bluetooth_control+0x14>
		control_direction = 1;
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <bluetooth_control+0xc0>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]
	} else if (message_r == 65) { // START
		control_direction = 14;
	} else if (message_r == 80) { // PAUSE
		control_direction = 15;
	}
}
 800219e:	e04e      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 82) { //RIGHT
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <bluetooth_control+0xbc>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b52      	cmp	r3, #82	; 0x52
 80021a6:	d103      	bne.n	80021b0 <bluetooth_control+0x24>
		control_direction = 3;
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <bluetooth_control+0xc0>)
 80021aa:	2203      	movs	r2, #3
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	e046      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 66) { // BACKWARD
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <bluetooth_control+0xbc>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b42      	cmp	r3, #66	; 0x42
 80021b6:	d103      	bne.n	80021c0 <bluetooth_control+0x34>
		control_direction = 5;
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <bluetooth_control+0xc0>)
 80021ba:	2205      	movs	r2, #5
 80021bc:	601a      	str	r2, [r3, #0]
}
 80021be:	e03e      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 76) { // LEFT
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <bluetooth_control+0xbc>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b4c      	cmp	r3, #76	; 0x4c
 80021c6:	d103      	bne.n	80021d0 <bluetooth_control+0x44>
		control_direction = 7;
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <bluetooth_control+0xc0>)
 80021ca:	2207      	movs	r2, #7
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	e036      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 48) { // STOP
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <bluetooth_control+0xbc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b30      	cmp	r3, #48	; 0x30
 80021d6:	d103      	bne.n	80021e0 <bluetooth_control+0x54>
		control_direction = 9;
 80021d8:	4b1c      	ldr	r3, [pc, #112]	; (800224c <bluetooth_control+0xc0>)
 80021da:	2209      	movs	r2, #9
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	e02e      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 88) { // A
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <bluetooth_control+0xbc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b58      	cmp	r3, #88	; 0x58
 80021e6:	d103      	bne.n	80021f0 <bluetooth_control+0x64>
		control_direction = 10;
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <bluetooth_control+0xc0>)
 80021ea:	220a      	movs	r2, #10
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	e026      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 67) { // B
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <bluetooth_control+0xbc>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b43      	cmp	r3, #67	; 0x43
 80021f6:	d103      	bne.n	8002200 <bluetooth_control+0x74>
		control_direction = 11;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <bluetooth_control+0xc0>)
 80021fa:	220b      	movs	r2, #11
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	e01e      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 83) { // X
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <bluetooth_control+0xbc>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b53      	cmp	r3, #83	; 0x53
 8002206:	d103      	bne.n	8002210 <bluetooth_control+0x84>
		control_direction = 12;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <bluetooth_control+0xc0>)
 800220a:	220c      	movs	r2, #12
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	e016      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 84) { // Y
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <bluetooth_control+0xbc>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b54      	cmp	r3, #84	; 0x54
 8002216:	d103      	bne.n	8002220 <bluetooth_control+0x94>
		control_direction = 13;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <bluetooth_control+0xc0>)
 800221a:	220d      	movs	r2, #13
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	e00e      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 65) { // START
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <bluetooth_control+0xbc>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b41      	cmp	r3, #65	; 0x41
 8002226:	d103      	bne.n	8002230 <bluetooth_control+0xa4>
		control_direction = 14;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <bluetooth_control+0xc0>)
 800222a:	220e      	movs	r2, #14
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	e006      	b.n	800223e <bluetooth_control+0xb2>
	} else if (message_r == 80) { // PAUSE
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <bluetooth_control+0xbc>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b50      	cmp	r3, #80	; 0x50
 8002236:	d102      	bne.n	800223e <bluetooth_control+0xb2>
		control_direction = 15;
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <bluetooth_control+0xc0>)
 800223a:	220f      	movs	r2, #15
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	20000000 	.word	0x20000000
 800224c:	200009a4 	.word	0x200009a4

08002250 <spi1_send>:
		} else if (delta_angles[i] < -max_angle_change) {
			delta_angles[i] = -max_angle_change;
		}
	}
}
void spi1_send() {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
	if (spi1_cond == 1) {
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <spi1_send+0x108>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d123      	bne.n	80022a6 <spi1_send+0x56>
		rc_spi1_angle_1 = master_receive_1[0];
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <spi1_send+0x10c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a3f      	ldr	r2, [pc, #252]	; (8002360 <spi1_send+0x110>)
 8002264:	6013      	str	r3, [r2, #0]
		rc_spi1_speed_1 = master_receive_1[1];
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <spi1_send+0x10c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a3e      	ldr	r2, [pc, #248]	; (8002364 <spi1_send+0x114>)
 800226c:	6013      	str	r3, [r2, #0]
		rc_spi1_current_1 = master_receive_1[2];
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <spi1_send+0x10c>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4a3d      	ldr	r2, [pc, #244]	; (8002368 <spi1_send+0x118>)
 8002274:	6013      	str	r3, [r2, #0]
		rc_spi1_angle_2 = master_receive_1[3];
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <spi1_send+0x10c>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a3c      	ldr	r2, [pc, #240]	; (800236c <spi1_send+0x11c>)
 800227c:	6013      	str	r3, [r2, #0]
		rc_spi1_speed_2 = master_receive_1[4];
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <spi1_send+0x10c>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <spi1_send+0x120>)
 8002284:	6013      	str	r3, [r2, #0]
		rc_spi1_current_2 = master_receive_1[5];
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <spi1_send+0x10c>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4a3a      	ldr	r2, [pc, #232]	; (8002374 <spi1_send+0x124>)
 800228c:	6013      	str	r3, [r2, #0]
		rc_spi1_protocol = master_receive_1[6];
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <spi1_send+0x10c>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	4a39      	ldr	r2, [pc, #228]	; (8002378 <spi1_send+0x128>)
 8002294:	6013      	str	r3, [r2, #0]
		rc_spi1_currangle1 = master_receive_1[7];
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <spi1_send+0x10c>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <spi1_send+0x12c>)
 800229c:	6013      	str	r3, [r2, #0]
		rc_spi1_currangle2 = master_receive_1[8];
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <spi1_send+0x10c>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a37      	ldr	r2, [pc, #220]	; (8002380 <spi1_send+0x130>)
 80022a4:	6013      	str	r3, [r2, #0]
	}
	if (spi1_cond == 2) {
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <spi1_send+0x108>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d13e      	bne.n	800232c <spi1_send+0xdc>
		master_transmit_1[0] = 0;
 80022ae:	4b35      	ldr	r3, [pc, #212]	; (8002384 <spi1_send+0x134>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
		master_transmit_1[1] = 0;
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <spi1_send+0x134>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
		master_transmit_1[2] = 0;
 80022ba:	4b32      	ldr	r3, [pc, #200]	; (8002384 <spi1_send+0x134>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
		master_transmit_1[3] = 0;
 80022c0:	4b30      	ldr	r3, [pc, #192]	; (8002384 <spi1_send+0x134>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
		master_transmit_1[4] = 0;
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <spi1_send+0x134>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
		master_transmit_1[5] = 0;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <spi1_send+0x134>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
		master_transmit_1[6] = 0;
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <spi1_send+0x134>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
		master_transmit_1[7] = 0;
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <spi1_send+0x134>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
		master_transmit_1[8] = 0;
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <spi1_send+0x134>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]

		master_receive_1[0] = 0;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <spi1_send+0x10c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
		master_receive_1[1] = 0;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <spi1_send+0x10c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]
		master_receive_1[2] = 0;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <spi1_send+0x10c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
		master_receive_1[3] = 0;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <spi1_send+0x10c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	60da      	str	r2, [r3, #12]
		master_receive_1[4] = 0;
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <spi1_send+0x10c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
		master_receive_1[5] = 0;
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <spi1_send+0x10c>)
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
		master_receive_1[6] = 0;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <spi1_send+0x10c>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
		master_receive_1[7] = 0;
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <spi1_send+0x10c>)
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
		master_receive_1[8] = 0;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <spi1_send+0x10c>)
 8002316:	2200      	movs	r2, #0
 8002318:	621a      	str	r2, [r3, #32]
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*) master_transmit_1,
 800231a:	2324      	movs	r3, #36	; 0x24
 800231c:	4a0f      	ldr	r2, [pc, #60]	; (800235c <spi1_send+0x10c>)
 800231e:	4919      	ldr	r1, [pc, #100]	; (8002384 <spi1_send+0x134>)
 8002320:	4819      	ldr	r0, [pc, #100]	; (8002388 <spi1_send+0x138>)
 8002322:	f004 f96f 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
				(uint8_t*) master_receive_1, 36);
		spi1_cond = 0;
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <spi1_send+0x108>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
	}
	HAL_StatusTypeDef status1 = HAL_SPI_TransmitReceive_DMA(&hspi1,
 800232c:	2324      	movs	r3, #36	; 0x24
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <spi1_send+0x10c>)
 8002330:	4914      	ldr	r1, [pc, #80]	; (8002384 <spi1_send+0x134>)
 8002332:	4815      	ldr	r0, [pc, #84]	; (8002388 <spi1_send+0x138>)
 8002334:	f004 f966 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
			(uint8_t*) master_transmit_1, (uint8_t*) master_receive_1, 36);
	if (status1 == HAL_OK) {
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <spi1_send+0xfe>
		HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*) master_transmit_2,
 8002342:	2324      	movs	r3, #36	; 0x24
 8002344:	4a11      	ldr	r2, [pc, #68]	; (800238c <spi1_send+0x13c>)
 8002346:	4912      	ldr	r1, [pc, #72]	; (8002390 <spi1_send+0x140>)
 8002348:	4812      	ldr	r0, [pc, #72]	; (8002394 <spi1_send+0x144>)
 800234a:	f004 f95b 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
				(uint8_t*) master_receive_2, 36);
	}
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200008dc 	.word	0x200008dc
 800235c:	200006e8 	.word	0x200006e8
 8002360:	200007e4 	.word	0x200007e4
 8002364:	200007e8 	.word	0x200007e8
 8002368:	200007ec 	.word	0x200007ec
 800236c:	200007f0 	.word	0x200007f0
 8002370:	200007f4 	.word	0x200007f4
 8002374:	200007f8 	.word	0x200007f8
 8002378:	20000818 	.word	0x20000818
 800237c:	2000081c 	.word	0x2000081c
 8002380:	20000820 	.word	0x20000820
 8002384:	200006c4 	.word	0x200006c4
 8002388:	200000e0 	.word	0x200000e0
 800238c:	20000730 	.word	0x20000730
 8002390:	2000070c 	.word	0x2000070c
 8002394:	20000138 	.word	0x20000138

08002398 <spi2_send>:

void spi2_send() {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	if (spi2_cond == 1) {
 800239e:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <spi2_send+0x108>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d123      	bne.n	80023ee <spi2_send+0x56>
		rc_spi2_angle_1 = master_receive_2[0];
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <spi2_send+0x10c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <spi2_send+0x110>)
 80023ac:	6013      	str	r3, [r2, #0]
		rc_spi2_angle_2 = master_receive_2[3];
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <spi2_send+0x10c>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4a3e      	ldr	r2, [pc, #248]	; (80024ac <spi2_send+0x114>)
 80023b4:	6013      	str	r3, [r2, #0]

		rc_spi2_speed_1 = master_receive_2[1];
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <spi2_send+0x10c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a3d      	ldr	r2, [pc, #244]	; (80024b0 <spi2_send+0x118>)
 80023bc:	6013      	str	r3, [r2, #0]
		rc_spi2_speed_2 = master_receive_2[4];
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <spi2_send+0x10c>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4a3c      	ldr	r2, [pc, #240]	; (80024b4 <spi2_send+0x11c>)
 80023c4:	6013      	str	r3, [r2, #0]
		rc_spi2_current_1 = master_receive_2[2];
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <spi2_send+0x10c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <spi2_send+0x120>)
 80023cc:	6013      	str	r3, [r2, #0]

		rc_spi2_current_2 = master_receive_2[5];
 80023ce:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <spi2_send+0x10c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <spi2_send+0x124>)
 80023d4:	6013      	str	r3, [r2, #0]
		rc_spi2_protocol = master_receive_2[6];
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <spi2_send+0x10c>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a39      	ldr	r2, [pc, #228]	; (80024c0 <spi2_send+0x128>)
 80023dc:	6013      	str	r3, [r2, #0]

		rc_spi2_currangle1 = master_receive_2[7];
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <spi2_send+0x10c>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <spi2_send+0x12c>)
 80023e4:	6013      	str	r3, [r2, #0]
		rc_spi2_currangle2 = master_receive_2[8];
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <spi2_send+0x10c>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a37      	ldr	r2, [pc, #220]	; (80024c8 <spi2_send+0x130>)
 80023ec:	6013      	str	r3, [r2, #0]
	}
	if (spi2_cond == 2) {
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <spi2_send+0x108>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d13e      	bne.n	8002474 <spi2_send+0xdc>
		master_transmit_2[0] = 0;
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <spi2_send+0x134>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
		master_transmit_2[1] = 0;
 80023fc:	4b33      	ldr	r3, [pc, #204]	; (80024cc <spi2_send+0x134>)
 80023fe:	2200      	movs	r2, #0
 8002400:	605a      	str	r2, [r3, #4]
		master_transmit_2[2] = 0;
 8002402:	4b32      	ldr	r3, [pc, #200]	; (80024cc <spi2_send+0x134>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
		master_transmit_2[3] = 0;
 8002408:	4b30      	ldr	r3, [pc, #192]	; (80024cc <spi2_send+0x134>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
		master_transmit_2[4] = 0;
 800240e:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <spi2_send+0x134>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
		master_transmit_2[5] = 0;
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <spi2_send+0x134>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
		master_transmit_2[6] = 0;
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <spi2_send+0x134>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
		master_transmit_2[7] = 0;
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <spi2_send+0x134>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
		master_transmit_2[8] = 0;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <spi2_send+0x134>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]

		master_receive_2[0] = 0;
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <spi2_send+0x10c>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
		master_receive_2[1] = 0;
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <spi2_send+0x10c>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
		master_receive_2[2] = 0;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <spi2_send+0x10c>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
		master_receive_2[3] = 0;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <spi2_send+0x10c>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
		master_receive_2[4] = 0;
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <spi2_send+0x10c>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
		master_receive_2[5] = 0;
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <spi2_send+0x10c>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
		master_receive_2[6] = 0;
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <spi2_send+0x10c>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
		master_receive_2[7] = 0;
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <spi2_send+0x10c>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
		master_receive_2[8] = 0;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <spi2_send+0x10c>)
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
		HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*) master_transmit_2,
 8002462:	2324      	movs	r3, #36	; 0x24
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <spi2_send+0x10c>)
 8002466:	4919      	ldr	r1, [pc, #100]	; (80024cc <spi2_send+0x134>)
 8002468:	4819      	ldr	r0, [pc, #100]	; (80024d0 <spi2_send+0x138>)
 800246a:	f004 f8cb 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
				(uint8_t*) master_receive_2, 36);
		spi2_cond = 0;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <spi2_send+0x108>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
	}
	HAL_StatusTypeDef status2 = HAL_SPI_TransmitReceive_DMA(&hspi2,
 8002474:	2324      	movs	r3, #36	; 0x24
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <spi2_send+0x10c>)
 8002478:	4914      	ldr	r1, [pc, #80]	; (80024cc <spi2_send+0x134>)
 800247a:	4815      	ldr	r0, [pc, #84]	; (80024d0 <spi2_send+0x138>)
 800247c:	f004 f8c2 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
			(uint8_t*) master_transmit_2, (uint8_t*) master_receive_2, 36);
	if (status2 == HAL_OK) {
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <spi2_send+0xfe>
		HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*) master_transmit_2,
 800248a:	2324      	movs	r3, #36	; 0x24
 800248c:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <spi2_send+0x10c>)
 800248e:	490f      	ldr	r1, [pc, #60]	; (80024cc <spi2_send+0x134>)
 8002490:	480f      	ldr	r0, [pc, #60]	; (80024d0 <spi2_send+0x138>)
 8002492:	f004 f8b7 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
				(uint8_t*) master_receive_2, 36);
	}
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200008e0 	.word	0x200008e0
 80024a4:	20000730 	.word	0x20000730
 80024a8:	2000079c 	.word	0x2000079c
 80024ac:	200007a8 	.word	0x200007a8
 80024b0:	200007a0 	.word	0x200007a0
 80024b4:	200007ac 	.word	0x200007ac
 80024b8:	200007a4 	.word	0x200007a4
 80024bc:	200007b0 	.word	0x200007b0
 80024c0:	200007d0 	.word	0x200007d0
 80024c4:	200007d4 	.word	0x200007d4
 80024c8:	200007d8 	.word	0x200007d8
 80024cc:	2000070c 	.word	0x2000070c
 80024d0:	20000138 	.word	0x20000138

080024d4 <spi3_send>:
void spi3_send() {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
	if (spi3_cond == 1) {
 80024da:	4b40      	ldr	r3, [pc, #256]	; (80025dc <spi3_send+0x108>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d123      	bne.n	800252a <spi3_send+0x56>
		rc_spi3_angle_1 = master_receive_3[0];
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <spi3_send+0x10c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a3f      	ldr	r2, [pc, #252]	; (80025e4 <spi3_send+0x110>)
 80024e8:	6013      	str	r3, [r2, #0]
		rc_spi3_speed_1 = master_receive_3[1];
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <spi3_send+0x10c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a3e      	ldr	r2, [pc, #248]	; (80025e8 <spi3_send+0x114>)
 80024f0:	6013      	str	r3, [r2, #0]
		rc_spi3_current_1 = master_receive_3[2];
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <spi3_send+0x10c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <spi3_send+0x118>)
 80024f8:	6013      	str	r3, [r2, #0]
		rc_spi3_angle_2 = master_receive_3[3];
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <spi3_send+0x10c>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4a3c      	ldr	r2, [pc, #240]	; (80025f0 <spi3_send+0x11c>)
 8002500:	6013      	str	r3, [r2, #0]
		rc_spi3_speed_2 = master_receive_3[4];
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <spi3_send+0x10c>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <spi3_send+0x120>)
 8002508:	6013      	str	r3, [r2, #0]
		rc_spi3_current_2 = master_receive_3[5];
 800250a:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <spi3_send+0x10c>)
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <spi3_send+0x124>)
 8002510:	6013      	str	r3, [r2, #0]
		rc_spi3_protocol = master_receive_3[6];
 8002512:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <spi3_send+0x10c>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	4a39      	ldr	r2, [pc, #228]	; (80025fc <spi3_send+0x128>)
 8002518:	6013      	str	r3, [r2, #0]
		rc_spi3_currangle1 = master_receive_3[7];
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <spi3_send+0x10c>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a38      	ldr	r2, [pc, #224]	; (8002600 <spi3_send+0x12c>)
 8002520:	6013      	str	r3, [r2, #0]
		rc_spi3_currangle2 = master_receive_3[8];
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <spi3_send+0x10c>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a37      	ldr	r2, [pc, #220]	; (8002604 <spi3_send+0x130>)
 8002528:	6013      	str	r3, [r2, #0]
	}
	if (spi3_cond == 2) {
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <spi3_send+0x108>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d13e      	bne.n	80025b0 <spi3_send+0xdc>
		master_transmit_3[0] = 0;
 8002532:	4b35      	ldr	r3, [pc, #212]	; (8002608 <spi3_send+0x134>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
		master_transmit_3[1] = 0;
 8002538:	4b33      	ldr	r3, [pc, #204]	; (8002608 <spi3_send+0x134>)
 800253a:	2200      	movs	r2, #0
 800253c:	605a      	str	r2, [r3, #4]
		master_transmit_3[2] = 0;
 800253e:	4b32      	ldr	r3, [pc, #200]	; (8002608 <spi3_send+0x134>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
		master_transmit_3[3] = 0;
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <spi3_send+0x134>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
		master_transmit_3[4] = 0;
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <spi3_send+0x134>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
		master_transmit_3[5] = 0;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <spi3_send+0x134>)
 8002552:	2200      	movs	r2, #0
 8002554:	615a      	str	r2, [r3, #20]
		master_transmit_3[6] = 0;
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <spi3_send+0x134>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
		master_transmit_3[7] = 0;
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <spi3_send+0x134>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
		master_transmit_3[8] = 0;
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <spi3_send+0x134>)
 8002564:	2200      	movs	r2, #0
 8002566:	621a      	str	r2, [r3, #32]

		master_receive_3[0] = 0;
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <spi3_send+0x10c>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
		master_receive_3[1] = 0;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <spi3_send+0x10c>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
		master_receive_3[2] = 0;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <spi3_send+0x10c>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
		master_receive_3[3] = 0;
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <spi3_send+0x10c>)
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
		master_receive_3[4] = 0;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <spi3_send+0x10c>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
		master_receive_3[5] = 0;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <spi3_send+0x10c>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
		master_receive_3[6] = 0;
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <spi3_send+0x10c>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
		master_receive_3[7] = 0;
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <spi3_send+0x10c>)
 8002594:	2200      	movs	r2, #0
 8002596:	61da      	str	r2, [r3, #28]
		master_receive_3[8] = 0;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <spi3_send+0x10c>)
 800259a:	2200      	movs	r2, #0
 800259c:	621a      	str	r2, [r3, #32]

		HAL_SPI_TransmitReceive_DMA(&hspi3, (uint8_t*) master_transmit_3,
 800259e:	2324      	movs	r3, #36	; 0x24
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <spi3_send+0x10c>)
 80025a2:	4919      	ldr	r1, [pc, #100]	; (8002608 <spi3_send+0x134>)
 80025a4:	4819      	ldr	r0, [pc, #100]	; (800260c <spi3_send+0x138>)
 80025a6:	f004 f82d 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
				(uint8_t*) master_receive_3, 36);
		spi3_cond = 0;
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <spi3_send+0x108>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
	}
	HAL_StatusTypeDef status3 = HAL_SPI_TransmitReceive_DMA(&hspi3,
 80025b0:	2324      	movs	r3, #36	; 0x24
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <spi3_send+0x10c>)
 80025b4:	4914      	ldr	r1, [pc, #80]	; (8002608 <spi3_send+0x134>)
 80025b6:	4815      	ldr	r0, [pc, #84]	; (800260c <spi3_send+0x138>)
 80025b8:	f004 f824 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
			(uint8_t*) master_transmit_3, (uint8_t*) master_receive_3, 36);
	if (status3 == HAL_OK) {
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <spi3_send+0xfe>
		HAL_SPI_TransmitReceive_DMA(&hspi3, (uint8_t*) master_transmit_3,
 80025c6:	2324      	movs	r3, #36	; 0x24
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <spi3_send+0x10c>)
 80025ca:	490f      	ldr	r1, [pc, #60]	; (8002608 <spi3_send+0x134>)
 80025cc:	480f      	ldr	r0, [pc, #60]	; (800260c <spi3_send+0x138>)
 80025ce:	f004 f819 	bl	8006604 <HAL_SPI_TransmitReceive_DMA>
				(uint8_t*) master_receive_3, 36);
	}
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200008e4 	.word	0x200008e4
 80025e0:	20000778 	.word	0x20000778
 80025e4:	2000082c 	.word	0x2000082c
 80025e8:	20000830 	.word	0x20000830
 80025ec:	20000834 	.word	0x20000834
 80025f0:	20000838 	.word	0x20000838
 80025f4:	2000083c 	.word	0x2000083c
 80025f8:	20000840 	.word	0x20000840
 80025fc:	20000860 	.word	0x20000860
 8002600:	20000864 	.word	0x20000864
 8002604:	20000868 	.word	0x20000868
 8002608:	20000754 	.word	0x20000754
 800260c:	20000190 	.word	0x20000190

08002610 <flag_on>:
void flag_on() {
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(IFREADY3_GPIO_Port, IFREADY3_Pin) == 1) {
 8002614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <flag_on+0x24>)
 800261a:	f003 fad7 	bl	8005bcc <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d105      	bne.n	8002630 <flag_on+0x20>
		spi1_clear();
 8002624:	f000 fb5c 	bl	8002ce0 <spi1_clear>
		spi2_clear();
 8002628:	f000 fb8e 	bl	8002d48 <spi2_clear>
		spi3_clear();
 800262c:	f000 fbc0 	bl	8002db0 <spi3_clear>
	}
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40020800 	.word	0x40020800

08002638 <transmit_info>:
void transmit_info() {
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	master_transmit_1[0] = com_spi1_angle1;
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <transmit_info+0x1c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6f      	ldr	r2, [pc, #444]	; (8002800 <transmit_info+0x1c8>)
 8002642:	6013      	str	r3, [r2, #0]
	master_transmit_1[1] = com_spi1_angle2;
 8002644:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <transmit_info+0x1cc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6d      	ldr	r2, [pc, #436]	; (8002800 <transmit_info+0x1c8>)
 800264a:	6053      	str	r3, [r2, #4]
	master_transmit_1[2] = ifready;
 800264c:	4b6e      	ldr	r3, [pc, #440]	; (8002808 <transmit_info+0x1d0>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b25b      	sxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <transmit_info+0x1c8>)
 8002656:	609a      	str	r2, [r3, #8]
//	master_transmit_1[2] = 1;
//	master_transmit_1[3] = stop_com;
	master_transmit_1[3] = 0;
 8002658:	4b69      	ldr	r3, [pc, #420]	; (8002800 <transmit_info+0x1c8>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
	master_transmit_1[4] = spi1_adaptive_1_var1;
 800265e:	4b6b      	ldr	r3, [pc, #428]	; (800280c <transmit_info+0x1d4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a67      	ldr	r2, [pc, #412]	; (8002800 <transmit_info+0x1c8>)
 8002664:	6113      	str	r3, [r2, #16]
	master_transmit_1[5] = spi1_adaptive_2_var1;
 8002666:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <transmit_info+0x1d8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a65      	ldr	r2, [pc, #404]	; (8002800 <transmit_info+0x1c8>)
 800266c:	6153      	str	r3, [r2, #20]
	master_transmit_1[6] = protocol;
 800266e:	4b69      	ldr	r3, [pc, #420]	; (8002814 <transmit_info+0x1dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a63      	ldr	r2, [pc, #396]	; (8002800 <transmit_info+0x1c8>)
 8002674:	6193      	str	r3, [r2, #24]
	master_transmit_1[7] = set_to_zero;
 8002676:	4b68      	ldr	r3, [pc, #416]	; (8002818 <transmit_info+0x1e0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a61      	ldr	r2, [pc, #388]	; (8002800 <transmit_info+0x1c8>)
 800267c:	61d3      	str	r3, [r2, #28]
	master_transmit_1[8] = set_speed_limit;
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <transmit_info+0x1e4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a5f      	ldr	r2, [pc, #380]	; (8002800 <transmit_info+0x1c8>)
 8002684:	6213      	str	r3, [r2, #32]

	master_transmit_2[0] = com_spi2_angle1;
 8002686:	4b66      	ldr	r3, [pc, #408]	; (8002820 <transmit_info+0x1e8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a66      	ldr	r2, [pc, #408]	; (8002824 <transmit_info+0x1ec>)
 800268c:	6013      	str	r3, [r2, #0]
	master_transmit_2[1] = com_spi2_angle2;
 800268e:	4b66      	ldr	r3, [pc, #408]	; (8002828 <transmit_info+0x1f0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a64      	ldr	r2, [pc, #400]	; (8002824 <transmit_info+0x1ec>)
 8002694:	6053      	str	r3, [r2, #4]
	master_transmit_2[2] = ifready;
 8002696:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <transmit_info+0x1d0>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b25b      	sxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <transmit_info+0x1ec>)
 80026a0:	609a      	str	r2, [r3, #8]
//	master_transmit_2[3] = stop_com
//	master_transmit_2[2] = 1;
	master_transmit_2[3] = 0;
 80026a2:	4b60      	ldr	r3, [pc, #384]	; (8002824 <transmit_info+0x1ec>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
	master_transmit_2[4] = spi2_adaptive_1_var1;
 80026a8:	4b60      	ldr	r3, [pc, #384]	; (800282c <transmit_info+0x1f4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5d      	ldr	r2, [pc, #372]	; (8002824 <transmit_info+0x1ec>)
 80026ae:	6113      	str	r3, [r2, #16]
	master_transmit_2[5] = spi2_adaptive_2_var1;
 80026b0:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <transmit_info+0x1f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5b      	ldr	r2, [pc, #364]	; (8002824 <transmit_info+0x1ec>)
 80026b6:	6153      	str	r3, [r2, #20]
	master_transmit_2[6] = protocol;
 80026b8:	4b56      	ldr	r3, [pc, #344]	; (8002814 <transmit_info+0x1dc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a59      	ldr	r2, [pc, #356]	; (8002824 <transmit_info+0x1ec>)
 80026be:	6193      	str	r3, [r2, #24]
	master_transmit_2[7] = set_to_zero;
 80026c0:	4b55      	ldr	r3, [pc, #340]	; (8002818 <transmit_info+0x1e0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a57      	ldr	r2, [pc, #348]	; (8002824 <transmit_info+0x1ec>)
 80026c6:	61d3      	str	r3, [r2, #28]
	master_transmit_2[8] = set_speed_limit;
 80026c8:	4b54      	ldr	r3, [pc, #336]	; (800281c <transmit_info+0x1e4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a55      	ldr	r2, [pc, #340]	; (8002824 <transmit_info+0x1ec>)
 80026ce:	6213      	str	r3, [r2, #32]

	master_transmit_3[0] = com_spi3_angle1;
 80026d0:	4b58      	ldr	r3, [pc, #352]	; (8002834 <transmit_info+0x1fc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <transmit_info+0x200>)
 80026d6:	6013      	str	r3, [r2, #0]
	master_transmit_3[1] = com_spi3_angle2;
 80026d8:	4b58      	ldr	r3, [pc, #352]	; (800283c <transmit_info+0x204>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a56      	ldr	r2, [pc, #344]	; (8002838 <transmit_info+0x200>)
 80026de:	6053      	str	r3, [r2, #4]
	master_transmit_3[2] = ifready;
 80026e0:	4b49      	ldr	r3, [pc, #292]	; (8002808 <transmit_info+0x1d0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <transmit_info+0x200>)
 80026ea:	609a      	str	r2, [r3, #8]
//	master_transmit_3[3] = stop_com;
//	master_transmit_3[2] = 1;
	master_transmit_3[3] = 0;
 80026ec:	4b52      	ldr	r3, [pc, #328]	; (8002838 <transmit_info+0x200>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
	master_transmit_3[4] = spi3_adaptive_1_var1;
 80026f2:	4b53      	ldr	r3, [pc, #332]	; (8002840 <transmit_info+0x208>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a50      	ldr	r2, [pc, #320]	; (8002838 <transmit_info+0x200>)
 80026f8:	6113      	str	r3, [r2, #16]
	master_transmit_3[5] = spi3_adaptive_2_var1;
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <transmit_info+0x20c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <transmit_info+0x200>)
 8002700:	6153      	str	r3, [r2, #20]
	master_transmit_3[6] = protocol;
 8002702:	4b44      	ldr	r3, [pc, #272]	; (8002814 <transmit_info+0x1dc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <transmit_info+0x200>)
 8002708:	6193      	str	r3, [r2, #24]
	master_transmit_3[7] = set_to_zero;
 800270a:	4b43      	ldr	r3, [pc, #268]	; (8002818 <transmit_info+0x1e0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <transmit_info+0x200>)
 8002710:	61d3      	str	r3, [r2, #28]
	master_transmit_3[8] = set_speed_limit;
 8002712:	4b42      	ldr	r3, [pc, #264]	; (800281c <transmit_info+0x1e4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a48      	ldr	r2, [pc, #288]	; (8002838 <transmit_info+0x200>)
 8002718:	6213      	str	r3, [r2, #32]

	tr_spi_1_command1 = master_transmit_1[0];
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <transmit_info+0x1c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a4a      	ldr	r2, [pc, #296]	; (8002848 <transmit_info+0x210>)
 8002720:	6013      	str	r3, [r2, #0]
	tr_spi_1_command2 = master_transmit_1[1];
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <transmit_info+0x1c8>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a49      	ldr	r2, [pc, #292]	; (800284c <transmit_info+0x214>)
 8002728:	6013      	str	r3, [r2, #0]
	tr_spi_1_command3 = master_transmit_1[2];
 800272a:	4b35      	ldr	r3, [pc, #212]	; (8002800 <transmit_info+0x1c8>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4a48      	ldr	r2, [pc, #288]	; (8002850 <transmit_info+0x218>)
 8002730:	6013      	str	r3, [r2, #0]
	tr_spi_1_command4 = master_transmit_1[3];
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <transmit_info+0x1c8>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4a47      	ldr	r2, [pc, #284]	; (8002854 <transmit_info+0x21c>)
 8002738:	6013      	str	r3, [r2, #0]
	tr_spi_1_command5 = master_transmit_1[4];
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <transmit_info+0x1c8>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	4a46      	ldr	r2, [pc, #280]	; (8002858 <transmit_info+0x220>)
 8002740:	6013      	str	r3, [r2, #0]
	tr_spi_1_command6 = master_transmit_1[5];
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <transmit_info+0x1c8>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4a45      	ldr	r2, [pc, #276]	; (800285c <transmit_info+0x224>)
 8002748:	6013      	str	r3, [r2, #0]
	tr_spi_1_protocol = master_transmit_1[6];
 800274a:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <transmit_info+0x1c8>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4a44      	ldr	r2, [pc, #272]	; (8002860 <transmit_info+0x228>)
 8002750:	6013      	str	r3, [r2, #0]
	tr_spi_1_command7 = master_transmit_1[7];
 8002752:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <transmit_info+0x1c8>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a43      	ldr	r2, [pc, #268]	; (8002864 <transmit_info+0x22c>)
 8002758:	6013      	str	r3, [r2, #0]
	tr_spi_1_command8 = master_transmit_1[8];
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <transmit_info+0x1c8>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a42      	ldr	r2, [pc, #264]	; (8002868 <transmit_info+0x230>)
 8002760:	6013      	str	r3, [r2, #0]

	tr_spi_2_command1 = master_transmit_2[0];
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <transmit_info+0x1ec>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a41      	ldr	r2, [pc, #260]	; (800286c <transmit_info+0x234>)
 8002768:	6013      	str	r3, [r2, #0]
	tr_spi_2_command2 = master_transmit_2[1];
 800276a:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <transmit_info+0x1ec>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a40      	ldr	r2, [pc, #256]	; (8002870 <transmit_info+0x238>)
 8002770:	6013      	str	r3, [r2, #0]
	tr_spi_2_command3 = master_transmit_2[2];
 8002772:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <transmit_info+0x1ec>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a3f      	ldr	r2, [pc, #252]	; (8002874 <transmit_info+0x23c>)
 8002778:	6013      	str	r3, [r2, #0]
	tr_spi_2_command4 = master_transmit_2[3];
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <transmit_info+0x1ec>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4a3e      	ldr	r2, [pc, #248]	; (8002878 <transmit_info+0x240>)
 8002780:	6013      	str	r3, [r2, #0]
	tr_spi_2_command5 = master_transmit_2[4];
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <transmit_info+0x1ec>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	4a3d      	ldr	r2, [pc, #244]	; (800287c <transmit_info+0x244>)
 8002788:	6013      	str	r3, [r2, #0]
	tr_spi_2_command6 = master_transmit_2[5];
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <transmit_info+0x1ec>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4a3c      	ldr	r2, [pc, #240]	; (8002880 <transmit_info+0x248>)
 8002790:	6013      	str	r3, [r2, #0]
	tr_spi_2_protocol = master_transmit_2[6];
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <transmit_info+0x1ec>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	4a3b      	ldr	r2, [pc, #236]	; (8002884 <transmit_info+0x24c>)
 8002798:	6013      	str	r3, [r2, #0]
	tr_spi_2_command7 = master_transmit_2[7];
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <transmit_info+0x1ec>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <transmit_info+0x250>)
 80027a0:	6013      	str	r3, [r2, #0]
	tr_spi_2_command8 = master_transmit_2[8];
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <transmit_info+0x1ec>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a39      	ldr	r2, [pc, #228]	; (800288c <transmit_info+0x254>)
 80027a8:	6013      	str	r3, [r2, #0]

	tr_spi_3_command1 = master_transmit_3[0];
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <transmit_info+0x200>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a38      	ldr	r2, [pc, #224]	; (8002890 <transmit_info+0x258>)
 80027b0:	6013      	str	r3, [r2, #0]
	tr_spi_3_command2 = master_transmit_3[1];
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <transmit_info+0x200>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a37      	ldr	r2, [pc, #220]	; (8002894 <transmit_info+0x25c>)
 80027b8:	6013      	str	r3, [r2, #0]
	tr_spi_3_command3 = master_transmit_3[2];
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <transmit_info+0x200>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4a36      	ldr	r2, [pc, #216]	; (8002898 <transmit_info+0x260>)
 80027c0:	6013      	str	r3, [r2, #0]
	tr_spi_3_command4 = master_transmit_3[3];
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <transmit_info+0x200>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a35      	ldr	r2, [pc, #212]	; (800289c <transmit_info+0x264>)
 80027c8:	6013      	str	r3, [r2, #0]
	tr_spi_3_command5 = master_transmit_3[4];
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <transmit_info+0x200>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <transmit_info+0x268>)
 80027d0:	6013      	str	r3, [r2, #0]
	tr_spi_3_command6 = master_transmit_3[5];
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <transmit_info+0x200>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4a33      	ldr	r2, [pc, #204]	; (80028a4 <transmit_info+0x26c>)
 80027d8:	6013      	str	r3, [r2, #0]
	tr_spi_3_protocol = master_transmit_3[6];
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <transmit_info+0x200>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <transmit_info+0x270>)
 80027e0:	6013      	str	r3, [r2, #0]
	tr_spi_3_command7 = master_transmit_3[7];
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <transmit_info+0x200>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a31      	ldr	r2, [pc, #196]	; (80028ac <transmit_info+0x274>)
 80027e8:	6013      	str	r3, [r2, #0]
	tr_spi_3_command8 = master_transmit_3[8];
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <transmit_info+0x200>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <transmit_info+0x278>)
 80027f0:	6013      	str	r3, [r2, #0]
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	200009a8 	.word	0x200009a8
 8002800:	200006c4 	.word	0x200006c4
 8002804:	200009ac 	.word	0x200009ac
 8002808:	200008d4 	.word	0x200008d4
 800280c:	200009c0 	.word	0x200009c0
 8002810:	200009cc 	.word	0x200009cc
 8002814:	200008d8 	.word	0x200008d8
 8002818:	200009dc 	.word	0x200009dc
 800281c:	200009e4 	.word	0x200009e4
 8002820:	200009b0 	.word	0x200009b0
 8002824:	2000070c 	.word	0x2000070c
 8002828:	200009b4 	.word	0x200009b4
 800282c:	200009c4 	.word	0x200009c4
 8002830:	200009d0 	.word	0x200009d0
 8002834:	200009b8 	.word	0x200009b8
 8002838:	20000754 	.word	0x20000754
 800283c:	200009bc 	.word	0x200009bc
 8002840:	200009c8 	.word	0x200009c8
 8002844:	200009d4 	.word	0x200009d4
 8002848:	200007fc 	.word	0x200007fc
 800284c:	20000800 	.word	0x20000800
 8002850:	20000804 	.word	0x20000804
 8002854:	20000808 	.word	0x20000808
 8002858:	2000080c 	.word	0x2000080c
 800285c:	20000810 	.word	0x20000810
 8002860:	20000814 	.word	0x20000814
 8002864:	20000824 	.word	0x20000824
 8002868:	20000828 	.word	0x20000828
 800286c:	200007b4 	.word	0x200007b4
 8002870:	200007b8 	.word	0x200007b8
 8002874:	200007bc 	.word	0x200007bc
 8002878:	200007c0 	.word	0x200007c0
 800287c:	200007c4 	.word	0x200007c4
 8002880:	200007c8 	.word	0x200007c8
 8002884:	200007cc 	.word	0x200007cc
 8002888:	200007dc 	.word	0x200007dc
 800288c:	200007e0 	.word	0x200007e0
 8002890:	20000844 	.word	0x20000844
 8002894:	20000848 	.word	0x20000848
 8002898:	2000084c 	.word	0x2000084c
 800289c:	20000850 	.word	0x20000850
 80028a0:	20000854 	.word	0x20000854
 80028a4:	20000858 	.word	0x20000858
 80028a8:	2000085c 	.word	0x2000085c
 80028ac:	2000086c 	.word	0x2000086c
 80028b0:	20000870 	.word	0x20000870

080028b4 <received_transform>:

void received_transform() {
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	angle_mot1 = (float) rc_spi1_angle_1 / 100.0f;
 80028b8:	4b83      	ldr	r3, [pc, #524]	; (8002ac8 <received_transform+0x214>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c4:	eddf 6a81 	vldr	s13, [pc, #516]	; 8002acc <received_transform+0x218>
 80028c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028cc:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <received_transform+0x21c>)
 80028ce:	edc3 7a00 	vstr	s15, [r3]
	angle_mot2 = (float) rc_spi1_angle_2 / 100.0f;
 80028d2:	4b80      	ldr	r3, [pc, #512]	; (8002ad4 <received_transform+0x220>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028de:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8002acc <received_transform+0x218>
 80028e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e6:	4b7c      	ldr	r3, [pc, #496]	; (8002ad8 <received_transform+0x224>)
 80028e8:	edc3 7a00 	vstr	s15, [r3]
	angle_mot3 = (float) rc_spi2_angle_1 / 100.0f;
 80028ec:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <received_transform+0x228>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f8:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002acc <received_transform+0x218>
 80028fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002900:	4b77      	ldr	r3, [pc, #476]	; (8002ae0 <received_transform+0x22c>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
	angle_mot4 = (float) rc_spi2_angle_2 / 100.0f;
 8002906:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <received_transform+0x230>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002912:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002acc <received_transform+0x218>
 8002916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800291a:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <received_transform+0x234>)
 800291c:	edc3 7a00 	vstr	s15, [r3]
	angle_mot5 = (float) rc_spi3_angle_1 / 100.0f;
 8002920:	4b72      	ldr	r3, [pc, #456]	; (8002aec <received_transform+0x238>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292c:	eddf 6a67 	vldr	s13, [pc, #412]	; 8002acc <received_transform+0x218>
 8002930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002934:	4b6e      	ldr	r3, [pc, #440]	; (8002af0 <received_transform+0x23c>)
 8002936:	edc3 7a00 	vstr	s15, [r3]
	angle_mot6 = (float) rc_spi3_angle_2 / 100.0f;
 800293a:	4b6e      	ldr	r3, [pc, #440]	; (8002af4 <received_transform+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002946:	eddf 6a61 	vldr	s13, [pc, #388]	; 8002acc <received_transform+0x218>
 800294a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800294e:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <received_transform+0x244>)
 8002950:	edc3 7a00 	vstr	s15, [r3]

	speed_mot1 = (float) rc_spi1_speed_1 / 100.0f;
 8002954:	4b69      	ldr	r3, [pc, #420]	; (8002afc <received_transform+0x248>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002960:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8002acc <received_transform+0x218>
 8002964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <received_transform+0x24c>)
 800296a:	edc3 7a00 	vstr	s15, [r3]
	speed_mot2 = (float) rc_spi1_speed_2 / 100.0f;
 800296e:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <received_transform+0x250>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800297a:	eddf 6a54 	vldr	s13, [pc, #336]	; 8002acc <received_transform+0x218>
 800297e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002982:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <received_transform+0x254>)
 8002984:	edc3 7a00 	vstr	s15, [r3]
	speed_mot3 = (float) rc_spi2_speed_1 / 100.0f;
 8002988:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <received_transform+0x258>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002994:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002acc <received_transform+0x218>
 8002998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299c:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <received_transform+0x25c>)
 800299e:	edc3 7a00 	vstr	s15, [r3]
	speed_mot4 = (float) rc_spi2_speed_2 / 100.0f;
 80029a2:	4b5c      	ldr	r3, [pc, #368]	; (8002b14 <received_transform+0x260>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ae:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002acc <received_transform+0x218>
 80029b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b6:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <received_transform+0x264>)
 80029b8:	edc3 7a00 	vstr	s15, [r3]
	speed_mot5 = (float) rc_spi3_speed_1 / 100.0f;
 80029bc:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <received_transform+0x268>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	ee07 3a90 	vmov	s15, r3
 80029c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c8:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002acc <received_transform+0x218>
 80029cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <received_transform+0x26c>)
 80029d2:	edc3 7a00 	vstr	s15, [r3]
	speed_mot6 = (float) rc_spi3_speed_2 / 100.0f;
 80029d6:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <received_transform+0x270>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002acc <received_transform+0x218>
 80029e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ea:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <received_transform+0x274>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]

	current_mot1 = (float) rc_spi1_current_1 / 10000.0f;
 80029f0:	4b4e      	ldr	r3, [pc, #312]	; (8002b2c <received_transform+0x278>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029fc:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8002b30 <received_transform+0x27c>
 8002a00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a04:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <received_transform+0x280>)
 8002a06:	edc3 7a00 	vstr	s15, [r3]
	current_mot2 = (float) rc_spi1_current_2 / 10000.0f;
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <received_transform+0x284>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a16:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002b30 <received_transform+0x27c>
 8002a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a1e:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <received_transform+0x288>)
 8002a20:	edc3 7a00 	vstr	s15, [r3]
	current_mot3 = (float) rc_spi2_current_1 / 10000.0f;
 8002a24:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <received_transform+0x28c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a30:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002b30 <received_transform+0x27c>
 8002a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a38:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <received_transform+0x290>)
 8002a3a:	edc3 7a00 	vstr	s15, [r3]
	current_mot4 = (float) rc_spi2_current_2 / 10000.0f;
 8002a3e:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <received_transform+0x294>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a4a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002b30 <received_transform+0x27c>
 8002a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <received_transform+0x298>)
 8002a54:	edc3 7a00 	vstr	s15, [r3]
	current_mot5 = (float) rc_spi3_current_1 / 10000.0f;
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <received_transform+0x29c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a64:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002b30 <received_transform+0x27c>
 8002a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <received_transform+0x2a0>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
	current_mot6 = (float) rc_spi3_current_2 / 10000.0f;
 8002a72:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <received_transform+0x2a4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a7e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002b30 <received_transform+0x27c>
 8002a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a86:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <received_transform+0x2a8>)
 8002a88:	edc3 7a00 	vstr	s15, [r3]

	current_angles[0] = angle_mot1;
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <received_transform+0x21c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <received_transform+0x2ac>)
 8002a92:	6013      	str	r3, [r2, #0]
	current_angles[1] = angle_mot2;
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <received_transform+0x224>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a31      	ldr	r2, [pc, #196]	; (8002b60 <received_transform+0x2ac>)
 8002a9a:	6053      	str	r3, [r2, #4]
	current_angles[2] = angle_mot3;
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <received_transform+0x22c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <received_transform+0x2ac>)
 8002aa2:	6093      	str	r3, [r2, #8]
	current_angles[3] = angle_mot4;
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <received_transform+0x234>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <received_transform+0x2ac>)
 8002aaa:	60d3      	str	r3, [r2, #12]
	current_angles[4] = angle_mot5;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <received_transform+0x23c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <received_transform+0x2ac>)
 8002ab2:	6113      	str	r3, [r2, #16]
	current_angles[5] = angle_mot6;
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <received_transform+0x244>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <received_transform+0x2ac>)
 8002aba:	6153      	str	r3, [r2, #20]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	200007e4 	.word	0x200007e4
 8002acc:	42c80000 	.word	0x42c80000
 8002ad0:	20000874 	.word	0x20000874
 8002ad4:	200007f0 	.word	0x200007f0
 8002ad8:	20000878 	.word	0x20000878
 8002adc:	2000079c 	.word	0x2000079c
 8002ae0:	2000087c 	.word	0x2000087c
 8002ae4:	200007a8 	.word	0x200007a8
 8002ae8:	20000880 	.word	0x20000880
 8002aec:	2000082c 	.word	0x2000082c
 8002af0:	20000884 	.word	0x20000884
 8002af4:	20000838 	.word	0x20000838
 8002af8:	20000888 	.word	0x20000888
 8002afc:	200007e8 	.word	0x200007e8
 8002b00:	2000088c 	.word	0x2000088c
 8002b04:	200007f4 	.word	0x200007f4
 8002b08:	20000890 	.word	0x20000890
 8002b0c:	200007a0 	.word	0x200007a0
 8002b10:	20000894 	.word	0x20000894
 8002b14:	200007ac 	.word	0x200007ac
 8002b18:	20000898 	.word	0x20000898
 8002b1c:	20000830 	.word	0x20000830
 8002b20:	2000089c 	.word	0x2000089c
 8002b24:	2000083c 	.word	0x2000083c
 8002b28:	200008a0 	.word	0x200008a0
 8002b2c:	200007ec 	.word	0x200007ec
 8002b30:	461c4000 	.word	0x461c4000
 8002b34:	200008a4 	.word	0x200008a4
 8002b38:	200007f8 	.word	0x200007f8
 8002b3c:	200008a8 	.word	0x200008a8
 8002b40:	200007a4 	.word	0x200007a4
 8002b44:	200008ac 	.word	0x200008ac
 8002b48:	200007b0 	.word	0x200007b0
 8002b4c:	200008b0 	.word	0x200008b0
 8002b50:	20000834 	.word	0x20000834
 8002b54:	200008b4 	.word	0x200008b4
 8002b58:	20000840 	.word	0x20000840
 8002b5c:	200008b8 	.word	0x200008b8
 8002b60:	200008bc 	.word	0x200008bc

08002b64 <spi_to_uart>:

void spi_to_uart() {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	uart_transmit[0] = rc_spi1_angle_1;
 8002b68:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <spi_to_uart+0x10c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a41      	ldr	r2, [pc, #260]	; (8002c74 <spi_to_uart+0x110>)
 8002b6e:	6013      	str	r3, [r2, #0]
	uart_transmit[1] = rc_spi1_speed_1;
 8002b70:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <spi_to_uart+0x114>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3f      	ldr	r2, [pc, #252]	; (8002c74 <spi_to_uart+0x110>)
 8002b76:	6053      	str	r3, [r2, #4]
	uart_transmit[2] = rc_spi1_current_1;
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <spi_to_uart+0x118>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <spi_to_uart+0x110>)
 8002b7e:	6093      	str	r3, [r2, #8]
	uart_transmit[3] = rc_spi1_angle_2;
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <spi_to_uart+0x11c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <spi_to_uart+0x110>)
 8002b86:	60d3      	str	r3, [r2, #12]
	uart_transmit[4] = rc_spi1_speed_2;
 8002b88:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <spi_to_uart+0x120>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <spi_to_uart+0x110>)
 8002b8e:	6113      	str	r3, [r2, #16]
	uart_transmit[5] = rc_spi1_current_2;
 8002b90:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <spi_to_uart+0x124>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <spi_to_uart+0x110>)
 8002b96:	6153      	str	r3, [r2, #20]

	uart_transmit[6] = rc_spi2_angle_1;
 8002b98:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <spi_to_uart+0x128>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <spi_to_uart+0x110>)
 8002b9e:	6193      	str	r3, [r2, #24]
	uart_transmit[7] = rc_spi2_speed_1;
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <spi_to_uart+0x12c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a33      	ldr	r2, [pc, #204]	; (8002c74 <spi_to_uart+0x110>)
 8002ba6:	61d3      	str	r3, [r2, #28]
	uart_transmit[8] = rc_spi2_current_1;
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <spi_to_uart+0x130>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a31      	ldr	r2, [pc, #196]	; (8002c74 <spi_to_uart+0x110>)
 8002bae:	6213      	str	r3, [r2, #32]
	uart_transmit[9] = rc_spi2_angle_2;
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <spi_to_uart+0x134>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <spi_to_uart+0x110>)
 8002bb6:	6253      	str	r3, [r2, #36]	; 0x24
	uart_transmit[10] = rc_spi2_speed_2;
 8002bb8:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <spi_to_uart+0x138>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <spi_to_uart+0x110>)
 8002bbe:	6293      	str	r3, [r2, #40]	; 0x28
	uart_transmit[11] = rc_spi2_current_2;
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <spi_to_uart+0x13c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <spi_to_uart+0x110>)
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

	uart_transmit[12] = rc_spi3_angle_1;
 8002bc8:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <spi_to_uart+0x140>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <spi_to_uart+0x110>)
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
	uart_transmit[13] = rc_spi3_speed_1;
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <spi_to_uart+0x144>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <spi_to_uart+0x110>)
 8002bd6:	6353      	str	r3, [r2, #52]	; 0x34
	uart_transmit[14] = rc_spi3_current_1;
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <spi_to_uart+0x148>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <spi_to_uart+0x110>)
 8002bde:	6393      	str	r3, [r2, #56]	; 0x38
	uart_transmit[15] = rc_spi3_angle_2;
 8002be0:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <spi_to_uart+0x14c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <spi_to_uart+0x110>)
 8002be6:	63d3      	str	r3, [r2, #60]	; 0x3c
	uart_transmit[16] = rc_spi3_speed_2;
 8002be8:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <spi_to_uart+0x150>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <spi_to_uart+0x110>)
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
	uart_transmit[17] = rc_spi3_current_2;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <spi_to_uart+0x154>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <spi_to_uart+0x110>)
 8002bf6:	6453      	str	r3, [r2, #68]	; 0x44

	if (uart_tick) {
 8002bf8:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <spi_to_uart+0x158>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d026      	beq.n	8002c4e <spi_to_uart+0xea>
		uart_tick = 0;
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <spi_to_uart+0x158>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
		spi_to_uart();
 8002c06:	f7ff ffad 	bl	8002b64 <spi_to_uart>
		HAL_UART_Transmit_DMA(&huart6, (uint8_t*) uart_transmit, 72);
 8002c0a:	2248      	movs	r2, #72	; 0x48
 8002c0c:	4919      	ldr	r1, [pc, #100]	; (8002c74 <spi_to_uart+0x110>)
 8002c0e:	482c      	ldr	r0, [pc, #176]	; (8002cc0 <spi_to_uart+0x15c>)
 8002c10:	f004 fe92 	bl	8007938 <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(&huart6, (uint8_t*) uart_recieve, 24);
 8002c14:	2218      	movs	r2, #24
 8002c16:	492b      	ldr	r1, [pc, #172]	; (8002cc4 <spi_to_uart+0x160>)
 8002c18:	4829      	ldr	r0, [pc, #164]	; (8002cc0 <spi_to_uart+0x15c>)
 8002c1a:	f004 ff0b 	bl	8007a34 <HAL_UART_Receive_DMA>
		tr_uart_1 = uart_recieve[0];
 8002c1e:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <spi_to_uart+0x160>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <spi_to_uart+0x164>)
 8002c24:	6013      	str	r3, [r2, #0]
		tr_uart_2 = uart_recieve[1];
 8002c26:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <spi_to_uart+0x160>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <spi_to_uart+0x168>)
 8002c2c:	6013      	str	r3, [r2, #0]
		tr_uart_3 = uart_recieve[2];
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <spi_to_uart+0x160>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <spi_to_uart+0x16c>)
 8002c34:	6013      	str	r3, [r2, #0]
		tr_uart_4 = uart_recieve[3];
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <spi_to_uart+0x160>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <spi_to_uart+0x170>)
 8002c3c:	6013      	str	r3, [r2, #0]
		tr_uart_5 = uart_recieve[4];
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <spi_to_uart+0x160>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <spi_to_uart+0x174>)
 8002c44:	6013      	str	r3, [r2, #0]
		tr_uart_6 = uart_recieve[5];
 8002c46:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <spi_to_uart+0x160>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <spi_to_uart+0x178>)
 8002c4c:	6013      	str	r3, [r2, #0]
	}
	if (uart_tick) {
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <spi_to_uart+0x158>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <spi_to_uart+0x106>

		uart_tick = 0;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <spi_to_uart+0x158>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
		spi_to_uart();
 8002c5c:	f7ff ff82 	bl	8002b64 <spi_to_uart>
		HAL_UART_Transmit_DMA(&huart6, (uint8_t*) uart_transmit, 72);
 8002c60:	2248      	movs	r2, #72	; 0x48
 8002c62:	4904      	ldr	r1, [pc, #16]	; (8002c74 <spi_to_uart+0x110>)
 8002c64:	4816      	ldr	r0, [pc, #88]	; (8002cc0 <spi_to_uart+0x15c>)
 8002c66:	f004 fe67 	bl	8007938 <HAL_UART_Transmit_DMA>
//		ta2 = target_angles[1];
//		ta3 = target_angles[2];
//		ta4 = target_angles[3];
//		ta5 = target_angles[4];
//		ta6 = target_angles[5];
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200007e4 	.word	0x200007e4
 8002c74:	2000090c 	.word	0x2000090c
 8002c78:	200007e8 	.word	0x200007e8
 8002c7c:	200007ec 	.word	0x200007ec
 8002c80:	200007f0 	.word	0x200007f0
 8002c84:	200007f4 	.word	0x200007f4
 8002c88:	200007f8 	.word	0x200007f8
 8002c8c:	2000079c 	.word	0x2000079c
 8002c90:	200007a0 	.word	0x200007a0
 8002c94:	200007a4 	.word	0x200007a4
 8002c98:	200007a8 	.word	0x200007a8
 8002c9c:	200007ac 	.word	0x200007ac
 8002ca0:	200007b0 	.word	0x200007b0
 8002ca4:	2000082c 	.word	0x2000082c
 8002ca8:	20000830 	.word	0x20000830
 8002cac:	20000834 	.word	0x20000834
 8002cb0:	20000838 	.word	0x20000838
 8002cb4:	2000083c 	.word	0x2000083c
 8002cb8:	20000840 	.word	0x20000840
 8002cbc:	20000984 	.word	0x20000984
 8002cc0:	200004fc 	.word	0x200004fc
 8002cc4:	20000954 	.word	0x20000954
 8002cc8:	2000096c 	.word	0x2000096c
 8002ccc:	20000970 	.word	0x20000970
 8002cd0:	20000974 	.word	0x20000974
 8002cd4:	20000978 	.word	0x20000978
 8002cd8:	2000097c 	.word	0x2000097c
 8002cdc:	20000980 	.word	0x20000980

08002ce0 <spi1_clear>:
void spi1_clear() {
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	rc_spi1_angle_1 = 0;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <spi1_clear+0x44>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
	rc_spi1_speed_1 = 0;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <spi1_clear+0x48>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
	rc_spi1_current_1 = 0;
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <spi1_clear+0x4c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
	rc_spi1_angle_2 = 0;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <spi1_clear+0x50>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
	rc_spi1_speed_2 = 0;
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <spi1_clear+0x54>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
	rc_spi1_current_2 = 0;
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <spi1_clear+0x58>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
	rc_spi1_protocol = 0;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <spi1_clear+0x5c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
	rc_spi1_currangle1 = 0;
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <spi1_clear+0x60>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
	rc_spi1_currangle2 = 0;
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <spi1_clear+0x64>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	200007e4 	.word	0x200007e4
 8002d28:	200007e8 	.word	0x200007e8
 8002d2c:	200007ec 	.word	0x200007ec
 8002d30:	200007f0 	.word	0x200007f0
 8002d34:	200007f4 	.word	0x200007f4
 8002d38:	200007f8 	.word	0x200007f8
 8002d3c:	20000818 	.word	0x20000818
 8002d40:	2000081c 	.word	0x2000081c
 8002d44:	20000820 	.word	0x20000820

08002d48 <spi2_clear>:
void spi2_clear() {
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
	rc_spi2_angle_1 = 0;
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <spi2_clear+0x44>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
	rc_spi2_speed_1 = 0;
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <spi2_clear+0x48>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
	rc_spi2_current_1 = 0;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <spi2_clear+0x4c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
	rc_spi2_angle_2 = 0;
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <spi2_clear+0x50>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
	rc_spi2_speed_2 = 0;
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <spi2_clear+0x54>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
	rc_spi2_current_2 = 0;
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <spi2_clear+0x58>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
	rc_spi2_protocol = 0;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <spi2_clear+0x5c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
	rc_spi2_currangle1 = 0;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <spi2_clear+0x60>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
	rc_spi2_currangle2 = 0;
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <spi2_clear+0x64>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	2000079c 	.word	0x2000079c
 8002d90:	200007a0 	.word	0x200007a0
 8002d94:	200007a4 	.word	0x200007a4
 8002d98:	200007a8 	.word	0x200007a8
 8002d9c:	200007ac 	.word	0x200007ac
 8002da0:	200007b0 	.word	0x200007b0
 8002da4:	200007d0 	.word	0x200007d0
 8002da8:	200007d4 	.word	0x200007d4
 8002dac:	200007d8 	.word	0x200007d8

08002db0 <spi3_clear>:
void spi3_clear() {
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
	rc_spi3_angle_1 = 0;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <spi3_clear+0x44>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
	rc_spi3_speed_1 = 0;
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <spi3_clear+0x48>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
	rc_spi3_current_1 = 0;
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <spi3_clear+0x4c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
	rc_spi3_angle_2 = 0;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <spi3_clear+0x50>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
	rc_spi3_speed_2 = 0;
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <spi3_clear+0x54>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
	rc_spi3_current_2 = 0;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <spi3_clear+0x58>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
	rc_spi3_protocol = 0;
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <spi3_clear+0x5c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
	rc_spi3_currangle1 = 0;
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <spi3_clear+0x60>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
	rc_spi3_currangle2 = 0;
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <spi3_clear+0x64>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	2000082c 	.word	0x2000082c
 8002df8:	20000830 	.word	0x20000830
 8002dfc:	20000834 	.word	0x20000834
 8002e00:	20000838 	.word	0x20000838
 8002e04:	2000083c 	.word	0x2000083c
 8002e08:	20000840 	.word	0x20000840
 8002e0c:	20000860 	.word	0x20000860
 8002e10:	20000864 	.word	0x20000864
 8002e14:	20000868 	.word	0x20000868

08002e18 <spi_check>:

void spi_check() {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	if (spi1_success != spi_suc_1) {
 8002e1c:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <spi_check+0xd0>)
 8002e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b31      	ldr	r3, [pc, #196]	; (8002eec <spi_check+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d003      	beq.n	8002e34 <spi_check+0x1c>
		spi_f1 = 1;
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <spi_check+0xd8>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	e002      	b.n	8002e3a <spi_check+0x22>
	} else {
		spi_f1 = 0;
 8002e34:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <spi_check+0xd8>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	801a      	strh	r2, [r3, #0]
	}
	if (spi2_success != spi_suc_2) {
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <spi_check+0xdc>)
 8002e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <spi_check+0xe0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d003      	beq.n	8002e52 <spi_check+0x3a>
		spi_f2 = 1;
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <spi_check+0xe4>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	801a      	strh	r2, [r3, #0]
 8002e50:	e002      	b.n	8002e58 <spi_check+0x40>
	} else {
		spi_f2 = 0;
 8002e52:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <spi_check+0xe4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]
	}
	if (spi3_success != spi_suc_3) {
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <spi_check+0xe8>)
 8002e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <spi_check+0xec>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d003      	beq.n	8002e70 <spi_check+0x58>
		spi_f3 = 1;
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <spi_check+0xf0>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	e002      	b.n	8002e76 <spi_check+0x5e>
	} else {
		spi_f3 = 0;
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <spi_check+0xf0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	801a      	strh	r2, [r3, #0]
	}
	if (spi_f1 == 1 && spi_f2 == 1 && spi_f3 == 1) {
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <spi_check+0xd8>)
 8002e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d116      	bne.n	8002eae <spi_check+0x96>
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <spi_check+0xe4>)
 8002e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d111      	bne.n	8002eae <spi_check+0x96>
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <spi_check+0xf0>)
 8002e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10c      	bne.n	8002eae <spi_check+0x96>
		HAL_GPIO_WritePin(GREEN_LED_SPI_GPIO_Port, GREEN_LED_SPI_Pin, 1);
 8002e94:	2201      	movs	r2, #1
 8002e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e9a:	481c      	ldr	r0, [pc, #112]	; (8002f0c <spi_check+0xf4>)
 8002e9c:	f002 feae 	bl	8005bfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_SPI_GPIO_Port, RED_LED_SPI_Pin, 0);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ea6:	4819      	ldr	r0, [pc, #100]	; (8002f0c <spi_check+0xf4>)
 8002ea8:	f002 fea8 	bl	8005bfc <HAL_GPIO_WritePin>
 8002eac:	e00b      	b.n	8002ec6 <spi_check+0xae>
	} else {
		HAL_GPIO_WritePin(GREEN_LED_SPI_GPIO_Port, GREEN_LED_SPI_Pin, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002eb4:	4815      	ldr	r0, [pc, #84]	; (8002f0c <spi_check+0xf4>)
 8002eb6:	f002 fea1 	bl	8005bfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_SPI_GPIO_Port, RED_LED_SPI_Pin, 1);
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec0:	4812      	ldr	r0, [pc, #72]	; (8002f0c <spi_check+0xf4>)
 8002ec2:	f002 fe9b 	bl	8005bfc <HAL_GPIO_WritePin>
	}
	spi_suc_1 = spi1_success;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <spi_check+0xd4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b21a      	sxth	r2, r3
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <spi_check+0xd0>)
 8002ece:	801a      	strh	r2, [r3, #0]
	spi_suc_2 = spi2_success;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <spi_check+0xe0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <spi_check+0xdc>)
 8002ed8:	801a      	strh	r2, [r3, #0]
	spi_suc_3 = spi3_success;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <spi_check+0xec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <spi_check+0xe8>)
 8002ee2:	801a      	strh	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000900 	.word	0x20000900
 8002eec:	200008ec 	.word	0x200008ec
 8002ef0:	20000906 	.word	0x20000906
 8002ef4:	20000902 	.word	0x20000902
 8002ef8:	200008f4 	.word	0x200008f4
 8002efc:	20000908 	.word	0x20000908
 8002f00:	20000904 	.word	0x20000904
 8002f04:	200008fc 	.word	0x200008fc
 8002f08:	2000090a 	.word	0x2000090a
 8002f0c:	40020800 	.word	0x40020800

08002f10 <HAL_SPI_ErrorCallback>:
	vector_speed_x = main_speed_vector * cos_phi;

	path_x += vector_speed_x * 0.01;
	path_y += vector_speed_y * 0.01;
}
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi1.Instance) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b86      	ldr	r3, [pc, #536]	; (8003138 <HAL_SPI_ErrorCallback+0x228>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f040 8093 	bne.w	800304c <HAL_SPI_ErrorCallback+0x13c>
		spi1_error++;
 8002f26:	4b85      	ldr	r3, [pc, #532]	; (800313c <HAL_SPI_ErrorCallback+0x22c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	4a83      	ldr	r2, [pc, #524]	; (800313c <HAL_SPI_ErrorCallback+0x22c>)
 8002f2e:	6013      	str	r3, [r2, #0]
		HAL_SPI_DMAStop(hspi);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f003 fc7f 	bl	8006834 <HAL_SPI_DMAStop>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
		__HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002f54:	609a      	str	r2, [r3, #8]
		__HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	69bb      	ldr	r3, [r7, #24]
		__HAL_DMA_CLEAR_FLAG(hspi1.hdmatx, DMA_FLAG_TCIF2_6);
 8002f74:	4b70      	ldr	r3, [pc, #448]	; (8003138 <HAL_SPI_ErrorCallback+0x228>)
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b70      	ldr	r3, [pc, #448]	; (8003140 <HAL_SPI_ErrorCallback+0x230>)
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d904      	bls.n	8002f8c <HAL_SPI_ErrorCallback+0x7c>
 8002f82:	4b70      	ldr	r3, [pc, #448]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 8002f84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	e01b      	b.n	8002fc4 <HAL_SPI_ErrorCallback+0xb4>
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_SPI_ErrorCallback+0x228>)
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b6c      	ldr	r3, [pc, #432]	; (8003148 <HAL_SPI_ErrorCallback+0x238>)
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d904      	bls.n	8002fa4 <HAL_SPI_ErrorCallback+0x94>
 8002f9a:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 8002f9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fa0:	6093      	str	r3, [r2, #8]
 8002fa2:	e00f      	b.n	8002fc4 <HAL_SPI_ErrorCallback+0xb4>
 8002fa4:	4b64      	ldr	r3, [pc, #400]	; (8003138 <HAL_SPI_ErrorCallback+0x228>)
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_SPI_ErrorCallback+0x23c>)
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d904      	bls.n	8002fbc <HAL_SPI_ErrorCallback+0xac>
 8002fb2:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_SPI_ErrorCallback+0x240>)
 8002fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fb8:	60d3      	str	r3, [r2, #12]
 8002fba:	e003      	b.n	8002fc4 <HAL_SPI_ErrorCallback+0xb4>
 8002fbc:	4a64      	ldr	r2, [pc, #400]	; (8003150 <HAL_SPI_ErrorCallback+0x240>)
 8002fbe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fc2:	6093      	str	r3, [r2, #8]
		__HAL_DMA_CLEAR_FLAG(hspi1.hdmarx, DMA_FLAG_TCIF0_4);
 8002fc4:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <HAL_SPI_ErrorCallback+0x228>)
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <HAL_SPI_ErrorCallback+0x230>)
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d903      	bls.n	8002fda <HAL_SPI_ErrorCallback+0xca>
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	e018      	b.n	800300c <HAL_SPI_ErrorCallback+0xfc>
 8002fda:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_SPI_ErrorCallback+0x228>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_SPI_ErrorCallback+0x238>)
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d903      	bls.n	8002ff0 <HAL_SPI_ErrorCallback+0xe0>
 8002fe8:	4a56      	ldr	r2, [pc, #344]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 8002fea:	2320      	movs	r3, #32
 8002fec:	6093      	str	r3, [r2, #8]
 8002fee:	e00d      	b.n	800300c <HAL_SPI_ErrorCallback+0xfc>
 8002ff0:	4b51      	ldr	r3, [pc, #324]	; (8003138 <HAL_SPI_ErrorCallback+0x228>)
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_SPI_ErrorCallback+0x23c>)
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d903      	bls.n	8003006 <HAL_SPI_ErrorCallback+0xf6>
 8002ffe:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_SPI_ErrorCallback+0x240>)
 8003000:	2320      	movs	r3, #32
 8003002:	60d3      	str	r3, [r2, #12]
 8003004:	e002      	b.n	800300c <HAL_SPI_ErrorCallback+0xfc>
 8003006:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_SPI_ErrorCallback+0x240>)
 8003008:	2320      	movs	r3, #32
 800300a:	6093      	str	r3, [r2, #8]

		spi1_cond = 2;
 800300c:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_SPI_ErrorCallback+0x244>)
 800300e:	2202      	movs	r2, #2
 8003010:	601a      	str	r2, [r3, #0]

		master_receive_1[0] = 0;
 8003012:	4b51      	ldr	r3, [pc, #324]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
		master_receive_1[1] = 0;
 8003018:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
		master_receive_1[2] = 0;
 800301e:	4b4e      	ldr	r3, [pc, #312]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
		master_receive_1[3] = 0;
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
		master_receive_1[4] = 0;
 800302a:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
		master_receive_1[5] = 0;
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 8003032:	2200      	movs	r2, #0
 8003034:	615a      	str	r2, [r3, #20]
		master_receive_1[6] = 0;
 8003036:	4b48      	ldr	r3, [pc, #288]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
		master_receive_1[7] = 0;
 800303c:	4b46      	ldr	r3, [pc, #280]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
		master_receive_1[8] = 0;
 8003042:	4b45      	ldr	r3, [pc, #276]	; (8003158 <HAL_SPI_ErrorCallback+0x248>)
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
		spi1_clear();
 8003048:	f7ff fe4a 	bl	8002ce0 <spi1_clear>
	}
	if (hspi->Instance == hspi2.Instance) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_SPI_ErrorCallback+0x24c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	f040 80a9 	bne.w	80031ac <HAL_SPI_ErrorCallback+0x29c>
		spi2_error++;
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_SPI_ErrorCallback+0x250>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a3f      	ldr	r2, [pc, #252]	; (8003160 <HAL_SPI_ErrorCallback+0x250>)
 8003062:	6013      	str	r3, [r2, #0]
		HAL_SPI_DMAStop(hspi);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f003 fbe5 	bl	8006834 <HAL_SPI_DMAStop>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	697b      	ldr	r3, [r7, #20]
		__HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003088:	609a      	str	r2, [r3, #8]
		__HAL_SPI_CLEAR_MODFFLAG(hspi);
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	693b      	ldr	r3, [r7, #16]
		__HAL_DMA_CLEAR_FLAG(hspi2.hdmatx, DMA_FLAG_TCIF0_4); // Updated line for SPI2_TX DMA1 Stream 4
 80030a8:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_SPI_ErrorCallback+0x24c>)
 80030aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_SPI_ErrorCallback+0x230>)
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d903      	bls.n	80030be <HAL_SPI_ErrorCallback+0x1ae>
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 80030b8:	2220      	movs	r2, #32
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	e018      	b.n	80030f0 <HAL_SPI_ErrorCallback+0x1e0>
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_SPI_ErrorCallback+0x24c>)
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_SPI_ErrorCallback+0x238>)
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d903      	bls.n	80030d4 <HAL_SPI_ErrorCallback+0x1c4>
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 80030ce:	2320      	movs	r3, #32
 80030d0:	6093      	str	r3, [r2, #8]
 80030d2:	e00d      	b.n	80030f0 <HAL_SPI_ErrorCallback+0x1e0>
 80030d4:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_SPI_ErrorCallback+0x24c>)
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_SPI_ErrorCallback+0x23c>)
 80030de:	429a      	cmp	r2, r3
 80030e0:	d903      	bls.n	80030ea <HAL_SPI_ErrorCallback+0x1da>
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_SPI_ErrorCallback+0x240>)
 80030e4:	2320      	movs	r3, #32
 80030e6:	60d3      	str	r3, [r2, #12]
 80030e8:	e002      	b.n	80030f0 <HAL_SPI_ErrorCallback+0x1e0>
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_SPI_ErrorCallback+0x240>)
 80030ec:	2320      	movs	r3, #32
 80030ee:	6093      	str	r3, [r2, #8]
		__HAL_DMA_CLEAR_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7);
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_SPI_ErrorCallback+0x24c>)
 80030f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_SPI_ErrorCallback+0x230>)
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d904      	bls.n	8003108 <HAL_SPI_ErrorCallback+0x1f8>
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 8003100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	e031      	b.n	800316c <HAL_SPI_ErrorCallback+0x25c>
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_SPI_ErrorCallback+0x24c>)
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_SPI_ErrorCallback+0x238>)
 8003112:	429a      	cmp	r2, r3
 8003114:	d904      	bls.n	8003120 <HAL_SPI_ErrorCallback+0x210>
 8003116:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <HAL_SPI_ErrorCallback+0x234>)
 8003118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800311c:	6093      	str	r3, [r2, #8]
 800311e:	e025      	b.n	800316c <HAL_SPI_ErrorCallback+0x25c>
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_SPI_ErrorCallback+0x24c>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <HAL_SPI_ErrorCallback+0x23c>)
 800312a:	429a      	cmp	r2, r3
 800312c:	d91a      	bls.n	8003164 <HAL_SPI_ErrorCallback+0x254>
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_SPI_ErrorCallback+0x240>)
 8003130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003134:	60d3      	str	r3, [r2, #12]
 8003136:	e019      	b.n	800316c <HAL_SPI_ErrorCallback+0x25c>
 8003138:	200000e0 	.word	0x200000e0
 800313c:	200008e8 	.word	0x200008e8
 8003140:	40026458 	.word	0x40026458
 8003144:	40026400 	.word	0x40026400
 8003148:	400260b8 	.word	0x400260b8
 800314c:	40026058 	.word	0x40026058
 8003150:	40026000 	.word	0x40026000
 8003154:	200008dc 	.word	0x200008dc
 8003158:	200006e8 	.word	0x200006e8
 800315c:	20000138 	.word	0x20000138
 8003160:	200008f0 	.word	0x200008f0
 8003164:	4a60      	ldr	r2, [pc, #384]	; (80032e8 <HAL_SPI_ErrorCallback+0x3d8>)
 8003166:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800316a:	6093      	str	r3, [r2, #8]

		spi2_cond = 2;
 800316c:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_SPI_ErrorCallback+0x3dc>)
 800316e:	2202      	movs	r2, #2
 8003170:	601a      	str	r2, [r3, #0]

		master_receive_2[0] = 0;
 8003172:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
		master_receive_2[1] = 0;
 8003178:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 800317a:	2200      	movs	r2, #0
 800317c:	605a      	str	r2, [r3, #4]
		master_receive_2[2] = 0;
 800317e:	4b5c      	ldr	r3, [pc, #368]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
		master_receive_2[3] = 0;
 8003184:	4b5a      	ldr	r3, [pc, #360]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
		master_receive_2[4] = 0;
 800318a:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
		master_receive_2[5] = 0;
 8003190:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 8003192:	2200      	movs	r2, #0
 8003194:	615a      	str	r2, [r3, #20]
		master_receive_2[6] = 0;
 8003196:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
		master_receive_2[7] = 0;
 800319c:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
		master_receive_2[8] = 0;
 80031a2:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_SPI_ErrorCallback+0x3e0>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
		spi2_clear();
 80031a8:	f7ff fdce 	bl	8002d48 <spi2_clear>
	}
	if (hspi->Instance == hspi3.Instance) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_SPI_ErrorCallback+0x3e4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 8093 	bne.w	80032e0 <HAL_SPI_ErrorCallback+0x3d0>
		spi3_error++;
 80031ba:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_SPI_ErrorCallback+0x3e8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	4a4d      	ldr	r2, [pc, #308]	; (80032f8 <HAL_SPI_ErrorCallback+0x3e8>)
 80031c2:	6013      	str	r3, [r2, #0]
		HAL_SPI_DMAStop(hspi);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f003 fb35 	bl	8006834 <HAL_SPI_DMAStop>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
		__HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80031e8:	609a      	str	r2, [r3, #8]
		__HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
		__HAL_DMA_CLEAR_FLAG(hspi3.hdmatx, DMA_FLAG_TCIF0_4); // Updated line for SPI3_TX DMA1 Stream 0
 8003208:	4b3a      	ldr	r3, [pc, #232]	; (80032f4 <HAL_SPI_ErrorCallback+0x3e4>)
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_SPI_ErrorCallback+0x3ec>)
 8003212:	429a      	cmp	r2, r3
 8003214:	d903      	bls.n	800321e <HAL_SPI_ErrorCallback+0x30e>
 8003216:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <HAL_SPI_ErrorCallback+0x3f0>)
 8003218:	2220      	movs	r2, #32
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	e018      	b.n	8003250 <HAL_SPI_ErrorCallback+0x340>
 800321e:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <HAL_SPI_ErrorCallback+0x3e4>)
 8003220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_SPI_ErrorCallback+0x3f4>)
 8003228:	429a      	cmp	r2, r3
 800322a:	d903      	bls.n	8003234 <HAL_SPI_ErrorCallback+0x324>
 800322c:	4a34      	ldr	r2, [pc, #208]	; (8003300 <HAL_SPI_ErrorCallback+0x3f0>)
 800322e:	2320      	movs	r3, #32
 8003230:	6093      	str	r3, [r2, #8]
 8003232:	e00d      	b.n	8003250 <HAL_SPI_ErrorCallback+0x340>
 8003234:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_SPI_ErrorCallback+0x3e4>)
 8003236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_SPI_ErrorCallback+0x3f8>)
 800323e:	429a      	cmp	r2, r3
 8003240:	d903      	bls.n	800324a <HAL_SPI_ErrorCallback+0x33a>
 8003242:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <HAL_SPI_ErrorCallback+0x3d8>)
 8003244:	2320      	movs	r3, #32
 8003246:	60d3      	str	r3, [r2, #12]
 8003248:	e002      	b.n	8003250 <HAL_SPI_ErrorCallback+0x340>
 800324a:	4a27      	ldr	r2, [pc, #156]	; (80032e8 <HAL_SPI_ErrorCallback+0x3d8>)
 800324c:	2320      	movs	r3, #32
 800324e:	6093      	str	r3, [r2, #8]
		__HAL_DMA_CLEAR_FLAG(hspi3.hdmarx, DMA_FLAG_TCIF1_5);
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_SPI_ErrorCallback+0x3e4>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <HAL_SPI_ErrorCallback+0x3ec>)
 800325a:	429a      	cmp	r2, r3
 800325c:	d904      	bls.n	8003268 <HAL_SPI_ErrorCallback+0x358>
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_SPI_ErrorCallback+0x3f0>)
 8003260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	e01b      	b.n	80032a0 <HAL_SPI_ErrorCallback+0x390>
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_SPI_ErrorCallback+0x3e4>)
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_SPI_ErrorCallback+0x3f4>)
 8003272:	429a      	cmp	r2, r3
 8003274:	d904      	bls.n	8003280 <HAL_SPI_ErrorCallback+0x370>
 8003276:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_SPI_ErrorCallback+0x3f0>)
 8003278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800327c:	6093      	str	r3, [r2, #8]
 800327e:	e00f      	b.n	80032a0 <HAL_SPI_ErrorCallback+0x390>
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <HAL_SPI_ErrorCallback+0x3e4>)
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <HAL_SPI_ErrorCallback+0x3f8>)
 800328a:	429a      	cmp	r2, r3
 800328c:	d904      	bls.n	8003298 <HAL_SPI_ErrorCallback+0x388>
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_SPI_ErrorCallback+0x3d8>)
 8003290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003294:	60d3      	str	r3, [r2, #12]
 8003296:	e003      	b.n	80032a0 <HAL_SPI_ErrorCallback+0x390>
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <HAL_SPI_ErrorCallback+0x3d8>)
 800329a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800329e:	6093      	str	r3, [r2, #8]

		spi3_cond = 2;
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_SPI_ErrorCallback+0x3fc>)
 80032a2:	2202      	movs	r2, #2
 80032a4:	601a      	str	r2, [r3, #0]

		master_receive_3[0] = 0;
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
		master_receive_3[1] = 0;
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	605a      	str	r2, [r3, #4]
		master_receive_3[2] = 0;
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
		master_receive_3[3] = 0;
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]
		master_receive_3[4] = 0;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	611a      	str	r2, [r3, #16]
		master_receive_3[5] = 0;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	615a      	str	r2, [r3, #20]
		master_receive_3[6] = 0;
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
		master_receive_3[7] = 0;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
		master_receive_3[8] = 0;
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_SPI_ErrorCallback+0x400>)
 80032d8:	2200      	movs	r2, #0
 80032da:	621a      	str	r2, [r3, #32]
		spi3_clear();
 80032dc:	f7ff fd68 	bl	8002db0 <spi3_clear>
	}
}
 80032e0:	bf00      	nop
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40026000 	.word	0x40026000
 80032ec:	200008e0 	.word	0x200008e0
 80032f0:	20000730 	.word	0x20000730
 80032f4:	20000190 	.word	0x20000190
 80032f8:	200008f8 	.word	0x200008f8
 80032fc:	40026458 	.word	0x40026458
 8003300:	40026400 	.word	0x40026400
 8003304:	400260b8 	.word	0x400260b8
 8003308:	40026058 	.word	0x40026058
 800330c:	200008e4 	.word	0x200008e4
 8003310:	20000778 	.word	0x20000778

08003314 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi1.Instance) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b80      	ldr	r3, [pc, #512]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	f040 8088 	bne.w	800343a <HAL_SPI_TxRxCpltCallback+0x126>
		if (master_receive_1[6] != 666) {
 800332a:	4b7f      	ldr	r3, [pc, #508]	; (8003528 <HAL_SPI_TxRxCpltCallback+0x214>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f240 229a 	movw	r2, #666	; 0x29a
 8003332:	4293      	cmp	r3, r2
 8003334:	d06d      	beq.n	8003412 <HAL_SPI_TxRxCpltCallback+0xfe>
			__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	69fb      	ldr	r3, [r7, #28]
			__HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003354:	609a      	str	r2, [r3, #8]
			__HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	69bb      	ldr	r3, [r7, #24]
			__HAL_DMA_CLEAR_FLAG(hspi1.hdmatx, DMA_FLAG_TCIF2_6);
 8003374:	4b6b      	ldr	r3, [pc, #428]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	4b6b      	ldr	r3, [pc, #428]	; (800352c <HAL_SPI_TxRxCpltCallback+0x218>)
 800337e:	429a      	cmp	r2, r3
 8003380:	d904      	bls.n	800338c <HAL_SPI_TxRxCpltCallback+0x78>
 8003382:	4b6b      	ldr	r3, [pc, #428]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003384:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	e01b      	b.n	80033c4 <HAL_SPI_TxRxCpltCallback+0xb0>
 800338c:	4b65      	ldr	r3, [pc, #404]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	4b67      	ldr	r3, [pc, #412]	; (8003534 <HAL_SPI_TxRxCpltCallback+0x220>)
 8003396:	429a      	cmp	r2, r3
 8003398:	d904      	bls.n	80033a4 <HAL_SPI_TxRxCpltCallback+0x90>
 800339a:	4a65      	ldr	r2, [pc, #404]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 800339c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033a0:	6093      	str	r3, [r2, #8]
 80033a2:	e00f      	b.n	80033c4 <HAL_SPI_TxRxCpltCallback+0xb0>
 80033a4:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b62      	ldr	r3, [pc, #392]	; (8003538 <HAL_SPI_TxRxCpltCallback+0x224>)
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d904      	bls.n	80033bc <HAL_SPI_TxRxCpltCallback+0xa8>
 80033b2:	4a62      	ldr	r2, [pc, #392]	; (800353c <HAL_SPI_TxRxCpltCallback+0x228>)
 80033b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033b8:	60d3      	str	r3, [r2, #12]
 80033ba:	e003      	b.n	80033c4 <HAL_SPI_TxRxCpltCallback+0xb0>
 80033bc:	4a5f      	ldr	r2, [pc, #380]	; (800353c <HAL_SPI_TxRxCpltCallback+0x228>)
 80033be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033c2:	6093      	str	r3, [r2, #8]
			__HAL_DMA_CLEAR_FLAG(hspi1.hdmarx, DMA_FLAG_TCIF0_4);
 80033c4:	4b57      	ldr	r3, [pc, #348]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 80033c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b57      	ldr	r3, [pc, #348]	; (800352c <HAL_SPI_TxRxCpltCallback+0x218>)
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d903      	bls.n	80033da <HAL_SPI_TxRxCpltCallback+0xc6>
 80033d2:	4b57      	ldr	r3, [pc, #348]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 80033d4:	2220      	movs	r2, #32
 80033d6:	60da      	str	r2, [r3, #12]
 80033d8:	e018      	b.n	800340c <HAL_SPI_TxRxCpltCallback+0xf8>
 80033da:	4b52      	ldr	r3, [pc, #328]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b54      	ldr	r3, [pc, #336]	; (8003534 <HAL_SPI_TxRxCpltCallback+0x220>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d903      	bls.n	80033f0 <HAL_SPI_TxRxCpltCallback+0xdc>
 80033e8:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 80033ea:	2320      	movs	r3, #32
 80033ec:	6093      	str	r3, [r2, #8]
 80033ee:	e00d      	b.n	800340c <HAL_SPI_TxRxCpltCallback+0xf8>
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 80033f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <HAL_SPI_TxRxCpltCallback+0x224>)
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d903      	bls.n	8003406 <HAL_SPI_TxRxCpltCallback+0xf2>
 80033fe:	4a4f      	ldr	r2, [pc, #316]	; (800353c <HAL_SPI_TxRxCpltCallback+0x228>)
 8003400:	2320      	movs	r3, #32
 8003402:	60d3      	str	r3, [r2, #12]
 8003404:	e002      	b.n	800340c <HAL_SPI_TxRxCpltCallback+0xf8>
 8003406:	4a4d      	ldr	r2, [pc, #308]	; (800353c <HAL_SPI_TxRxCpltCallback+0x228>)
 8003408:	2320      	movs	r3, #32
 800340a:	6093      	str	r3, [r2, #8]
			HAL_SPI_ErrorCallback(&hspi1);
 800340c:	4845      	ldr	r0, [pc, #276]	; (8003524 <HAL_SPI_TxRxCpltCallback+0x210>)
 800340e:	f7ff fd7f 	bl	8002f10 <HAL_SPI_ErrorCallback>
		}
		if (master_receive_1[6] == 666) {
 8003412:	4b45      	ldr	r3, [pc, #276]	; (8003528 <HAL_SPI_TxRxCpltCallback+0x214>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f240 229a 	movw	r2, #666	; 0x29a
 800341a:	4293      	cmp	r3, r2
 800341c:	d10d      	bne.n	800343a <HAL_SPI_TxRxCpltCallback+0x126>
			if (HAL_SPI_GetError(hspi) == HAL_SPI_ERROR_NONE) {
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f003 fb66 	bl	8006af0 <HAL_SPI_GetError>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <HAL_SPI_TxRxCpltCallback+0x126>
				spi1_cond = 1;
 800342a:	4b45      	ldr	r3, [pc, #276]	; (8003540 <HAL_SPI_TxRxCpltCallback+0x22c>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
				spi1_success++;
 8003430:	4b44      	ldr	r3, [pc, #272]	; (8003544 <HAL_SPI_TxRxCpltCallback+0x230>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	4a43      	ldr	r2, [pc, #268]	; (8003544 <HAL_SPI_TxRxCpltCallback+0x230>)
 8003438:	6013      	str	r3, [r2, #0]
			}
		}
	}
	if (hspi->Instance == hspi2.Instance) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_SPI_TxRxCpltCallback+0x234>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	f040 809f 	bne.w	8003586 <HAL_SPI_TxRxCpltCallback+0x272>
		if (master_receive_2[6] != 666) {
 8003448:	4b40      	ldr	r3, [pc, #256]	; (800354c <HAL_SPI_TxRxCpltCallback+0x238>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f240 229a 	movw	r2, #666	; 0x29a
 8003450:	4293      	cmp	r3, r2
 8003452:	f000 8084 	beq.w	800355e <HAL_SPI_TxRxCpltCallback+0x24a>
			__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
			__HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003474:	609a      	str	r2, [r3, #8]
			__HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	693b      	ldr	r3, [r7, #16]
			__HAL_DMA_CLEAR_FLAG(hspi2.hdmatx, DMA_FLAG_TCIF0_4); // Updated line for SPI2_TX DMA1 Stream 4
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_SPI_TxRxCpltCallback+0x234>)
 8003496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_SPI_TxRxCpltCallback+0x218>)
 800349e:	429a      	cmp	r2, r3
 80034a0:	d903      	bls.n	80034aa <HAL_SPI_TxRxCpltCallback+0x196>
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 80034a4:	2220      	movs	r2, #32
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e018      	b.n	80034dc <HAL_SPI_TxRxCpltCallback+0x1c8>
 80034aa:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_SPI_TxRxCpltCallback+0x234>)
 80034ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_SPI_TxRxCpltCallback+0x220>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d903      	bls.n	80034c0 <HAL_SPI_TxRxCpltCallback+0x1ac>
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 80034ba:	2320      	movs	r3, #32
 80034bc:	6093      	str	r3, [r2, #8]
 80034be:	e00d      	b.n	80034dc <HAL_SPI_TxRxCpltCallback+0x1c8>
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_SPI_TxRxCpltCallback+0x234>)
 80034c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_SPI_TxRxCpltCallback+0x224>)
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d903      	bls.n	80034d6 <HAL_SPI_TxRxCpltCallback+0x1c2>
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_SPI_TxRxCpltCallback+0x228>)
 80034d0:	2320      	movs	r3, #32
 80034d2:	60d3      	str	r3, [r2, #12]
 80034d4:	e002      	b.n	80034dc <HAL_SPI_TxRxCpltCallback+0x1c8>
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_SPI_TxRxCpltCallback+0x228>)
 80034d8:	2320      	movs	r3, #32
 80034da:	6093      	str	r3, [r2, #8]
			__HAL_DMA_CLEAR_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7);
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_SPI_TxRxCpltCallback+0x234>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_SPI_TxRxCpltCallback+0x218>)
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d904      	bls.n	80034f4 <HAL_SPI_TxRxCpltCallback+0x1e0>
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 80034ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	e031      	b.n	8003558 <HAL_SPI_TxRxCpltCallback+0x244>
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HAL_SPI_TxRxCpltCallback+0x234>)
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_SPI_TxRxCpltCallback+0x220>)
 80034fe:	429a      	cmp	r2, r3
 8003500:	d904      	bls.n	800350c <HAL_SPI_TxRxCpltCallback+0x1f8>
 8003502:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003508:	6093      	str	r3, [r2, #8]
 800350a:	e025      	b.n	8003558 <HAL_SPI_TxRxCpltCallback+0x244>
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_SPI_TxRxCpltCallback+0x234>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_SPI_TxRxCpltCallback+0x224>)
 8003516:	429a      	cmp	r2, r3
 8003518:	d91a      	bls.n	8003550 <HAL_SPI_TxRxCpltCallback+0x23c>
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_SPI_TxRxCpltCallback+0x228>)
 800351c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003520:	60d3      	str	r3, [r2, #12]
 8003522:	e019      	b.n	8003558 <HAL_SPI_TxRxCpltCallback+0x244>
 8003524:	200000e0 	.word	0x200000e0
 8003528:	200006e8 	.word	0x200006e8
 800352c:	40026458 	.word	0x40026458
 8003530:	40026400 	.word	0x40026400
 8003534:	400260b8 	.word	0x400260b8
 8003538:	40026058 	.word	0x40026058
 800353c:	40026000 	.word	0x40026000
 8003540:	200008dc 	.word	0x200008dc
 8003544:	200008ec 	.word	0x200008ec
 8003548:	20000138 	.word	0x20000138
 800354c:	20000730 	.word	0x20000730
 8003550:	4a56      	ldr	r2, [pc, #344]	; (80036ac <HAL_SPI_TxRxCpltCallback+0x398>)
 8003552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003556:	6093      	str	r3, [r2, #8]
			HAL_SPI_ErrorCallback(&hspi2);
 8003558:	4855      	ldr	r0, [pc, #340]	; (80036b0 <HAL_SPI_TxRxCpltCallback+0x39c>)
 800355a:	f7ff fcd9 	bl	8002f10 <HAL_SPI_ErrorCallback>
		}
		if (master_receive_2[6] == 666) {
 800355e:	4b55      	ldr	r3, [pc, #340]	; (80036b4 <HAL_SPI_TxRxCpltCallback+0x3a0>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f240 229a 	movw	r2, #666	; 0x29a
 8003566:	4293      	cmp	r3, r2
 8003568:	d10d      	bne.n	8003586 <HAL_SPI_TxRxCpltCallback+0x272>
			if (HAL_SPI_GetError(hspi) == HAL_SPI_ERROR_NONE) {
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f003 fac0 	bl	8006af0 <HAL_SPI_GetError>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_SPI_TxRxCpltCallback+0x272>
				spi2_cond = 1;
 8003576:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_SPI_TxRxCpltCallback+0x3a4>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
				spi2_success++;
 800357c:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <HAL_SPI_TxRxCpltCallback+0x3a8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a4e      	ldr	r2, [pc, #312]	; (80036bc <HAL_SPI_TxRxCpltCallback+0x3a8>)
 8003584:	6013      	str	r3, [r2, #0]
			}
		}
	}
	if (hspi->Instance == hspi3.Instance) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	f040 8088 	bne.w	80036a4 <HAL_SPI_TxRxCpltCallback+0x390>
		if (master_receive_3[6] != 666) {
 8003594:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_SPI_TxRxCpltCallback+0x3b0>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f240 229a 	movw	r2, #666	; 0x29a
 800359c:	4293      	cmp	r3, r2
 800359e:	d06d      	beq.n	800367c <HAL_SPI_TxRxCpltCallback+0x368>
			__HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
			__HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80035be:	609a      	str	r2, [r3, #8]
			__HAL_SPI_CLEAR_MODFFLAG(hspi);
 80035c0:	2300      	movs	r3, #0
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
			__HAL_DMA_CLEAR_FLAG(hspi3.hdmatx, DMA_FLAG_TCIF0_4); // Updated line for SPI3_TX DMA1 Stream 0
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 80035e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <HAL_SPI_TxRxCpltCallback+0x3b4>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d903      	bls.n	80035f4 <HAL_SPI_TxRxCpltCallback+0x2e0>
 80035ec:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_SPI_TxRxCpltCallback+0x3b8>)
 80035ee:	2220      	movs	r2, #32
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e018      	b.n	8003626 <HAL_SPI_TxRxCpltCallback+0x312>
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HAL_SPI_TxRxCpltCallback+0x3bc>)
 80035fe:	429a      	cmp	r2, r3
 8003600:	d903      	bls.n	800360a <HAL_SPI_TxRxCpltCallback+0x2f6>
 8003602:	4a32      	ldr	r2, [pc, #200]	; (80036cc <HAL_SPI_TxRxCpltCallback+0x3b8>)
 8003604:	2320      	movs	r3, #32
 8003606:	6093      	str	r3, [r2, #8]
 8003608:	e00d      	b.n	8003626 <HAL_SPI_TxRxCpltCallback+0x312>
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_SPI_TxRxCpltCallback+0x3c0>)
 8003614:	429a      	cmp	r2, r3
 8003616:	d903      	bls.n	8003620 <HAL_SPI_TxRxCpltCallback+0x30c>
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <HAL_SPI_TxRxCpltCallback+0x398>)
 800361a:	2320      	movs	r3, #32
 800361c:	60d3      	str	r3, [r2, #12]
 800361e:	e002      	b.n	8003626 <HAL_SPI_TxRxCpltCallback+0x312>
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <HAL_SPI_TxRxCpltCallback+0x398>)
 8003622:	2320      	movs	r3, #32
 8003624:	6093      	str	r3, [r2, #8]
			__HAL_DMA_CLEAR_FLAG(hspi3.hdmarx, DMA_FLAG_TCIF1_5);
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_SPI_TxRxCpltCallback+0x3b4>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d904      	bls.n	800363e <HAL_SPI_TxRxCpltCallback+0x32a>
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_SPI_TxRxCpltCallback+0x3b8>)
 8003636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	e01b      	b.n	8003676 <HAL_SPI_TxRxCpltCallback+0x362>
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_SPI_TxRxCpltCallback+0x3bc>)
 8003648:	429a      	cmp	r2, r3
 800364a:	d904      	bls.n	8003656 <HAL_SPI_TxRxCpltCallback+0x342>
 800364c:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_SPI_TxRxCpltCallback+0x3b8>)
 800364e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003652:	6093      	str	r3, [r2, #8]
 8003654:	e00f      	b.n	8003676 <HAL_SPI_TxRxCpltCallback+0x362>
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_SPI_TxRxCpltCallback+0x3c0>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d904      	bls.n	800366e <HAL_SPI_TxRxCpltCallback+0x35a>
 8003664:	4a11      	ldr	r2, [pc, #68]	; (80036ac <HAL_SPI_TxRxCpltCallback+0x398>)
 8003666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800366a:	60d3      	str	r3, [r2, #12]
 800366c:	e003      	b.n	8003676 <HAL_SPI_TxRxCpltCallback+0x362>
 800366e:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <HAL_SPI_TxRxCpltCallback+0x398>)
 8003670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003674:	6093      	str	r3, [r2, #8]
			HAL_SPI_ErrorCallback(&hspi3);
 8003676:	4812      	ldr	r0, [pc, #72]	; (80036c0 <HAL_SPI_TxRxCpltCallback+0x3ac>)
 8003678:	f7ff fc4a 	bl	8002f10 <HAL_SPI_ErrorCallback>
		}
		if (master_receive_3[6] == 666) {
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_SPI_TxRxCpltCallback+0x3b0>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f240 229a 	movw	r2, #666	; 0x29a
 8003684:	4293      	cmp	r3, r2
 8003686:	d10d      	bne.n	80036a4 <HAL_SPI_TxRxCpltCallback+0x390>
			if (HAL_SPI_GetError(hspi) == HAL_SPI_ERROR_NONE) {
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f003 fa31 	bl	8006af0 <HAL_SPI_GetError>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_SPI_TxRxCpltCallback+0x390>
				spi3_cond = 1;
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_SPI_TxRxCpltCallback+0x3c4>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
				spi3_success++;
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_SPI_TxRxCpltCallback+0x3c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_SPI_TxRxCpltCallback+0x3c8>)
 80036a2:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 80036a4:	bf00      	nop
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40026000 	.word	0x40026000
 80036b0:	20000138 	.word	0x20000138
 80036b4:	20000730 	.word	0x20000730
 80036b8:	200008e0 	.word	0x200008e0
 80036bc:	200008f4 	.word	0x200008f4
 80036c0:	20000190 	.word	0x20000190
 80036c4:	20000778 	.word	0x20000778
 80036c8:	40026458 	.word	0x40026458
 80036cc:	40026400 	.word	0x40026400
 80036d0:	400260b8 	.word	0x400260b8
 80036d4:	40026058 	.word	0x40026058
 80036d8:	200008e4 	.word	0x200008e4
 80036dc:	200008fc 	.word	0x200008fc

080036e0 <bluetooth_uart>:
void bluetooth_uart() {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status1 = HAL_UART_Receive_DMA(&huart1, &message_r, 1);
 80036e6:	2201      	movs	r2, #1
 80036e8:	4908      	ldr	r1, [pc, #32]	; (800370c <bluetooth_uart+0x2c>)
 80036ea:	4809      	ldr	r0, [pc, #36]	; (8003710 <bluetooth_uart+0x30>)
 80036ec:	f004 f9a2 	bl	8007a34 <HAL_UART_Receive_DMA>
 80036f0:	4603      	mov	r3, r0
 80036f2:	71fb      	strb	r3, [r7, #7]
	if (status1 == HAL_OK) {
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <bluetooth_uart+0x24>
		HAL_UART_Receive_DMA(&huart1, &message_r, 1);
 80036fa:	2201      	movs	r2, #1
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <bluetooth_uart+0x2c>)
 80036fe:	4804      	ldr	r0, [pc, #16]	; (8003710 <bluetooth_uart+0x30>)
 8003700:	f004 f998 	bl	8007a34 <HAL_UART_Receive_DMA>
	}
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000000 	.word	0x20000000
 8003710:	200004b8 	.word	0x200004b8

08003714 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003718:	b672      	cpsid	i
}
 800371a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800371c:	e7fe      	b.n	800371c <Error_Handler+0x8>
	...

08003720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <HAL_MspInit+0x4c>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a0f      	ldr	r2, [pc, #60]	; (800376c <HAL_MspInit+0x4c>)
 8003730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <HAL_MspInit+0x4c>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_MspInit+0x4c>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <HAL_MspInit+0x4c>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_MspInit+0x4c>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800

08003770 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2f      	ldr	r2, [pc, #188]	; (800384c <HAL_ADC_MspInit+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d157      	bne.n	8003842 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_ADC_MspInit+0xe0>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	4a2d      	ldr	r2, [pc, #180]	; (8003850 <HAL_ADC_MspInit+0xe0>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6453      	str	r3, [r2, #68]	; 0x44
 80037a2:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_ADC_MspInit+0xe0>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_ADC_MspInit+0xe0>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	4a26      	ldr	r2, [pc, #152]	; (8003850 <HAL_ADC_MspInit+0xe0>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6313      	str	r3, [r2, #48]	; 0x30
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_ADC_MspInit+0xe0>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037ca:	230c      	movs	r3, #12
 80037cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ce:	2303      	movs	r3, #3
 80037d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	4619      	mov	r1, r3
 80037dc:	481d      	ldr	r0, [pc, #116]	; (8003854 <HAL_ADC_MspInit+0xe4>)
 80037de:	f001 ff8d 	bl	80056fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80037e2:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_ADC_MspInit+0xec>)
 80037e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 8003804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003808:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 800380c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003810:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 8003814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003818:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800381a:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 8003822:	2200      	movs	r2, #0
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003826:	480c      	ldr	r0, [pc, #48]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 8003828:	f001 fb08 	bl	8004e3c <HAL_DMA_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003832:	f7ff ff6f 	bl	8003714 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a07      	ldr	r2, [pc, #28]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <HAL_ADC_MspInit+0xe8>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003842:	bf00      	nop
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40012000 	.word	0x40012000
 8003850:	40023800 	.word	0x40023800
 8003854:	40020000 	.word	0x40020000
 8003858:	20000080 	.word	0x20000080
 800385c:	40026470 	.word	0x40026470

08003860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	; 0x38
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a97      	ldr	r2, [pc, #604]	; (8003adc <HAL_SPI_MspInit+0x27c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	f040 8093 	bne.w	80039aa <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003884:	2300      	movs	r3, #0
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	4b95      	ldr	r3, [pc, #596]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	4a94      	ldr	r2, [pc, #592]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 800388e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003892:	6453      	str	r3, [r2, #68]	; 0x44
 8003894:	4b92      	ldr	r3, [pc, #584]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389c:	623b      	str	r3, [r7, #32]
 800389e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	4b8e      	ldr	r3, [pc, #568]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	4a8d      	ldr	r2, [pc, #564]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6313      	str	r3, [r2, #48]	; 0x30
 80038b0:	4b8b      	ldr	r3, [pc, #556]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038bc:	23f0      	movs	r3, #240	; 0xf0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c8:	2303      	movs	r3, #3
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038cc:	2305      	movs	r3, #5
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d4:	4619      	mov	r1, r3
 80038d6:	4883      	ldr	r0, [pc, #524]	; (8003ae4 <HAL_SPI_MspInit+0x284>)
 80038d8:	f001 ff10 	bl	80056fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80038dc:	4b82      	ldr	r3, [pc, #520]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 80038de:	4a83      	ldr	r2, [pc, #524]	; (8003aec <HAL_SPI_MspInit+0x28c>)
 80038e0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 80038e4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80038e8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ea:	4b7f      	ldr	r3, [pc, #508]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f0:	4b7d      	ldr	r3, [pc, #500]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038f6:	4b7c      	ldr	r3, [pc, #496]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 80038f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038fe:	4b7a      	ldr	r3, [pc, #488]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 8003900:	2200      	movs	r2, #0
 8003902:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003904:	4b78      	ldr	r3, [pc, #480]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 8003906:	2200      	movs	r2, #0
 8003908:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800390a:	4b77      	ldr	r3, [pc, #476]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 800390c:	2200      	movs	r2, #0
 800390e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003910:	4b75      	ldr	r3, [pc, #468]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 8003912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003916:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003918:	4b73      	ldr	r3, [pc, #460]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 800391a:	2200      	movs	r2, #0
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800391e:	4872      	ldr	r0, [pc, #456]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 8003920:	f001 fa8c 	bl	8004e3c <HAL_DMA_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800392a:	f7ff fef3 	bl	8003714 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a6d      	ldr	r2, [pc, #436]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 8003932:	64da      	str	r2, [r3, #76]	; 0x4c
 8003934:	4a6c      	ldr	r2, [pc, #432]	; (8003ae8 <HAL_SPI_MspInit+0x288>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800393a:	4b6d      	ldr	r3, [pc, #436]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 800393c:	4a6d      	ldr	r2, [pc, #436]	; (8003af4 <HAL_SPI_MspInit+0x294>)
 800393e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003940:	4b6b      	ldr	r3, [pc, #428]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003942:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003946:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003948:	4b69      	ldr	r3, [pc, #420]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800394e:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003950:	2200      	movs	r2, #0
 8003952:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003954:	4b66      	ldr	r3, [pc, #408]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800395a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800395c:	4b64      	ldr	r3, [pc, #400]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 800395e:	2200      	movs	r2, #0
 8003960:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003968:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 800396a:	2200      	movs	r2, #0
 800396c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800396e:	4b60      	ldr	r3, [pc, #384]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003974:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003976:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003978:	2200      	movs	r2, #0
 800397a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800397c:	485c      	ldr	r0, [pc, #368]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 800397e:	f001 fa5d 	bl	8004e3c <HAL_DMA_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003988:	f7ff fec4 	bl	8003714 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003990:	649a      	str	r2, [r3, #72]	; 0x48
 8003992:	4a57      	ldr	r2, [pc, #348]	; (8003af0 <HAL_SPI_MspInit+0x290>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003998:	2200      	movs	r2, #0
 800399a:	2100      	movs	r1, #0
 800399c:	2023      	movs	r0, #35	; 0x23
 800399e:	f001 fa08 	bl	8004db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039a2:	2023      	movs	r0, #35	; 0x23
 80039a4:	f001 fa21 	bl	8004dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80039a8:	e167      	b.n	8003c7a <HAL_SPI_MspInit+0x41a>
  else if(hspi->Instance==SPI2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_SPI_MspInit+0x298>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	f040 80ad 	bne.w	8003b10 <HAL_SPI_MspInit+0x2b0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a48      	ldr	r2, [pc, #288]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b46      	ldr	r3, [pc, #280]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <HAL_SPI_MspInit+0x280>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a00:	2305      	movs	r3, #5
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a08:	4619      	mov	r1, r3
 8003a0a:	483c      	ldr	r0, [pc, #240]	; (8003afc <HAL_SPI_MspInit+0x29c>)
 8003a0c:	f001 fe76 	bl	80056fc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003a10:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a12:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <HAL_SPI_MspInit+0x2a4>)
 8003a14:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a1c:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a22:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a28:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a2e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a30:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003a3c:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a48:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003a50:	482b      	ldr	r0, [pc, #172]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a52:	f001 f9f3 	bl	8004e3c <HAL_DMA_Init>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_SPI_MspInit+0x200>
      Error_Handler();
 8003a5c:	f7ff fe5a 	bl	8003714 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a64:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a66:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <HAL_SPI_MspInit+0x2a0>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003a6c:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a6e:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <HAL_SPI_MspInit+0x2ac>)
 8003a70:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a84:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a8a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003aa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aa4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aa6:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003aac:	4816      	ldr	r0, [pc, #88]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003aae:	f001 f9c5 	bl	8004e3c <HAL_DMA_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_SPI_MspInit+0x25c>
      Error_Handler();
 8003ab8:	f7ff fe2c 	bl	8003714 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003ac0:	649a      	str	r2, [r3, #72]	; 0x48
 8003ac2:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <HAL_SPI_MspInit+0x2a8>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2100      	movs	r1, #0
 8003acc:	2024      	movs	r0, #36	; 0x24
 8003ace:	f001 f970 	bl	8004db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003ad2:	2024      	movs	r0, #36	; 0x24
 8003ad4:	f001 f989 	bl	8004dea <HAL_NVIC_EnableIRQ>
}
 8003ad8:	e0cf      	b.n	8003c7a <HAL_SPI_MspInit+0x41a>
 8003ada:	bf00      	nop
 8003adc:	40013000 	.word	0x40013000
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	200001e8 	.word	0x200001e8
 8003aec:	40026410 	.word	0x40026410
 8003af0:	20000248 	.word	0x20000248
 8003af4:	40026440 	.word	0x40026440
 8003af8:	40003800 	.word	0x40003800
 8003afc:	40020400 	.word	0x40020400
 8003b00:	200002a8 	.word	0x200002a8
 8003b04:	40026058 	.word	0x40026058
 8003b08:	20000308 	.word	0x20000308
 8003b0c:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI3)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5b      	ldr	r2, [pc, #364]	; (8003c84 <HAL_SPI_MspInit+0x424>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	f040 80af 	bne.w	8003c7a <HAL_SPI_MspInit+0x41a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2c:	4b56      	ldr	r3, [pc, #344]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4a51      	ldr	r2, [pc, #324]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6313      	str	r3, [r2, #48]	; 0x30
 8003b48:	4b4f      	ldr	r3, [pc, #316]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	6313      	str	r3, [r2, #48]	; 0x30
 8003b64:	4b48      	ldr	r3, [pc, #288]	; (8003c88 <HAL_SPI_MspInit+0x428>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b82:	2306      	movs	r3, #6
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	483f      	ldr	r0, [pc, #252]	; (8003c8c <HAL_SPI_MspInit+0x42c>)
 8003b8e:	f001 fdb5 	bl	80056fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003b92:	2338      	movs	r3, #56	; 0x38
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b96:	2302      	movs	r3, #2
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003baa:	4619      	mov	r1, r3
 8003bac:	4838      	ldr	r0, [pc, #224]	; (8003c90 <HAL_SPI_MspInit+0x430>)
 8003bae:	f001 fda5 	bl	80056fc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bb4:	4a38      	ldr	r2, [pc, #224]	; (8003c98 <HAL_SPI_MspInit+0x438>)
 8003bb6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003bb8:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bbe:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bc0:	2240      	movs	r2, #64	; 0x40
 8003bc2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc4:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bca:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bd0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd2:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003bde:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bea:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bec:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003bf2:	4828      	ldr	r0, [pc, #160]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003bf4:	f001 f922 	bl	8004e3c <HAL_DMA_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_SPI_MspInit+0x3a2>
      Error_Handler();
 8003bfe:	f7ff fd89 	bl	8003714 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003c06:	649a      	str	r2, [r3, #72]	; 0x48
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_SPI_MspInit+0x434>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <HAL_SPI_MspInit+0x440>)
 8003c12:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8003c14:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c2c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c46:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003c4e:	4813      	ldr	r0, [pc, #76]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c50:	f001 f8f4 	bl	8004e3c <HAL_DMA_Init>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_SPI_MspInit+0x3fe>
      Error_Handler();
 8003c5a:	f7ff fd5b 	bl	8003714 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c62:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <HAL_SPI_MspInit+0x43c>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	2033      	movs	r0, #51	; 0x33
 8003c70:	f001 f89f 	bl	8004db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003c74:	2033      	movs	r0, #51	; 0x33
 8003c76:	f001 f8b8 	bl	8004dea <HAL_NVIC_EnableIRQ>
}
 8003c7a:	bf00      	nop
 8003c7c:	3738      	adds	r7, #56	; 0x38
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40003c00 	.word	0x40003c00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40020400 	.word	0x40020400
 8003c94:	20000368 	.word	0x20000368
 8003c98:	40026088 	.word	0x40026088
 8003c9c:	200003c8 	.word	0x200003c8
 8003ca0:	40026010 	.word	0x40026010

08003ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d116      	bne.n	8003ce4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_TIM_Base_MspInit+0x80>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <HAL_TIM_Base_MspInit+0x80>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <HAL_TIM_Base_MspInit+0x80>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	201c      	movs	r0, #28
 8003cd8:	f001 f86b 	bl	8004db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003cdc:	201c      	movs	r0, #28
 8003cde:	f001 f884 	bl	8004dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ce2:	e01a      	b.n	8003d1a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0f      	ldr	r2, [pc, #60]	; (8003d28 <HAL_TIM_Base_MspInit+0x84>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d115      	bne.n	8003d1a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_TIM_Base_MspInit+0x80>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <HAL_TIM_Base_MspInit+0x80>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_TIM_Base_MspInit+0x80>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	201d      	movs	r0, #29
 8003d10:	f001 f84f 	bl	8004db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d14:	201d      	movs	r0, #29
 8003d16:	f001 f868 	bl	8004dea <HAL_NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40000400 	.word	0x40000400

08003d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a98      	ldr	r2, [pc, #608]	; (8003fac <HAL_UART_MspInit+0x280>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	f040 8092 	bne.w	8003e74 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	4b96      	ldr	r3, [pc, #600]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	4a95      	ldr	r2, [pc, #596]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003d5a:	f043 0310 	orr.w	r3, r3, #16
 8003d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d60:	4b93      	ldr	r3, [pc, #588]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	4b8f      	ldr	r3, [pc, #572]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	4a8e      	ldr	r2, [pc, #568]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7c:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d96:	2303      	movs	r3, #3
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d9a:	2307      	movs	r3, #7
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9e:	f107 031c 	add.w	r3, r7, #28
 8003da2:	4619      	mov	r1, r3
 8003da4:	4883      	ldr	r0, [pc, #524]	; (8003fb4 <HAL_UART_MspInit+0x288>)
 8003da6:	f001 fca9 	bl	80056fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003daa:	4b83      	ldr	r3, [pc, #524]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dac:	4a83      	ldr	r2, [pc, #524]	; (8003fbc <HAL_UART_MspInit+0x290>)
 8003dae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003db8:	4b7f      	ldr	r3, [pc, #508]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dbe:	4b7e      	ldr	r3, [pc, #504]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dc4:	4b7c      	ldr	r3, [pc, #496]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dcc:	4b7a      	ldr	r3, [pc, #488]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dd2:	4b79      	ldr	r3, [pc, #484]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003dd8:	4b77      	ldr	r3, [pc, #476]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003dde:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003de4:	4b74      	ldr	r3, [pc, #464]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003dea:	4873      	ldr	r0, [pc, #460]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dec:	f001 f826 	bl	8004e3c <HAL_DMA_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003df6:	f7ff fc8d 	bl	8003714 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a6e      	ldr	r2, [pc, #440]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
 8003e00:	4a6d      	ldr	r2, [pc, #436]	; (8003fb8 <HAL_UART_MspInit+0x28c>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003e06:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e08:	4a6e      	ldr	r2, [pc, #440]	; (8003fc4 <HAL_UART_MspInit+0x298>)
 8003e0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003e0c:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e12:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e14:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e16:	2240      	movs	r2, #64	; 0x40
 8003e18:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e1a:	4b69      	ldr	r3, [pc, #420]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e20:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e28:	4b65      	ldr	r3, [pc, #404]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e2e:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e34:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e3a:	4b61      	ldr	r3, [pc, #388]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e40:	4b5f      	ldr	r3, [pc, #380]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e46:	485e      	ldr	r0, [pc, #376]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e48:	f000 fff8 	bl	8004e3c <HAL_DMA_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003e52:	f7ff fc5f 	bl	8003714 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a59      	ldr	r2, [pc, #356]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e5c:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_UART_MspInit+0x294>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2100      	movs	r1, #0
 8003e66:	2025      	movs	r0, #37	; 0x25
 8003e68:	f000 ffa3 	bl	8004db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e6c:	2025      	movs	r0, #37	; 0x25
 8003e6e:	f000 ffbc 	bl	8004dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003e72:	e096      	b.n	8003fa2 <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART6)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a53      	ldr	r2, [pc, #332]	; (8003fc8 <HAL_UART_MspInit+0x29c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	f040 8091 	bne.w	8003fa2 <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	4a49      	ldr	r2, [pc, #292]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003e8a:	f043 0320 	orr.w	r3, r3, #32
 8003e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e90:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003eac:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <HAL_UART_MspInit+0x284>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003eb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003eca:	2308      	movs	r3, #8
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ece:	f107 031c 	add.w	r3, r7, #28
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4837      	ldr	r0, [pc, #220]	; (8003fb4 <HAL_UART_MspInit+0x288>)
 8003ed6:	f001 fc11 	bl	80056fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003eda:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003edc:	4a3c      	ldr	r2, [pc, #240]	; (8003fd0 <HAL_UART_MspInit+0x2a4>)
 8003ede:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003ee0:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003ee2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003ee6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ee8:	4b38      	ldr	r3, [pc, #224]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef4:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003efa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003efc:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f02:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f0e:	4b2f      	ldr	r3, [pc, #188]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003f1a:	482c      	ldr	r0, [pc, #176]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003f1c:	f000 ff8e 	bl	8004e3c <HAL_DMA_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8003f26:	f7ff fbf5 	bl	8003714 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_UART_MspInit+0x2a0>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <HAL_UART_MspInit+0x2ac>)
 8003f3a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f3e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003f42:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f46:	2240      	movs	r2, #64	; 0x40
 8003f48:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f50:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f56:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003f76:	4817      	ldr	r0, [pc, #92]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f78:	f000 ff60 	bl	8004e3c <HAL_DMA_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8003f82:	f7ff fbc7 	bl	8003714 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <HAL_UART_MspInit+0x2a8>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	2047      	movs	r0, #71	; 0x47
 8003f98:	f000 ff0b 	bl	8004db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003f9c:	2047      	movs	r0, #71	; 0x47
 8003f9e:	f000 ff24 	bl	8004dea <HAL_NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3730      	adds	r7, #48	; 0x30
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40011000 	.word	0x40011000
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	20000540 	.word	0x20000540
 8003fbc:	40026488 	.word	0x40026488
 8003fc0:	200005a0 	.word	0x200005a0
 8003fc4:	400264b8 	.word	0x400264b8
 8003fc8:	40011400 	.word	0x40011400
 8003fcc:	20000600 	.word	0x20000600
 8003fd0:	40026428 	.word	0x40026428
 8003fd4:	20000660 	.word	0x20000660
 8003fd8:	400264a0 	.word	0x400264a0

08003fdc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <HAL_UART_MspDeInit+0x88>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d118      	bne.n	8004020 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003fee:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_UART_MspDeInit+0x8c>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_UART_MspDeInit+0x8c>)
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003ffa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ffe:	481b      	ldr	r0, [pc, #108]	; (800406c <HAL_UART_MspDeInit+0x90>)
 8004000:	f001 fd00 	bl	8005a04 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ffc5 	bl	8004f98 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	4618      	mov	r0, r3
 8004014:	f000 ffc0 	bl	8004f98 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004018:	2025      	movs	r0, #37	; 0x25
 800401a:	f000 fef4 	bl	8004e06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800401e:	e01c      	b.n	800405a <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART6)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a12      	ldr	r2, [pc, #72]	; (8004070 <HAL_UART_MspDeInit+0x94>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d117      	bne.n	800405a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART6_CLK_DISABLE();
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_UART_MspDeInit+0x8c>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <HAL_UART_MspDeInit+0x8c>)
 8004030:	f023 0320 	bic.w	r3, r3, #32
 8004034:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8004036:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800403a:	480c      	ldr	r0, [pc, #48]	; (800406c <HAL_UART_MspDeInit+0x90>)
 800403c:	f001 fce2 	bl	8005a04 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	4618      	mov	r0, r3
 8004046:	f000 ffa7 	bl	8004f98 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	4618      	mov	r0, r3
 8004050:	f000 ffa2 	bl	8004f98 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004054:	2047      	movs	r0, #71	; 0x47
 8004056:	f000 fed6 	bl	8004e06 <HAL_NVIC_DisableIRQ>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40011000 	.word	0x40011000
 8004068:	40023800 	.word	0x40023800
 800406c:	40020000 	.word	0x40020000
 8004070:	40011400 	.word	0x40011400

08004074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004078:	e7fe      	b.n	8004078 <NMI_Handler+0x4>

0800407a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800407e:	e7fe      	b.n	800407e <HardFault_Handler+0x4>

08004080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <MemManage_Handler+0x4>

08004086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <BusFault_Handler+0x4>

0800408c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <UsageFault_Handler+0x4>

08004092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c0:	f000 f956 	bl	8004370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <DMA1_Stream0_IRQHandler+0x10>)
 80040ce:	f001 f8ab 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200003c8 	.word	0x200003c8

080040dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <DMA1_Stream3_IRQHandler+0x10>)
 80040e2:	f001 f8a1 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200002a8 	.word	0x200002a8

080040f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <DMA1_Stream4_IRQHandler+0x10>)
 80040f6:	f001 f897 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000308 	.word	0x20000308

08004104 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <DMA1_Stream5_IRQHandler+0x10>)
 800410a:	f001 f88d 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000368 	.word	0x20000368

08004118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	odometry = 1;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <TIM2_IRQHandler+0x14>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004122:	4803      	ldr	r0, [pc, #12]	; (8004130 <TIM2_IRQHandler+0x18>)
 8004124:	f003 f81c 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200009d8 	.word	0x200009d8
 8004130:	20000428 	.word	0x20000428

08004134 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	spi_tick = 1;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <TIM3_IRQHandler+0x1c>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]
	uart_tick = 1;
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <TIM3_IRQHandler+0x20>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004144:	4804      	ldr	r0, [pc, #16]	; (8004158 <TIM3_IRQHandler+0x24>)
 8004146:	f003 f80b 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200006c0 	.word	0x200006c0
 8004154:	20000984 	.word	0x20000984
 8004158:	20000470 	.word	0x20000470

0800415c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004160:	4802      	ldr	r0, [pc, #8]	; (800416c <SPI1_IRQHandler+0x10>)
 8004162:	f002 fba7 	bl	80068b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200000e0 	.word	0x200000e0

08004170 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004174:	4802      	ldr	r0, [pc, #8]	; (8004180 <SPI2_IRQHandler+0x10>)
 8004176:	f002 fb9d 	bl	80068b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000138 	.word	0x20000138

08004184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004188:	4802      	ldr	r0, [pc, #8]	; (8004194 <USART1_IRQHandler+0x10>)
 800418a:	f003 fc83 	bl	8007a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200004b8 	.word	0x200004b8

08004198 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <SPI3_IRQHandler+0x10>)
 800419e:	f002 fb89 	bl	80068b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000190 	.word	0x20000190

080041ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <DMA2_Stream0_IRQHandler+0x10>)
 80041b2:	f001 f839 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200001e8 	.word	0x200001e8

080041c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <DMA2_Stream1_IRQHandler+0x10>)
 80041c6:	f001 f82f 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000600 	.word	0x20000600

080041d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <DMA2_Stream2_IRQHandler+0x10>)
 80041da:	f001 f825 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000248 	.word	0x20000248

080041e8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */
	adc_flag = 1;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <DMA2_Stream4_IRQHandler+0x14>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80041f2:	4803      	ldr	r0, [pc, #12]	; (8004200 <DMA2_Stream4_IRQHandler+0x18>)
 80041f4:	f001 f818 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000990 	.word	0x20000990
 8004200:	20000080 	.word	0x20000080

08004204 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <DMA2_Stream5_IRQHandler+0x10>)
 800420a:	f001 f80d 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000540 	.word	0x20000540

08004218 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800421c:	4802      	ldr	r0, [pc, #8]	; (8004228 <DMA2_Stream6_IRQHandler+0x10>)
 800421e:	f001 f803 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000660 	.word	0x20000660

0800422c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004230:	4802      	ldr	r0, [pc, #8]	; (800423c <DMA2_Stream7_IRQHandler+0x10>)
 8004232:	f000 fff9 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200005a0 	.word	0x200005a0

08004240 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <USART6_IRQHandler+0x10>)
 8004246:	f003 fc25 	bl	8007a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200004fc 	.word	0x200004fc

08004254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <SystemInit+0x20>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <SystemInit+0x20>)
 8004260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800427c:	480d      	ldr	r0, [pc, #52]	; (80042b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800427e:	490e      	ldr	r1, [pc, #56]	; (80042b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004280:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004284:	e002      	b.n	800428c <LoopCopyDataInit>

08004286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800428a:	3304      	adds	r3, #4

0800428c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800428c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800428e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004290:	d3f9      	bcc.n	8004286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004292:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004294:	4c0b      	ldr	r4, [pc, #44]	; (80042c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004298:	e001      	b.n	800429e <LoopFillZerobss>

0800429a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800429a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800429c:	3204      	adds	r2, #4

0800429e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800429e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a0:	d3fb      	bcc.n	800429a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042a2:	f7ff ffd7 	bl	8004254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042a6:	f004 fcdf 	bl	8008c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042aa:	f7fc fd33 	bl	8000d14 <main>
  bx  lr    
 80042ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042b8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80042bc:	08008d08 	.word	0x08008d08
  ldr r2, =_sbss
 80042c0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80042c4:	200009f0 	.word	0x200009f0

080042c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042c8:	e7fe      	b.n	80042c8 <ADC_IRQHandler>
	...

080042cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <HAL_Init+0x40>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <HAL_Init+0x40>)
 80042d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_Init+0x40>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0a      	ldr	r2, [pc, #40]	; (800430c <HAL_Init+0x40>)
 80042e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_Init+0x40>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a07      	ldr	r2, [pc, #28]	; (800430c <HAL_Init+0x40>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f4:	2003      	movs	r0, #3
 80042f6:	f000 fd51 	bl	8004d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fa:	200f      	movs	r0, #15
 80042fc:	f000 f808 	bl	8004310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004300:	f7ff fa0e 	bl	8003720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023c00 	.word	0x40023c00

08004310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_InitTick+0x54>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_InitTick+0x58>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4619      	mov	r1, r3
 8004322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004326:	fbb3 f3f1 	udiv	r3, r3, r1
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fd77 	bl	8004e22 <HAL_SYSTICK_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e00e      	b.n	800435c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b0f      	cmp	r3, #15
 8004342:	d80a      	bhi.n	800435a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004344:	2200      	movs	r2, #0
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	f000 fd31 	bl	8004db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004350:	4a06      	ldr	r2, [pc, #24]	; (800436c <HAL_InitTick+0x5c>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000010 	.word	0x20000010
 8004368:	20000018 	.word	0x20000018
 800436c:	20000014 	.word	0x20000014

08004370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_IncTick+0x20>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_IncTick+0x24>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4413      	add	r3, r2
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <HAL_IncTick+0x24>)
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000018 	.word	0x20000018
 8004394:	200009ec 	.word	0x200009ec

08004398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return uwTick;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_GetTick+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	200009ec 	.word	0x200009ec

080043b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e033      	b.n	800442e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff f9ce 	bl	8003770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d118      	bne.n	8004420 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043f6:	f023 0302 	bic.w	r3, r3, #2
 80043fa:	f043 0202 	orr.w	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa58 	bl	80048b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
 800441e:	e001      	b.n	8004424 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_ADC_Start_DMA+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e0ce      	b.n	80045f4 <HAL_ADC_Start_DMA+0x1bc>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d018      	beq.n	800449e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800447c:	4b5f      	ldr	r3, [pc, #380]	; (80045fc <HAL_ADC_Start_DMA+0x1c4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a5f      	ldr	r2, [pc, #380]	; (8004600 <HAL_ADC_Start_DMA+0x1c8>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0c9a      	lsrs	r2, r3, #18
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004490:	e002      	b.n	8004498 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	3b01      	subs	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f9      	bne.n	8004492 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ac:	d107      	bne.n	80044be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 8086 	bne.w	80045da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450c:	d106      	bne.n	800451c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	f023 0206 	bic.w	r2, r3, #6
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	645a      	str	r2, [r3, #68]	; 0x44
 800451a:	e002      	b.n	8004522 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_ADC_Start_DMA+0x1cc>)
 800452c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	4a35      	ldr	r2, [pc, #212]	; (8004608 <HAL_ADC_Start_DMA+0x1d0>)
 8004534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <HAL_ADC_Start_DMA+0x1d4>)
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	4a33      	ldr	r2, [pc, #204]	; (8004610 <HAL_ADC_Start_DMA+0x1d8>)
 8004544:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800454e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800455e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	334c      	adds	r3, #76	; 0x4c
 800457a:	4619      	mov	r1, r3
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f000 fd68 	bl	8005054 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10f      	bne.n	80045b0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d129      	bne.n	80045f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	e020      	b.n	80045f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_ADC_Start_DMA+0x1dc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d11b      	bne.n	80045f2 <HAL_ADC_Start_DMA+0x1ba>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d114      	bne.n	80045f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	e00b      	b.n	80045f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f043 0210 	orr.w	r2, r3, #16
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000010 	.word	0x20000010
 8004600:	431bde83 	.word	0x431bde83
 8004604:	40012300 	.word	0x40012300
 8004608:	08004ab1 	.word	0x08004ab1
 800460c:	08004b6b 	.word	0x08004b6b
 8004610:	08004b87 	.word	0x08004b87
 8004614:	40012000 	.word	0x40012000

08004618 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x1c>
 800466c:	2302      	movs	r3, #2
 800466e:	e113      	b.n	8004898 <HAL_ADC_ConfigChannel+0x244>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b09      	cmp	r3, #9
 800467e:	d925      	bls.n	80046cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	3b1e      	subs	r3, #30
 8004696:	2207      	movs	r2, #7
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43da      	mvns	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	400a      	ands	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68d9      	ldr	r1, [r3, #12]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	4603      	mov	r3, r0
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4403      	add	r3, r0
 80046be:	3b1e      	subs	r3, #30
 80046c0:	409a      	lsls	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	e022      	b.n	8004712 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	2207      	movs	r2, #7
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	400a      	ands	r2, r1
 80046ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6919      	ldr	r1, [r3, #16]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	4618      	mov	r0, r3
 8004702:	4603      	mov	r3, r0
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4403      	add	r3, r0
 8004708:	409a      	lsls	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d824      	bhi.n	8004764 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	3b05      	subs	r3, #5
 800472c:	221f      	movs	r2, #31
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	400a      	ands	r2, r1
 800473a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	4618      	mov	r0, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	3b05      	subs	r3, #5
 8004756:	fa00 f203 	lsl.w	r2, r0, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	635a      	str	r2, [r3, #52]	; 0x34
 8004762:	e04c      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d824      	bhi.n	80047b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	3b23      	subs	r3, #35	; 0x23
 800477e:	221f      	movs	r2, #31
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43da      	mvns	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	400a      	ands	r2, r1
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	4618      	mov	r0, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	3b23      	subs	r3, #35	; 0x23
 80047a8:	fa00 f203 	lsl.w	r2, r0, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
 80047b4:	e023      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	3b41      	subs	r3, #65	; 0x41
 80047c8:	221f      	movs	r2, #31
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43da      	mvns	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	400a      	ands	r2, r1
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4618      	mov	r0, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	3b41      	subs	r3, #65	; 0x41
 80047f2:	fa00 f203 	lsl.w	r2, r0, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047fe:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <HAL_ADC_ConfigChannel+0x250>)
 8004800:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <HAL_ADC_ConfigChannel+0x254>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10f      	bne.n	800482c <HAL_ADC_ConfigChannel+0x1d8>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b12      	cmp	r3, #18
 8004812:	d10b      	bne.n	800482c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_ADC_ConfigChannel+0x254>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d12b      	bne.n	800488e <HAL_ADC_ConfigChannel+0x23a>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <HAL_ADC_ConfigChannel+0x258>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <HAL_ADC_ConfigChannel+0x1f4>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b11      	cmp	r3, #17
 8004846:	d122      	bne.n	800488e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a11      	ldr	r2, [pc, #68]	; (80048ac <HAL_ADC_ConfigChannel+0x258>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d111      	bne.n	800488e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <HAL_ADC_ConfigChannel+0x25c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <HAL_ADC_ConfigChannel+0x260>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	0c9a      	lsrs	r2, r3, #18
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004880:	e002      	b.n	8004888 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3b01      	subs	r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f9      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012300 	.word	0x40012300
 80048a8:	40012000 	.word	0x40012000
 80048ac:	10000012 	.word	0x10000012
 80048b0:	20000010 	.word	0x20000010
 80048b4:	431bde83 	.word	0x431bde83

080048b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048c0:	4b79      	ldr	r3, [pc, #484]	; (8004aa8 <ADC_Init+0x1f0>)
 80048c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6899      	ldr	r1, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	4a58      	ldr	r2, [pc, #352]	; (8004aac <ADC_Init+0x1f4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800495e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6899      	ldr	r1, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	e00f      	b.n	80049b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0202 	bic.w	r2, r2, #2
 80049c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	7e1b      	ldrb	r3, [r3, #24]
 80049d0:	005a      	lsls	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01b      	beq.n	8004a1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	035a      	lsls	r2, r3, #13
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	e007      	b.n	8004a2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	051a      	lsls	r2, r3, #20
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6899      	ldr	r1, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a6e:	025a      	lsls	r2, r3, #9
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	029a      	lsls	r2, r3, #10
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40012300 	.word	0x40012300
 8004aac:	0f000001 	.word	0x0f000001

08004ab0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d13c      	bne.n	8004b44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d12b      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d127      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d119      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0220 	bic.w	r2, r2, #32
 8004b16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff fd6b 	bl	8004618 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b42:	e00e      	b.n	8004b62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff fd75 	bl	8004640 <HAL_ADC_ErrorCallback>
}
 8004b56:	e004      	b.n	8004b62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff fd57 	bl	800462c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2240      	movs	r2, #64	; 0x40
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff fd4a 	bl	8004640 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	60d3      	str	r3, [r2, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__NVIC_GetPriorityGrouping+0x18>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 0307 	and.w	r3, r3, #7
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	db0b      	blt.n	8004c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	f003 021f 	and.w	r2, r3, #31
 8004c30:	4907      	ldr	r1, [pc, #28]	; (8004c50 <__NVIC_EnableIRQ+0x38>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2001      	movs	r0, #1
 8004c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000e100 	.word	0xe000e100

08004c54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	db12      	blt.n	8004c8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	f003 021f 	and.w	r2, r3, #31
 8004c6c:	490a      	ldr	r1, [pc, #40]	; (8004c98 <__NVIC_DisableIRQ+0x44>)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2001      	movs	r0, #1
 8004c76:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7a:	3320      	adds	r3, #32
 8004c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c80:	f3bf 8f4f 	dsb	sy
}
 8004c84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c86:	f3bf 8f6f 	isb	sy
}
 8004c8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	e000e100 	.word	0xe000e100

08004c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	6039      	str	r1, [r7, #0]
 8004ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	db0a      	blt.n	8004cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	490c      	ldr	r1, [pc, #48]	; (8004ce8 <__NVIC_SetPriority+0x4c>)
 8004cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cc4:	e00a      	b.n	8004cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4908      	ldr	r1, [pc, #32]	; (8004cec <__NVIC_SetPriority+0x50>)
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	3b04      	subs	r3, #4
 8004cd4:	0112      	lsls	r2, r2, #4
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	440b      	add	r3, r1
 8004cda:	761a      	strb	r2, [r3, #24]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	e000e100 	.word	0xe000e100
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f1c3 0307 	rsb	r3, r3, #7
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	bf28      	it	cs
 8004d0e:	2304      	movcs	r3, #4
 8004d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3304      	adds	r3, #4
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d902      	bls.n	8004d20 <NVIC_EncodePriority+0x30>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	3b03      	subs	r3, #3
 8004d1e:	e000      	b.n	8004d22 <NVIC_EncodePriority+0x32>
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d24:	f04f 32ff 	mov.w	r2, #4294967295
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	401a      	ands	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d38:	f04f 31ff 	mov.w	r1, #4294967295
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	43d9      	mvns	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d48:	4313      	orrs	r3, r2
         );
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3724      	adds	r7, #36	; 0x24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d68:	d301      	bcc.n	8004d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e00f      	b.n	8004d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <SysTick_Config+0x40>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d76:	210f      	movs	r1, #15
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	f7ff ff8e 	bl	8004c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <SysTick_Config+0x40>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d86:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <SysTick_Config+0x40>)
 8004d88:	2207      	movs	r2, #7
 8004d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000e010 	.word	0xe000e010

08004d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff05 	bl	8004bb4 <__NVIC_SetPriorityGrouping>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b086      	sub	sp, #24
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	4603      	mov	r3, r0
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
 8004dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dc4:	f7ff ff1a 	bl	8004bfc <__NVIC_GetPriorityGrouping>
 8004dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	6978      	ldr	r0, [r7, #20]
 8004dd0:	f7ff ff8e 	bl	8004cf0 <NVIC_EncodePriority>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff ff5d 	bl	8004c9c <__NVIC_SetPriority>
}
 8004de2:	bf00      	nop
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	4603      	mov	r3, r0
 8004df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff0d 	bl	8004c18 <__NVIC_EnableIRQ>
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff1d 	bl	8004c54 <__NVIC_DisableIRQ>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff ff94 	bl	8004d58 <SysTick_Config>
 8004e30:	4603      	mov	r3, r0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e48:	f7ff faa6 	bl	8004398 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e099      	b.n	8004f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e78:	e00f      	b.n	8004e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e7a:	f7ff fa8d 	bl	8004398 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d908      	bls.n	8004e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e078      	b.n	8004f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e8      	bne.n	8004e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <HAL_DMA_Init+0x158>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d107      	bne.n	8004f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	4313      	orrs	r3, r2
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0307 	bic.w	r3, r3, #7
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d117      	bne.n	8004f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fb5f 	bl	8005604 <DMA_CheckFifoParam>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e016      	b.n	8004f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fb16 	bl	8005598 <DMA_CalcBaseAndBitshift>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f74:	223f      	movs	r2, #63	; 0x3f
 8004f76:	409a      	lsls	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	f010803f 	.word	0xf010803f

08004f98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e050      	b.n	800504c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d101      	bne.n	8004fba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e048      	b.n	800504c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2221      	movs	r2, #33	; 0x21
 8004ff8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 facc 	bl	8005598 <DMA_CalcBaseAndBitshift>
 8005000:	4603      	mov	r3, r0
 8005002:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	223f      	movs	r2, #63	; 0x3f
 800502e:	409a      	lsls	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_DMA_Start_IT+0x26>
 8005076:	2302      	movs	r3, #2
 8005078:	e040      	b.n	80050fc <HAL_DMA_Start_IT+0xa8>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d12f      	bne.n	80050ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fa4a 	bl	800553c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	223f      	movs	r2, #63	; 0x3f
 80050ae:	409a      	lsls	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0216 	orr.w	r2, r2, #22
 80050c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0208 	orr.w	r2, r2, #8
 80050da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e005      	b.n	80050fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005112:	f7ff f941 	bl	8004398 <HAL_GetTick>
 8005116:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d008      	beq.n	8005136 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2280      	movs	r2, #128	; 0x80
 8005128:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e052      	b.n	80051dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0216 	bic.w	r2, r2, #22
 8005144:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005154:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <HAL_DMA_Abort+0x62>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0208 	bic.w	r2, r2, #8
 8005174:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005186:	e013      	b.n	80051b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005188:	f7ff f906 	bl	8004398 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b05      	cmp	r3, #5
 8005194:	d90c      	bls.n	80051b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2203      	movs	r2, #3
 80051a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e015      	b.n	80051dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e4      	bne.n	8005188 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	223f      	movs	r2, #63	; 0x3f
 80051c4:	409a      	lsls	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d004      	beq.n	8005202 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2280      	movs	r2, #128	; 0x80
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00c      	b.n	800521c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2205      	movs	r2, #5
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005234:	4b8e      	ldr	r3, [pc, #568]	; (8005470 <HAL_DMA_IRQHandler+0x248>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a8e      	ldr	r2, [pc, #568]	; (8005474 <HAL_DMA_IRQHandler+0x24c>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	0a9b      	lsrs	r3, r3, #10
 8005240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005252:	2208      	movs	r2, #8
 8005254:	409a      	lsls	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01a      	beq.n	8005294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d013      	beq.n	8005294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0204 	bic.w	r2, r2, #4
 800527a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005280:	2208      	movs	r2, #8
 8005282:	409a      	lsls	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	f043 0201 	orr.w	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d012      	beq.n	80052ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	2201      	movs	r2, #1
 80052b8:	409a      	lsls	r2, r3
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f043 0202 	orr.w	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ce:	2204      	movs	r2, #4
 80052d0:	409a      	lsls	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d012      	beq.n	8005300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ec:	2204      	movs	r2, #4
 80052ee:	409a      	lsls	r2, r3
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	2210      	movs	r2, #16
 8005306:	409a      	lsls	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d043      	beq.n	8005398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d03c      	beq.n	8005398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005322:	2210      	movs	r2, #16
 8005324:	409a      	lsls	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d018      	beq.n	800536a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d024      	beq.n	8005398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
 8005356:	e01f      	b.n	8005398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
 8005368:	e016      	b.n	8005398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0208 	bic.w	r2, r2, #8
 8005386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	2220      	movs	r2, #32
 800539e:	409a      	lsls	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 808f 	beq.w	80054c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8087 	beq.w	80054c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	2220      	movs	r2, #32
 80053c0:	409a      	lsls	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d136      	bne.n	8005440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0216 	bic.w	r2, r2, #22
 80053e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <HAL_DMA_IRQHandler+0x1da>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0208 	bic.w	r2, r2, #8
 8005410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	223f      	movs	r2, #63	; 0x3f
 8005418:	409a      	lsls	r2, r3
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	2b00      	cmp	r3, #0
 8005434:	d07e      	beq.n	8005534 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
        }
        return;
 800543e:	e079      	b.n	8005534 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01d      	beq.n	800548a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005460:	2b00      	cmp	r3, #0
 8005462:	d031      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
 800546c:	e02c      	b.n	80054c8 <HAL_DMA_IRQHandler+0x2a0>
 800546e:	bf00      	nop
 8005470:	20000010 	.word	0x20000010
 8005474:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d023      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
 8005488:	e01e      	b.n	80054c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10f      	bne.n	80054b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0210 	bic.w	r2, r2, #16
 80054a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d032      	beq.n	8005536 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d022      	beq.n	8005522 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2205      	movs	r2, #5
 80054e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d307      	bcc.n	8005510 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f2      	bne.n	80054f4 <HAL_DMA_IRQHandler+0x2cc>
 800550e:	e000      	b.n	8005512 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005510:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
 8005532:	e000      	b.n	8005536 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005534:	bf00      	nop
    }
  }
}
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005558:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d108      	bne.n	800557c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800557a:	e007      	b.n	800558c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	3b10      	subs	r3, #16
 80055a8:	4a14      	ldr	r2, [pc, #80]	; (80055fc <DMA_CalcBaseAndBitshift+0x64>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055b2:	4a13      	ldr	r2, [pc, #76]	; (8005600 <DMA_CalcBaseAndBitshift+0x68>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d909      	bls.n	80055da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	659a      	str	r2, [r3, #88]	; 0x58
 80055d8:	e007      	b.n	80055ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	aaaaaaab 	.word	0xaaaaaaab
 8005600:	08008cf0 	.word	0x08008cf0

08005604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11f      	bne.n	800565e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d856      	bhi.n	80056d2 <DMA_CheckFifoParam+0xce>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <DMA_CheckFifoParam+0x28>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	0800563d 	.word	0x0800563d
 8005630:	0800564f 	.word	0x0800564f
 8005634:	0800563d 	.word	0x0800563d
 8005638:	080056d3 	.word	0x080056d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d046      	beq.n	80056d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564c:	e043      	b.n	80056d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005656:	d140      	bne.n	80056da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565c:	e03d      	b.n	80056da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005666:	d121      	bne.n	80056ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d837      	bhi.n	80056de <DMA_CheckFifoParam+0xda>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <DMA_CheckFifoParam+0x70>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	08005685 	.word	0x08005685
 8005678:	0800568b 	.word	0x0800568b
 800567c:	08005685 	.word	0x08005685
 8005680:	0800569d 	.word	0x0800569d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      break;
 8005688:	e030      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d025      	beq.n	80056e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569a:	e022      	b.n	80056e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056a4:	d11f      	bne.n	80056e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056aa:	e01c      	b.n	80056e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d903      	bls.n	80056ba <DMA_CheckFifoParam+0xb6>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d003      	beq.n	80056c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056b8:	e018      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
      break;
 80056be:	e015      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e00b      	b.n	80056ea <DMA_CheckFifoParam+0xe6>
      break;
 80056d2:	bf00      	nop
 80056d4:	e00a      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      break;
 80056d6:	bf00      	nop
 80056d8:	e008      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      break;
 80056da:	bf00      	nop
 80056dc:	e006      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      break;
 80056de:	bf00      	nop
 80056e0:	e004      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      break;   
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <DMA_CheckFifoParam+0xe8>
      break;
 80056ea:	bf00      	nop
    }
  } 
  
  return status; 
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop

080056fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	e159      	b.n	80059cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005718:	2201      	movs	r2, #1
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	429a      	cmp	r2, r3
 8005732:	f040 8148 	bne.w	80059c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d005      	beq.n	800574e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800574a:	2b02      	cmp	r3, #2
 800574c:	d130      	bne.n	80057b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	2203      	movs	r2, #3
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43db      	mvns	r3, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4013      	ands	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005784:	2201      	movs	r2, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	f003 0201 	and.w	r2, r3, #1
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d017      	beq.n	80057ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2203      	movs	r2, #3
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d123      	bne.n	8005840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	08da      	lsrs	r2, r3, #3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3208      	adds	r2, #8
 8005800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	220f      	movs	r2, #15
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	08da      	lsrs	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3208      	adds	r2, #8
 800583a:	69b9      	ldr	r1, [r7, #24]
 800583c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	2203      	movs	r2, #3
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 0203 	and.w	r2, r3, #3
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80a2 	beq.w	80059c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	4b57      	ldr	r3, [pc, #348]	; (80059e4 <HAL_GPIO_Init+0x2e8>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	4a56      	ldr	r2, [pc, #344]	; (80059e4 <HAL_GPIO_Init+0x2e8>)
 800588c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005890:	6453      	str	r3, [r2, #68]	; 0x44
 8005892:	4b54      	ldr	r3, [pc, #336]	; (80059e4 <HAL_GPIO_Init+0x2e8>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800589e:	4a52      	ldr	r2, [pc, #328]	; (80059e8 <HAL_GPIO_Init+0x2ec>)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	3302      	adds	r3, #2
 80058a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	220f      	movs	r2, #15
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a49      	ldr	r2, [pc, #292]	; (80059ec <HAL_GPIO_Init+0x2f0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d019      	beq.n	80058fe <HAL_GPIO_Init+0x202>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a48      	ldr	r2, [pc, #288]	; (80059f0 <HAL_GPIO_Init+0x2f4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_GPIO_Init+0x1fe>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a47      	ldr	r2, [pc, #284]	; (80059f4 <HAL_GPIO_Init+0x2f8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00d      	beq.n	80058f6 <HAL_GPIO_Init+0x1fa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a46      	ldr	r2, [pc, #280]	; (80059f8 <HAL_GPIO_Init+0x2fc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <HAL_GPIO_Init+0x1f6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a45      	ldr	r2, [pc, #276]	; (80059fc <HAL_GPIO_Init+0x300>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_GPIO_Init+0x1f2>
 80058ea:	2304      	movs	r3, #4
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058ee:	2307      	movs	r3, #7
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058fe:	2300      	movs	r3, #0
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005910:	4935      	ldr	r1, [pc, #212]	; (80059e8 <HAL_GPIO_Init+0x2ec>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800591e:	4b38      	ldr	r3, [pc, #224]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005942:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005948:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <HAL_GPIO_Init+0x304>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800596c:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <HAL_GPIO_Init+0x304>)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005972:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005996:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_GPIO_Init+0x304>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059c0:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <HAL_GPIO_Init+0x304>)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b0f      	cmp	r3, #15
 80059d0:	f67f aea2 	bls.w	8005718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40013800 	.word	0x40013800
 80059ec:	40020000 	.word	0x40020000
 80059f0:	40020400 	.word	0x40020400
 80059f4:	40020800 	.word	0x40020800
 80059f8:	40020c00 	.word	0x40020c00
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40013c00 	.word	0x40013c00

08005a04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e0bb      	b.n	8005b98 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a20:	2201      	movs	r2, #1
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	f040 80ab 	bne.w	8005b92 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005a3c:	4a5c      	ldr	r2, [pc, #368]	; (8005bb0 <HAL_GPIO_DeInit+0x1ac>)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	089b      	lsrs	r3, r3, #2
 8005a42:	3302      	adds	r3, #2
 8005a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a48:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a54      	ldr	r2, [pc, #336]	; (8005bb4 <HAL_GPIO_DeInit+0x1b0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d019      	beq.n	8005a9a <HAL_GPIO_DeInit+0x96>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a53      	ldr	r2, [pc, #332]	; (8005bb8 <HAL_GPIO_DeInit+0x1b4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <HAL_GPIO_DeInit+0x92>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a52      	ldr	r2, [pc, #328]	; (8005bbc <HAL_GPIO_DeInit+0x1b8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00d      	beq.n	8005a92 <HAL_GPIO_DeInit+0x8e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a51      	ldr	r2, [pc, #324]	; (8005bc0 <HAL_GPIO_DeInit+0x1bc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <HAL_GPIO_DeInit+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a50      	ldr	r2, [pc, #320]	; (8005bc4 <HAL_GPIO_DeInit+0x1c0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d101      	bne.n	8005a8a <HAL_GPIO_DeInit+0x86>
 8005a86:	2304      	movs	r3, #4
 8005a88:	e008      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a8a:	2307      	movs	r3, #7
 8005a8c:	e006      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e004      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e002      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	f002 0203 	and.w	r2, r2, #3
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	4093      	lsls	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d132      	bne.n	8005b12 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005aac:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	4944      	ldr	r1, [pc, #272]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	4941      	ldr	r1, [pc, #260]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ac8:	4b3f      	ldr	r3, [pc, #252]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	493d      	ldr	r1, [pc, #244]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ad6:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	43db      	mvns	r3, r3
 8005ade:	493a      	ldr	r1, [pc, #232]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	220f      	movs	r2, #15
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005af4:	4a2e      	ldr	r2, [pc, #184]	; (8005bb0 <HAL_GPIO_DeInit+0x1ac>)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	3302      	adds	r3, #2
 8005afc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	43da      	mvns	r2, r3
 8005b04:	482a      	ldr	r0, [pc, #168]	; (8005bb0 <HAL_GPIO_DeInit+0x1ac>)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	089b      	lsrs	r3, r3, #2
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2103      	movs	r1, #3
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	401a      	ands	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	08da      	lsrs	r2, r3, #3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3208      	adds	r2, #8
 8005b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	220f      	movs	r2, #15
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	08d2      	lsrs	r2, r2, #3
 8005b48:	4019      	ands	r1, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3208      	adds	r2, #8
 8005b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	2103      	movs	r1, #3
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	2103      	movs	r1, #3
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	401a      	ands	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3301      	adds	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	f67f af40 	bls.w	8005a20 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40020000 	.word	0x40020000
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	40020800 	.word	0x40020800
 8005bc0:	40020c00 	.word	0x40020c00
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40013c00 	.word	0x40013c00

08005bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	e001      	b.n	8005bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	807b      	strh	r3, [r7, #2]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c0c:	787b      	ldrb	r3, [r7, #1]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c12:	887a      	ldrh	r2, [r7, #2]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c18:	e003      	b.n	8005c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c1a:	887b      	ldrh	r3, [r7, #2]
 8005c1c:	041a      	lsls	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	619a      	str	r2, [r3, #24]
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e267      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d075      	beq.n	8005d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c4e:	4b88      	ldr	r3, [pc, #544]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d00c      	beq.n	8005c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c5a:	4b85      	ldr	r3, [pc, #532]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d112      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c66:	4b82      	ldr	r3, [pc, #520]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c74:	4b7e      	ldr	r3, [pc, #504]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05b      	beq.n	8005d38 <HAL_RCC_OscConfig+0x108>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d157      	bne.n	8005d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e242      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x74>
 8005c96:	4b76      	ldr	r3, [pc, #472]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a75      	ldr	r2, [pc, #468]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e01d      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x98>
 8005cae:	4b70      	ldr	r3, [pc, #448]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a6f      	ldr	r2, [pc, #444]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4b6d      	ldr	r3, [pc, #436]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a6c      	ldr	r2, [pc, #432]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e00b      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005cc8:	4b69      	ldr	r3, [pc, #420]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a68      	ldr	r2, [pc, #416]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d013      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fe fb56 	bl	8004398 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf0:	f7fe fb52 	bl	8004398 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e207      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	4b5b      	ldr	r3, [pc, #364]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0xc0>
 8005d0e:	e014      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fe fb42 	bl	8004398 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d18:	f7fe fb3e 	bl	8004398 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	; 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e1f3      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2a:	4b51      	ldr	r3, [pc, #324]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0xe8>
 8005d36:	e000      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d063      	beq.n	8005e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d52:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d11c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5e:	4b44      	ldr	r3, [pc, #272]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d116      	bne.n	8005d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_RCC_OscConfig+0x152>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e1c7      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d82:	4b3b      	ldr	r3, [pc, #236]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4937      	ldr	r1, [pc, #220]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d96:	e03a      	b.n	8005e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da0:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCC_OscConfig+0x244>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fe faf7 	bl	8004398 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dae:	f7fe faf3 	bl	8004398 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e1a8      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc0:	4b2b      	ldr	r3, [pc, #172]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dcc:	4b28      	ldr	r3, [pc, #160]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4925      	ldr	r1, [pc, #148]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]
 8005de0:	e015      	b.n	8005e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x244>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fe fad6 	bl	8004398 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fe fad2 	bl	8004398 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e187      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d036      	beq.n	8005e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e22:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <HAL_RCC_OscConfig+0x248>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fe fab6 	bl	8004398 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e30:	f7fe fab2 	bl	8004398 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e167      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x200>
 8005e4e:	e01b      	b.n	8005e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e50:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <HAL_RCC_OscConfig+0x248>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e56:	f7fe fa9f 	bl	8004398 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e5c:	e00e      	b.n	8005e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e5e:	f7fe fa9b 	bl	8004398 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d907      	bls.n	8005e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e150      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470000 	.word	0x42470000
 8005e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7c:	4b88      	ldr	r3, [pc, #544]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ea      	bne.n	8005e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8097 	beq.w	8005fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b81      	ldr	r3, [pc, #516]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	4b7d      	ldr	r3, [pc, #500]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	4a7c      	ldr	r2, [pc, #496]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb6:	4b7a      	ldr	r3, [pc, #488]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec6:	4b77      	ldr	r3, [pc, #476]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d118      	bne.n	8005f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ed2:	4b74      	ldr	r3, [pc, #464]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a73      	ldr	r2, [pc, #460]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ede:	f7fe fa5b 	bl	8004398 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee6:	f7fe fa57 	bl	8004398 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e10c      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef8:	4b6a      	ldr	r3, [pc, #424]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d106      	bne.n	8005f1a <HAL_RCC_OscConfig+0x2ea>
 8005f0c:	4b64      	ldr	r3, [pc, #400]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	4a63      	ldr	r2, [pc, #396]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70
 8005f18:	e01c      	b.n	8005f54 <HAL_RCC_OscConfig+0x324>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x30c>
 8005f22:	4b5f      	ldr	r3, [pc, #380]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	4a5e      	ldr	r2, [pc, #376]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f28:	f043 0304 	orr.w	r3, r3, #4
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2e:	4b5c      	ldr	r3, [pc, #368]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	4a5b      	ldr	r2, [pc, #364]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCC_OscConfig+0x324>
 8005f3c:	4b58      	ldr	r3, [pc, #352]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	4a57      	ldr	r2, [pc, #348]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	6713      	str	r3, [r2, #112]	; 0x70
 8005f48:	4b55      	ldr	r3, [pc, #340]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	4a54      	ldr	r2, [pc, #336]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	f023 0304 	bic.w	r3, r3, #4
 8005f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d015      	beq.n	8005f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fe fa1c 	bl	8004398 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f62:	e00a      	b.n	8005f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fe fa18 	bl	8004398 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0cb      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7a:	4b49      	ldr	r3, [pc, #292]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0ee      	beq.n	8005f64 <HAL_RCC_OscConfig+0x334>
 8005f86:	e014      	b.n	8005fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f88:	f7fe fa06 	bl	8004398 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8e:	e00a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f90:	f7fe fa02 	bl	8004398 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e0b5      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa6:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1ee      	bne.n	8005f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb8:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	4a38      	ldr	r2, [pc, #224]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80a1 	beq.w	8006110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fce:	4b34      	ldr	r3, [pc, #208]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d05c      	beq.n	8006094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d141      	bne.n	8006066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <HAL_RCC_OscConfig+0x478>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fe f9d6 	bl	8004398 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fe f9d2 	bl	8004398 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e087      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	3b01      	subs	r3, #1
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	491b      	ldr	r1, [pc, #108]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006038:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <HAL_RCC_OscConfig+0x478>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7fe f9ab 	bl	8004398 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006046:	f7fe f9a7 	bl	8004398 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e05c      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006058:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x416>
 8006064:	e054      	b.n	8006110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <HAL_RCC_OscConfig+0x478>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606c:	f7fe f994 	bl	8004398 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006074:	f7fe f990 	bl	8004398 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e045      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x444>
 8006092:	e03d      	b.n	8006110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d107      	bne.n	80060ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e038      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40007000 	.word	0x40007000
 80060a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <HAL_RCC_OscConfig+0x4ec>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d028      	beq.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d121      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d11a      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060dc:	4013      	ands	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d111      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	3b01      	subs	r3, #1
 80060f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d107      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023800 	.word	0x40023800

08006120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0cc      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006134:	4b68      	ldr	r3, [pc, #416]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d90c      	bls.n	800615c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006142:	4b65      	ldr	r3, [pc, #404]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800614a:	4b63      	ldr	r3, [pc, #396]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d001      	beq.n	800615c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0b8      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006174:	4b59      	ldr	r3, [pc, #356]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a58      	ldr	r2, [pc, #352]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800617e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800618c:	4b53      	ldr	r3, [pc, #332]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a52      	ldr	r2, [pc, #328]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006198:	4b50      	ldr	r3, [pc, #320]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	494d      	ldr	r1, [pc, #308]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d044      	beq.n	8006240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d119      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e07f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d003      	beq.n	80061de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d107      	bne.n	80061ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061de:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e06f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ee:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e067      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061fe:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f023 0203 	bic.w	r2, r3, #3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4934      	ldr	r1, [pc, #208]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	4313      	orrs	r3, r2
 800620e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006210:	f7fe f8c2 	bl	8004398 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006216:	e00a      	b.n	800622e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006218:	f7fe f8be 	bl	8004398 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e04f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622e:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 020c 	and.w	r2, r3, #12
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	429a      	cmp	r2, r3
 800623e:	d1eb      	bne.n	8006218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006240:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d20c      	bcs.n	8006268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e032      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006274:	4b19      	ldr	r3, [pc, #100]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4916      	ldr	r1, [pc, #88]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	490e      	ldr	r1, [pc, #56]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062a6:	f000 f821 	bl	80062ec <HAL_RCC_GetSysClockFreq>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	490a      	ldr	r1, [pc, #40]	; (80062e0 <HAL_RCC_ClockConfig+0x1c0>)
 80062b8:	5ccb      	ldrb	r3, [r1, r3]
 80062ba:	fa22 f303 	lsr.w	r3, r2, r3
 80062be:	4a09      	ldr	r2, [pc, #36]	; (80062e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_RCC_ClockConfig+0x1c8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe f822 	bl	8004310 <HAL_InitTick>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40023c00 	.word	0x40023c00
 80062dc:	40023800 	.word	0x40023800
 80062e0:	08008cd8 	.word	0x08008cd8
 80062e4:	20000010 	.word	0x20000010
 80062e8:	20000014 	.word	0x20000014

080062ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b090      	sub	sp, #64	; 0x40
 80062f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
 80062f8:	2300      	movs	r3, #0
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fc:	2300      	movs	r3, #0
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006304:	4b59      	ldr	r3, [pc, #356]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 030c 	and.w	r3, r3, #12
 800630c:	2b08      	cmp	r3, #8
 800630e:	d00d      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x40>
 8006310:	2b08      	cmp	r3, #8
 8006312:	f200 80a1 	bhi.w	8006458 <HAL_RCC_GetSysClockFreq+0x16c>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_RCC_GetSysClockFreq+0x34>
 800631a:	2b04      	cmp	r3, #4
 800631c:	d003      	beq.n	8006326 <HAL_RCC_GetSysClockFreq+0x3a>
 800631e:	e09b      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006320:	4b53      	ldr	r3, [pc, #332]	; (8006470 <HAL_RCC_GetSysClockFreq+0x184>)
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006324:	e09b      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006326:	4b53      	ldr	r3, [pc, #332]	; (8006474 <HAL_RCC_GetSysClockFreq+0x188>)
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800632a:	e098      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800632c:	4b4f      	ldr	r3, [pc, #316]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006336:	4b4d      	ldr	r3, [pc, #308]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d028      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006342:	4b4a      	ldr	r3, [pc, #296]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	2200      	movs	r2, #0
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	627a      	str	r2, [r7, #36]	; 0x24
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006354:	2100      	movs	r1, #0
 8006356:	4b47      	ldr	r3, [pc, #284]	; (8006474 <HAL_RCC_GetSysClockFreq+0x188>)
 8006358:	fb03 f201 	mul.w	r2, r3, r1
 800635c:	2300      	movs	r3, #0
 800635e:	fb00 f303 	mul.w	r3, r0, r3
 8006362:	4413      	add	r3, r2
 8006364:	4a43      	ldr	r2, [pc, #268]	; (8006474 <HAL_RCC_GetSysClockFreq+0x188>)
 8006366:	fba0 1202 	umull	r1, r2, r0, r2
 800636a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800636c:	460a      	mov	r2, r1
 800636e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006372:	4413      	add	r3, r2
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006378:	2200      	movs	r2, #0
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	61fa      	str	r2, [r7, #28]
 800637e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006386:	f7fa fb1d 	bl	80009c4 <__aeabi_uldivmod>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4613      	mov	r3, r2
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006392:	e053      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006394:	4b35      	ldr	r3, [pc, #212]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	099b      	lsrs	r3, r3, #6
 800639a:	2200      	movs	r2, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	617a      	str	r2, [r7, #20]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063a6:	f04f 0b00 	mov.w	fp, #0
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	f04f 0000 	mov.w	r0, #0
 80063b2:	f04f 0100 	mov.w	r1, #0
 80063b6:	0159      	lsls	r1, r3, #5
 80063b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063bc:	0150      	lsls	r0, r2, #5
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	ebb2 080a 	subs.w	r8, r2, sl
 80063c6:	eb63 090b 	sbc.w	r9, r3, fp
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80063d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80063da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80063de:	ebb2 0408 	subs.w	r4, r2, r8
 80063e2:	eb63 0509 	sbc.w	r5, r3, r9
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	00eb      	lsls	r3, r5, #3
 80063f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063f4:	00e2      	lsls	r2, r4, #3
 80063f6:	4614      	mov	r4, r2
 80063f8:	461d      	mov	r5, r3
 80063fa:	eb14 030a 	adds.w	r3, r4, sl
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	eb45 030b 	adc.w	r3, r5, fp
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006412:	4629      	mov	r1, r5
 8006414:	028b      	lsls	r3, r1, #10
 8006416:	4621      	mov	r1, r4
 8006418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800641c:	4621      	mov	r1, r4
 800641e:	028a      	lsls	r2, r1, #10
 8006420:	4610      	mov	r0, r2
 8006422:	4619      	mov	r1, r3
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	2200      	movs	r2, #0
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	60fa      	str	r2, [r7, #12]
 800642c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006430:	f7fa fac8 	bl	80009c4 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4613      	mov	r3, r2
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	0c1b      	lsrs	r3, r3, #16
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	3301      	adds	r3, #1
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800644c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006456:	e002      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetSysClockFreq+0x184>)
 800645a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800645c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006460:	4618      	mov	r0, r3
 8006462:	3740      	adds	r7, #64	; 0x40
 8006464:	46bd      	mov	sp, r7
 8006466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646a:	bf00      	nop
 800646c:	40023800 	.word	0x40023800
 8006470:	00f42400 	.word	0x00f42400
 8006474:	017d7840 	.word	0x017d7840

08006478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800647c:	4b03      	ldr	r3, [pc, #12]	; (800648c <HAL_RCC_GetHCLKFreq+0x14>)
 800647e:	681b      	ldr	r3, [r3, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000010 	.word	0x20000010

08006490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006494:	f7ff fff0 	bl	8006478 <HAL_RCC_GetHCLKFreq>
 8006498:	4602      	mov	r2, r0
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	0a9b      	lsrs	r3, r3, #10
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	4903      	ldr	r1, [pc, #12]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064a6:	5ccb      	ldrb	r3, [r1, r3]
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40023800 	.word	0x40023800
 80064b4:	08008ce8 	.word	0x08008ce8

080064b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064bc:	f7ff ffdc 	bl	8006478 <HAL_RCC_GetHCLKFreq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	0b5b      	lsrs	r3, r3, #13
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	4903      	ldr	r1, [pc, #12]	; (80064dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40023800 	.word	0x40023800
 80064dc:	08008ce8 	.word	0x08008ce8

080064e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e083      	b.n	80065fa <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006502:	d009      	beq.n	8006518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	61da      	str	r2, [r3, #28]
 800650a:	e005      	b.n	8006518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7fd f997 	bl	8003860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006548:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	ea42 0103 	orr.w	r1, r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	f003 0104 	and.w	r1, r3, #4
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	f003 0210 	and.w	r2, r3, #16
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065cc:	d105      	bne.n	80065da <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	b292      	uxth	r2, r2
 80065d8:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006620:	2302      	movs	r3, #2
 8006622:	e0f8      	b.n	8006816 <HAL_SPI_TransmitReceive_DMA+0x212>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006632:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800663a:	7dbb      	ldrb	r3, [r7, #22]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d00d      	beq.n	800665c <HAL_SPI_TransmitReceive_DMA+0x58>
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006646:	d106      	bne.n	8006656 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006650:	7dbb      	ldrb	r3, [r7, #22]
 8006652:	2b04      	cmp	r3, #4
 8006654:	d002      	beq.n	800665c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800665a:	e0d7      	b.n	800680c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006668:	887b      	ldrh	r3, [r7, #2]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006672:	e0cb      	b.n	800680c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b04      	cmp	r3, #4
 800667e:	d003      	beq.n	8006688 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2205      	movs	r2, #5
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	887a      	ldrh	r2, [r7, #2]
 8006698:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	887a      	ldrh	r2, [r7, #2]
 800669e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	887a      	ldrh	r2, [r7, #2]
 80066aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c6:	d10f      	bne.n	80066e8 <HAL_SPI_TransmitReceive_DMA+0xe4>
  {
    SPI_RESET_CRC(hspi);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d108      	bne.n	8006706 <HAL_SPI_TransmitReceive_DMA+0x102>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f8:	4a49      	ldr	r2, [pc, #292]	; (8006820 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006700:	4a48      	ldr	r2, [pc, #288]	; (8006824 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8006702:	63da      	str	r2, [r3, #60]	; 0x3c
 8006704:	e007      	b.n	8006716 <HAL_SPI_TransmitReceive_DMA+0x112>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670a:	4a47      	ldr	r2, [pc, #284]	; (8006828 <HAL_SPI_TransmitReceive_DMA+0x224>)
 800670c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006712:	4a46      	ldr	r2, [pc, #280]	; (800682c <HAL_SPI_TransmitReceive_DMA+0x228>)
 8006714:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671a:	4a45      	ldr	r2, [pc, #276]	; (8006830 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 800671c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006722:	2200      	movs	r2, #0
 8006724:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	4619      	mov	r1, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800673e:	f7fe fc89 	bl	8005054 <HAL_DMA_Start_IT>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <HAL_SPI_TransmitReceive_DMA+0x15e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674c:	f043 0210 	orr.w	r2, r3, #16
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006760:	e054      	b.n	800680c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	2200      	movs	r2, #0
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	2200      	movs	r2, #0
 8006788:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	2200      	movs	r2, #0
 8006790:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	4619      	mov	r1, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067aa:	f7fe fc53 	bl	8005054 <HAL_DMA_Start_IT>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00c      	beq.n	80067ce <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b8:	f043 0210 	orr.w	r2, r3, #16
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80067cc:	e01e      	b.n	800680c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	d007      	beq.n	80067ec <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0220 	orr.w	r2, r2, #32
 80067fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0202 	orr.w	r2, r2, #2
 800680a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	08006cfd 	.word	0x08006cfd
 8006824:	08006b09 	.word	0x08006b09
 8006828:	08006d19 	.word	0x08006d19
 800682c:	08006c0f 	.word	0x08006c0f
 8006830:	08006d35 	.word	0x08006d35

08006834 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00f      	beq.n	8006868 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe fc59 	bl	8005104 <HAL_DMA_Abort>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	f043 0210 	orr.w	r2, r3, #16
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00f      	beq.n	8006890 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fc45 	bl	8005104 <HAL_DMA_Abort>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	f043 0210 	orr.w	r2, r3, #16
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0203 	bic.w	r2, r2, #3
 800689e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	099b      	lsrs	r3, r3, #6
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10f      	bne.n	80068f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	099b      	lsrs	r3, r3, #6
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
    return;
 80068f6:	e0d7      	b.n	8006aa8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <HAL_SPI_IRQHandler+0x66>
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	09db      	lsrs	r3, r3, #7
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
    return;
 8006918:	e0c6      	b.n	8006aa8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10c      	bne.n	8006940 <HAL_SPI_IRQHandler+0x8c>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	099b      	lsrs	r3, r3, #6
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	0a1b      	lsrs	r3, r3, #8
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80b4 	beq.w	8006aa8 <HAL_SPI_IRQHandler+0x1f4>
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80ad 	beq.w	8006aa8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	099b      	lsrs	r3, r3, #6
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d023      	beq.n	80069a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d011      	beq.n	800698a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	f043 0204 	orr.w	r2, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	e00b      	b.n	80069a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800698a:	2300      	movs	r3, #0
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
        return;
 80069a0:	e082      	b.n	8006aa8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d014      	beq.n	80069d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	f043 0208 	orr.w	r2, r3, #8
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069f0:	2300      	movs	r3, #0
 80069f2:	60bb      	str	r3, [r7, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d04f      	beq.n	8006aa6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <HAL_SPI_IRQHandler+0x17e>
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d034      	beq.n	8006a9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0203 	bic.w	r2, r2, #3
 8006a40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d011      	beq.n	8006a6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4e:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <HAL_SPI_IRQHandler+0x1fc>)
 8006a50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe fbc4 	bl	80051e4 <HAL_DMA_Abort_IT>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7a:	4a0d      	ldr	r2, [pc, #52]	; (8006ab0 <HAL_SPI_IRQHandler+0x1fc>)
 8006a7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fbae 	bl	80051e4 <HAL_DMA_Abort_IT>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006a9a:	e003      	b.n	8006aa4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7fc fa37 	bl	8002f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006aa2:	e000      	b.n	8006aa6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006aa4:	bf00      	nop
    return;
 8006aa6:	bf00      	nop
  }
}
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	08006d75 	.word	0x08006d75

08006ab4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b1a:	f7fd fc3d 	bl	8004398 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2e:	d068      	beq.n	8006c02 <SPI_DMAReceiveCplt+0xfa>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0220 	bic.w	r2, r2, #32
 8006b3e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b48:	d115      	bne.n	8006b76 <SPI_DMAReceiveCplt+0x6e>
    {
      /* Wait until RXNE flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2364      	movs	r3, #100	; 0x64
 8006b50:	2201      	movs	r2, #1
 8006b52:	2101      	movs	r1, #1
 8006b54:	6978      	ldr	r0, [r7, #20]
 8006b56:	f000 f921 	bl	8006d9c <SPI_WaitFlagStateUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <SPI_DMAReceiveCplt+0x64>
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b64:	f043 0202 	orr.w	r2, r3, #2
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
      /* Read CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	60fb      	str	r3, [r7, #12]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006b74:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <SPI_DMAReceiveCplt+0x92>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b86:	d108      	bne.n	8006b9a <SPI_DMAReceiveCplt+0x92>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0203 	bic.w	r2, r2, #3
 8006b96:	605a      	str	r2, [r3, #4]
 8006b98:	e007      	b.n	8006baa <SPI_DMAReceiveCplt+0xa2>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	2164      	movs	r1, #100	; 0x64
 8006bae:	6978      	ldr	r0, [r7, #20]
 8006bb0:	f000 f97c 	bl	8006eac <SPI_EndRxTransaction>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <SPI_DMAReceiveCplt+0xb8>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	2b10      	cmp	r3, #16
 8006bda:	d10a      	bne.n	8006bf2 <SPI_DMAReceiveCplt+0xea>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be0:	f043 0202 	orr.w	r2, r3, #2
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006bf0:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <SPI_DMAReceiveCplt+0xfa>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f7fc f988 	bl	8002f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c00:	e002      	b.n	8006c08 <SPI_DMAReceiveCplt+0x100>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006c02:	6978      	ldr	r0, [r7, #20]
 8006c04:	f7ff ff56 	bl	8006ab4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af02      	add	r7, sp, #8
 8006c14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c20:	f7fd fbba 	bl	8004398 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c34:	d05c      	beq.n	8006cf0 <SPI_DMATransmitReceiveCplt+0xe2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0220 	bic.w	r2, r2, #32
 8006c44:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4e:	d115      	bne.n	8006c7c <SPI_DMATransmitReceiveCplt+0x6e>
    {
      /* Wait the CRC data */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	2364      	movs	r3, #100	; 0x64
 8006c56:	2201      	movs	r2, #1
 8006c58:	2101      	movs	r1, #1
 8006c5a:	6978      	ldr	r0, [r7, #20]
 8006c5c:	f000 f89e 	bl	8006d9c <SPI_WaitFlagStateUntilTimeout>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <SPI_DMATransmitReceiveCplt+0x64>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6a:	f043 0202 	orr.w	r2, r3, #2
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	655a      	str	r2, [r3, #84]	; 0x54
      }
      /* Read CRC to Flush DR and RXNE flag */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	60fb      	str	r3, [r7, #12]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	2164      	movs	r1, #100	; 0x64
 8006c80:	6978      	ldr	r0, [r7, #20]
 8006c82:	f000 f979 	bl	8006f78 <SPI_EndRxTxTransaction>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <SPI_DMATransmitReceiveCplt+0x8a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	f043 0220 	orr.w	r2, r3, #32
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0203 	bic.w	r2, r2, #3
 8006ca6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2200      	movs	r2, #0
 8006cac:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d10a      	bne.n	8006ce0 <SPI_DMATransmitReceiveCplt+0xd2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	f043 0202 	orr.w	r2, r3, #2
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006cde:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <SPI_DMATransmitReceiveCplt+0xe2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ce8:	6978      	ldr	r0, [r7, #20]
 8006cea:	f7fc f911 	bl	8002f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006cee:	e002      	b.n	8006cf6 <SPI_DMATransmitReceiveCplt+0xe8>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	f7fc fb0f 	bl	8003314 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff fedc 	bl	8006ac8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff fed8 	bl	8006adc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0203 	bic.w	r2, r2, #3
 8006d50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	f043 0210 	orr.w	r2, r3, #16
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7fc f8d2 	bl	8002f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7fc f8be 	bl	8002f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dac:	f7fd faf4 	bl	8004398 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4413      	add	r3, r2
 8006dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dbc:	f7fd faec 	bl	8004398 <HAL_GetTick>
 8006dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dc2:	4b39      	ldr	r3, [pc, #228]	; (8006ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	015b      	lsls	r3, r3, #5
 8006dc8:	0d1b      	lsrs	r3, r3, #20
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
 8006dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dd2:	e054      	b.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d050      	beq.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ddc:	f7fd fadc 	bl	8004398 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d902      	bls.n	8006df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d13d      	bne.n	8006e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e0a:	d111      	bne.n	8006e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e14:	d004      	beq.n	8006e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1e:	d107      	bne.n	8006e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e38:	d10f      	bne.n	8006e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e017      	b.n	8006e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4013      	ands	r3, r2
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	bf0c      	ite	eq
 8006e8e:	2301      	moveq	r3, #1
 8006e90:	2300      	movne	r3, #0
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d19b      	bne.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3720      	adds	r7, #32
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000010 	.word	0x20000010

08006eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec0:	d111      	bne.n	8006ee6 <SPI_EndRxTransaction+0x3a>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eca:	d004      	beq.n	8006ed6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed4:	d107      	bne.n	8006ee6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eee:	d12a      	bne.n	8006f46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef8:	d012      	beq.n	8006f20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	2180      	movs	r1, #128	; 0x80
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff ff49 	bl	8006d9c <SPI_WaitFlagStateUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d02d      	beq.n	8006f6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f14:	f043 0220 	orr.w	r2, r3, #32
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e026      	b.n	8006f6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	2101      	movs	r1, #1
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff ff36 	bl	8006d9c <SPI_WaitFlagStateUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01a      	beq.n	8006f6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e013      	b.n	8006f6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2101      	movs	r1, #1
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff ff23 	bl	8006d9c <SPI_WaitFlagStateUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e000      	b.n	8006f6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f84:	4b1b      	ldr	r3, [pc, #108]	; (8006ff4 <SPI_EndRxTxTransaction+0x7c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <SPI_EndRxTxTransaction+0x80>)
 8006f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8e:	0d5b      	lsrs	r3, r3, #21
 8006f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fa2:	d112      	bne.n	8006fca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	2180      	movs	r1, #128	; 0x80
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff fef4 	bl	8006d9c <SPI_WaitFlagStateUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d016      	beq.n	8006fe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbe:	f043 0220 	orr.w	r2, r3, #32
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e00f      	b.n	8006fea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe0:	2b80      	cmp	r3, #128	; 0x80
 8006fe2:	d0f2      	beq.n	8006fca <SPI_EndRxTxTransaction+0x52>
 8006fe4:	e000      	b.n	8006fe8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006fe6:	bf00      	nop
  }

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000010 	.word	0x20000010
 8006ff8:	165e9f81 	.word	0x165e9f81

08006ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e041      	b.n	8007092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fc fe3e 	bl	8003ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f000 fa92 	bl	8007564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d001      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e044      	b.n	800713e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1e      	ldr	r2, [pc, #120]	; (800714c <HAL_TIM_Base_Start_IT+0xb0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d018      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x6c>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070de:	d013      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x6c>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1a      	ldr	r2, [pc, #104]	; (8007150 <HAL_TIM_Base_Start_IT+0xb4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00e      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x6c>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a19      	ldr	r2, [pc, #100]	; (8007154 <HAL_TIM_Base_Start_IT+0xb8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d009      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x6c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_TIM_Base_Start_IT+0xbc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d004      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x6c>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a16      	ldr	r2, [pc, #88]	; (800715c <HAL_TIM_Base_Start_IT+0xc0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d111      	bne.n	800712c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b06      	cmp	r3, #6
 8007118:	d010      	beq.n	800713c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0201 	orr.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712a:	e007      	b.n	800713c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40014000 	.word	0x40014000

08007160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b02      	cmp	r3, #2
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b02      	cmp	r3, #2
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0202 	mvn.w	r2, #2
 800718c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9bf 	bl	8007526 <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9b1 	bl	8007512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9c2 	bl	800753a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0204 	mvn.w	r2, #4
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f995 	bl	8007526 <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f987 	bl	8007512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f998 	bl	800753a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b08      	cmp	r3, #8
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b08      	cmp	r3, #8
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0208 	mvn.w	r2, #8
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2204      	movs	r2, #4
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f96b 	bl	8007526 <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f95d 	bl	8007512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f96e 	bl	800753a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b10      	cmp	r3, #16
 8007270:	d122      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b10      	cmp	r3, #16
 800727e:	d11b      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0210 	mvn.w	r2, #16
 8007288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2208      	movs	r2, #8
 800728e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f941 	bl	8007526 <HAL_TIM_IC_CaptureCallback>
 80072a4:	e005      	b.n	80072b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f933 	bl	8007512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f944 	bl	800753a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10e      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d107      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0201 	mvn.w	r2, #1
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f90d 	bl	80074fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ee:	2b80      	cmp	r3, #128	; 0x80
 80072f0:	d10e      	bne.n	8007310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fc:	2b80      	cmp	r3, #128	; 0x80
 80072fe:	d107      	bne.n	8007310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fabc 	bl	8007888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d10e      	bne.n	800733c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d107      	bne.n	800733c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f909 	bl	800754e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b20      	cmp	r3, #32
 8007348:	d10e      	bne.n	8007368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b20      	cmp	r3, #32
 8007356:	d107      	bne.n	8007368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0220 	mvn.w	r2, #32
 8007360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa86 	bl	8007874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIM_ConfigClockSource+0x1c>
 8007388:	2302      	movs	r3, #2
 800738a:	e0b4      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x186>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c4:	d03e      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0xd4>
 80073c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ca:	f200 8087 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	f000 8086 	beq.w	80074e2 <HAL_TIM_ConfigClockSource+0x172>
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073da:	d87f      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b70      	cmp	r3, #112	; 0x70
 80073de:	d01a      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0xa6>
 80073e0:	2b70      	cmp	r3, #112	; 0x70
 80073e2:	d87b      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b60      	cmp	r3, #96	; 0x60
 80073e6:	d050      	beq.n	800748a <HAL_TIM_ConfigClockSource+0x11a>
 80073e8:	2b60      	cmp	r3, #96	; 0x60
 80073ea:	d877      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b50      	cmp	r3, #80	; 0x50
 80073ee:	d03c      	beq.n	800746a <HAL_TIM_ConfigClockSource+0xfa>
 80073f0:	2b50      	cmp	r3, #80	; 0x50
 80073f2:	d873      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d058      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x13a>
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d86f      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 80073fc:	2b30      	cmp	r3, #48	; 0x30
 80073fe:	d064      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x15a>
 8007400:	2b30      	cmp	r3, #48	; 0x30
 8007402:	d86b      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 8007404:	2b20      	cmp	r3, #32
 8007406:	d060      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	2b20      	cmp	r3, #32
 800740a:	d867      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d05c      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x15a>
 8007410:	2b10      	cmp	r3, #16
 8007412:	d05a      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x15a>
 8007414:	e062      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6899      	ldr	r1, [r3, #8]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f000 f997 	bl	8007758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	609a      	str	r2, [r3, #8]
      break;
 8007442:	e04f      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6899      	ldr	r1, [r3, #8]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f000 f980 	bl	8007758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007466:	609a      	str	r2, [r3, #8]
      break;
 8007468:	e03c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6859      	ldr	r1, [r3, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	461a      	mov	r2, r3
 8007478:	f000 f8f4 	bl	8007664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2150      	movs	r1, #80	; 0x50
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f94d 	bl	8007722 <TIM_ITRx_SetConfig>
      break;
 8007488:	e02c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	461a      	mov	r2, r3
 8007498:	f000 f913 	bl	80076c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2160      	movs	r1, #96	; 0x60
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f93d 	bl	8007722 <TIM_ITRx_SetConfig>
      break;
 80074a8:	e01c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6859      	ldr	r1, [r3, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	461a      	mov	r2, r3
 80074b8:	f000 f8d4 	bl	8007664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2140      	movs	r1, #64	; 0x40
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f92d 	bl	8007722 <TIM_ITRx_SetConfig>
      break;
 80074c8:	e00c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f000 f924 	bl	8007722 <TIM_ITRx_SetConfig>
      break;
 80074da:	e003      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
      break;
 80074e0:	e000      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
	...

08007564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a34      	ldr	r2, [pc, #208]	; (8007648 <TIM_Base_SetConfig+0xe4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00f      	beq.n	800759c <TIM_Base_SetConfig+0x38>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d00b      	beq.n	800759c <TIM_Base_SetConfig+0x38>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a31      	ldr	r2, [pc, #196]	; (800764c <TIM_Base_SetConfig+0xe8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <TIM_Base_SetConfig+0x38>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a30      	ldr	r2, [pc, #192]	; (8007650 <TIM_Base_SetConfig+0xec>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_Base_SetConfig+0x38>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a2f      	ldr	r2, [pc, #188]	; (8007654 <TIM_Base_SetConfig+0xf0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d108      	bne.n	80075ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a25      	ldr	r2, [pc, #148]	; (8007648 <TIM_Base_SetConfig+0xe4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01b      	beq.n	80075ee <TIM_Base_SetConfig+0x8a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075bc:	d017      	beq.n	80075ee <TIM_Base_SetConfig+0x8a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a22      	ldr	r2, [pc, #136]	; (800764c <TIM_Base_SetConfig+0xe8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d013      	beq.n	80075ee <TIM_Base_SetConfig+0x8a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a21      	ldr	r2, [pc, #132]	; (8007650 <TIM_Base_SetConfig+0xec>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00f      	beq.n	80075ee <TIM_Base_SetConfig+0x8a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a20      	ldr	r2, [pc, #128]	; (8007654 <TIM_Base_SetConfig+0xf0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00b      	beq.n	80075ee <TIM_Base_SetConfig+0x8a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1f      	ldr	r2, [pc, #124]	; (8007658 <TIM_Base_SetConfig+0xf4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <TIM_Base_SetConfig+0x8a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1e      	ldr	r2, [pc, #120]	; (800765c <TIM_Base_SetConfig+0xf8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <TIM_Base_SetConfig+0x8a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <TIM_Base_SetConfig+0xfc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d108      	bne.n	8007600 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a08      	ldr	r2, [pc, #32]	; (8007648 <TIM_Base_SetConfig+0xe4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d103      	bne.n	8007634 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	615a      	str	r2, [r3, #20]
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40010000 	.word	0x40010000
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40000c00 	.word	0x40000c00
 8007658:	40014000 	.word	0x40014000
 800765c:	40014400 	.word	0x40014400
 8007660:	40014800 	.word	0x40014800

08007664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f023 0201 	bic.w	r2, r3, #1
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800768e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 030a 	bic.w	r3, r3, #10
 80076a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b087      	sub	sp, #28
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f023 0210 	bic.w	r2, r3, #16
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	031b      	lsls	r3, r3, #12
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	f043 0307 	orr.w	r3, r3, #7
 8007744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	609a      	str	r2, [r3, #8]
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	021a      	lsls	r2, r3, #8
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	431a      	orrs	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4313      	orrs	r3, r2
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	609a      	str	r2, [r3, #8]
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e050      	b.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d018      	beq.n	8007826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fc:	d013      	beq.n	8007826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a18      	ldr	r2, [pc, #96]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00e      	beq.n	8007826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a16      	ldr	r2, [pc, #88]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d009      	beq.n	8007826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d004      	beq.n	8007826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a13      	ldr	r2, [pc, #76]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d10c      	bne.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800782c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	4313      	orrs	r3, r2
 8007836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40010000 	.word	0x40010000
 8007864:	40000400 	.word	0x40000400
 8007868:	40000800 	.word	0x40000800
 800786c:	40000c00 	.word	0x40000c00
 8007870:	40014000 	.word	0x40014000

08007874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e03f      	b.n	800792e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fc fa32 	bl	8003d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2224      	movs	r2, #36	; 0x24
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 ff4d 	bl	8008780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08c      	sub	sp, #48	; 0x30
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b20      	cmp	r3, #32
 8007950:	d165      	bne.n	8007a1e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <HAL_UART_Transmit_DMA+0x26>
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e05e      	b.n	8007a20 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_UART_Transmit_DMA+0x38>
 800796c:	2302      	movs	r3, #2
 800796e:	e057      	b.n	8007a20 <HAL_UART_Transmit_DMA+0xe8>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	88fa      	ldrh	r2, [r7, #6]
 8007982:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2221      	movs	r2, #33	; 0x21
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <HAL_UART_Transmit_DMA+0xf0>)
 800799e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	4a21      	ldr	r2, [pc, #132]	; (8007a2c <HAL_UART_Transmit_DMA+0xf4>)
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ac:	4a20      	ldr	r2, [pc, #128]	; (8007a30 <HAL_UART_Transmit_DMA+0xf8>)
 80079ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	2200      	movs	r2, #0
 80079b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	6819      	ldr	r1, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3304      	adds	r3, #4
 80079cc:	461a      	mov	r2, r3
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	f7fd fb40 	bl	8005054 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3314      	adds	r3, #20
 80079ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	617b      	str	r3, [r7, #20]
   return(result);
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a06:	627a      	str	r2, [r7, #36]	; 0x24
 8007a08:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6a39      	ldr	r1, [r7, #32]
 8007a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e000      	b.n	8007a20 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a1e:	2302      	movs	r3, #2
  }
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3730      	adds	r7, #48	; 0x30
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	08008019 	.word	0x08008019
 8007a2c:	080080b3 	.word	0x080080b3
 8007a30:	0800822b 	.word	0x0800822b

08007a34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d11d      	bne.n	8007a8a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <HAL_UART_Receive_DMA+0x26>
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e016      	b.n	8007a8c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_UART_Receive_DMA+0x38>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e00f      	b.n	8007a8c <HAL_UART_Receive_DMA+0x58>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fc1d 	bl	80082c0 <UART_Start_Receive_DMA>
 8007a86:	4603      	mov	r3, r0
 8007a88:	e000      	b.n	8007a8c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a8a:	2302      	movs	r3, #2
  }
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b0ba      	sub	sp, #232	; 0xe8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10f      	bne.n	8007afa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <HAL_UART_IRQHandler+0x66>
 8007ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fd89 	bl	800860a <UART_Receive_IT>
      return;
 8007af8:	e256      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80de 	beq.w	8007cc0 <HAL_UART_IRQHandler+0x22c>
 8007b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80d1 	beq.w	8007cc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <HAL_UART_IRQHandler+0xae>
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f043 0201 	orr.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <HAL_UART_IRQHandler+0xd2>
 8007b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f043 0202 	orr.w	r2, r3, #2
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <HAL_UART_IRQHandler+0xf6>
 8007b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f043 0204 	orr.w	r2, r3, #4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d011      	beq.n	8007bba <HAL_UART_IRQHandler+0x126>
 8007b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	f043 0208 	orr.w	r2, r3, #8
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 81ed 	beq.w	8007f9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_UART_IRQHandler+0x14e>
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fd14 	bl	800860a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bec:	2b40      	cmp	r3, #64	; 0x40
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <HAL_UART_IRQHandler+0x17a>
 8007c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d04f      	beq.n	8007cae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fc1c 	bl	800844c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	d141      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3314      	adds	r3, #20
 8007c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3314      	adds	r3, #20
 8007c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1d9      	bne.n	8007c22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d013      	beq.n	8007c9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	4a7d      	ldr	r2, [pc, #500]	; (8007e70 <HAL_UART_IRQHandler+0x3dc>)
 8007c7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fd faae 	bl	80051e4 <HAL_DMA_Abort_IT>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9c:	e00e      	b.n	8007cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7f9 f812 	bl	8000cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	e00a      	b.n	8007cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7f9 f80e 	bl	8000cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cac:	e006      	b.n	8007cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7f9 f80a 	bl	8000cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007cba:	e170      	b.n	8007f9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	bf00      	nop
    return;
 8007cbe:	e16e      	b.n	8007f9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	f040 814a 	bne.w	8007f5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8143 	beq.w	8007f5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 813c 	beq.w	8007f5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	60bb      	str	r3, [r7, #8]
 8007cfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b40      	cmp	r3, #64	; 0x40
 8007d08:	f040 80b4 	bne.w	8007e74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8140 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	f080 8139 	bcs.w	8007fa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d42:	f000 8088 	beq.w	8007e56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1d9      	bne.n	8007d46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3314      	adds	r3, #20
 8007d98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3314      	adds	r3, #20
 8007db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007db6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e1      	bne.n	8007d92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3314      	adds	r3, #20
 8007dd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3314      	adds	r3, #20
 8007dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007df2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007df4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007df8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e3      	bne.n	8007dce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	330c      	adds	r3, #12
 8007e34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e38:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e3      	bne.n	8007e14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fd f957 	bl	8005104 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8ca 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e6c:	e099      	b.n	8007fa2 <HAL_UART_IRQHandler+0x50e>
 8007e6e:	bf00      	nop
 8007e70:	08008513 	.word	0x08008513
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 808b 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8086 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8007ec0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e3      	bne.n	8007e9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e3      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f3c:	61fa      	str	r2, [r7, #28]
 8007f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	69b9      	ldr	r1, [r7, #24]
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	617b      	str	r3, [r7, #20]
   return(result);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e3      	bne.n	8007f18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f852 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f5c:	e023      	b.n	8007fa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <HAL_UART_IRQHandler+0x4ea>
 8007f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fadf 	bl	800853a <UART_Transmit_IT>
    return;
 8007f7c:	e014      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x514>
 8007f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d008      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fb1f 	bl	80085da <UART_EndTransmit_IT>
    return;
 8007f9c:	e004      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
    return;
 8007f9e:	bf00      	nop
 8007fa0:	e002      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8007fa2:	bf00      	nop
 8007fa4:	e000      	b.n	8007fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8007fa6:	bf00      	nop
  }
}
 8007fa8:	37e8      	adds	r7, #232	; 0xe8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop

08007fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b090      	sub	sp, #64	; 0x40
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d137      	bne.n	80080a4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008036:	2200      	movs	r2, #0
 8008038:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800803a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3314      	adds	r3, #20
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	623b      	str	r3, [r7, #32]
   return(result);
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008050:	63bb      	str	r3, [r7, #56]	; 0x38
 8008052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3314      	adds	r3, #20
 8008058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805a:	633a      	str	r2, [r7, #48]	; 0x30
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e5      	bne.n	800803a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800806e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	60fb      	str	r3, [r7, #12]
   return(result);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
 8008086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800808e:	61fa      	str	r2, [r7, #28]
 8008090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	69b9      	ldr	r1, [r7, #24]
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	617b      	str	r3, [r7, #20]
   return(result);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080a2:	e002      	b.n	80080aa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80080a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80080a6:	f7ff ff83 	bl	8007fb0 <HAL_UART_TxCpltCallback>
}
 80080aa:	bf00      	nop
 80080ac:	3740      	adds	r7, #64	; 0x40
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff ff7f 	bl	8007fc4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b09c      	sub	sp, #112	; 0x70
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d172      	bne.n	80081d0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80080ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ec:	2200      	movs	r2, #0
 80080ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008106:	66bb      	str	r3, [r7, #104]	; 0x68
 8008108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008110:	65ba      	str	r2, [r7, #88]	; 0x58
 8008112:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008116:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800811e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3314      	adds	r3, #20
 800812a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	667b      	str	r3, [r7, #100]	; 0x64
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3314      	adds	r3, #20
 8008142:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008144:	647a      	str	r2, [r7, #68]	; 0x44
 8008146:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800814a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e5      	bne.n	8008124 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3314      	adds	r3, #20
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	623b      	str	r3, [r7, #32]
   return(result);
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800816e:	663b      	str	r3, [r7, #96]	; 0x60
 8008170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3314      	adds	r3, #20
 8008176:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008178:	633a      	str	r2, [r7, #48]	; 0x30
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800817e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800818c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818e:	2220      	movs	r2, #32
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	2b01      	cmp	r3, #1
 800819a:	d119      	bne.n	80081d0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800819c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0310 	bic.w	r3, r3, #16
 80081b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081bc:	61fa      	str	r2, [r7, #28]
 80081be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c0:	69b9      	ldr	r1, [r7, #24]
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	e841 2300 	strex	r3, r2, [r1]
 80081c8:	617b      	str	r3, [r7, #20]
   return(result);
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e5      	bne.n	800819c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d106      	bne.n	80081e6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081dc:	4619      	mov	r1, r3
 80081de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081e0:	f7ff ff0e 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081e4:	e002      	b.n	80081ec <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80081e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081e8:	f7ff fef6 	bl	8007fd8 <HAL_UART_RxCpltCallback>
}
 80081ec:	bf00      	nop
 80081ee:	3770      	adds	r7, #112	; 0x70
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	2b01      	cmp	r3, #1
 8008208:	d108      	bne.n	800821c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	4619      	mov	r1, r3
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fef3 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800821a:	e002      	b.n	8008222 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7ff fee5 	bl	8007fec <HAL_UART_RxHalfCpltCallback>
}
 8008222:	bf00      	nop
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008246:	2b80      	cmp	r3, #128	; 0x80
 8008248:	bf0c      	ite	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	2300      	movne	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b21      	cmp	r3, #33	; 0x21
 800825c:	d108      	bne.n	8008270 <UART_DMAError+0x46>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2200      	movs	r2, #0
 8008268:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800826a:	68b8      	ldr	r0, [r7, #8]
 800826c:	f000 f8c6 	bl	80083fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827a:	2b40      	cmp	r3, #64	; 0x40
 800827c:	bf0c      	ite	eq
 800827e:	2301      	moveq	r3, #1
 8008280:	2300      	movne	r3, #0
 8008282:	b2db      	uxtb	r3, r3
 8008284:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b22      	cmp	r3, #34	; 0x22
 8008290:	d108      	bne.n	80082a4 <UART_DMAError+0x7a>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800829e:	68b8      	ldr	r0, [r7, #8]
 80082a0:	f000 f8d4 	bl	800844c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	f043 0210 	orr.w	r2, r3, #16
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082b0:	68b8      	ldr	r0, [r7, #8]
 80082b2:	f7f8 fd09 	bl	8000cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b098      	sub	sp, #96	; 0x60
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2222      	movs	r2, #34	; 0x22
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	4a40      	ldr	r2, [pc, #256]	; (80083f0 <UART_Start_Receive_DMA+0x130>)
 80082ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <UART_Start_Receive_DMA+0x134>)
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	4a3e      	ldr	r2, [pc, #248]	; (80083f8 <UART_Start_Receive_DMA+0x138>)
 80082fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	2200      	movs	r2, #0
 8008306:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008308:	f107 0308 	add.w	r3, r7, #8
 800830c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3304      	adds	r3, #4
 8008318:	4619      	mov	r1, r3
 800831a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	f7fc fe98 	bl	8005054 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008324:	2300      	movs	r3, #0
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	613b      	str	r3, [r7, #16]
 8008338:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d019      	beq.n	800837e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	330c      	adds	r3, #12
 8008350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800835a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008360:	65bb      	str	r3, [r7, #88]	; 0x58
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	330c      	adds	r3, #12
 8008368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800836a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800836c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e5      	bne.n	800834a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3314      	adds	r3, #20
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	f043 0301 	orr.w	r3, r3, #1
 8008394:	657b      	str	r3, [r7, #84]	; 0x54
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3314      	adds	r3, #20
 800839c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800839e:	63ba      	str	r2, [r7, #56]	; 0x38
 80083a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3314      	adds	r3, #20
 80083b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	617b      	str	r3, [r7, #20]
   return(result);
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c8:	653b      	str	r3, [r7, #80]	; 0x50
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3314      	adds	r3, #20
 80083d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083d2:	627a      	str	r2, [r7, #36]	; 0x24
 80083d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6a39      	ldr	r1, [r7, #32]
 80083d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	61fb      	str	r3, [r7, #28]
   return(result);
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e5      	bne.n	80083b2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3760      	adds	r7, #96	; 0x60
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	080080cf 	.word	0x080080cf
 80083f4:	080081f5 	.word	0x080081f5
 80083f8:	0800822b 	.word	0x0800822b

080083fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b089      	sub	sp, #36	; 0x24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	60bb      	str	r3, [r7, #8]
   return(result);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	330c      	adds	r3, #12
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	61ba      	str	r2, [r7, #24]
 8008426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6979      	ldr	r1, [r7, #20]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	613b      	str	r3, [r7, #16]
   return(result);
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e5      	bne.n	8008404 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008440:	bf00      	nop
 8008442:	3724      	adds	r7, #36	; 0x24
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800844c:	b480      	push	{r7}
 800844e:	b095      	sub	sp, #84	; 0x54
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008474:	643a      	str	r2, [r7, #64]	; 0x40
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800847a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	61fb      	str	r3, [r7, #28]
   return(result);
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e5      	bne.n	8008488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d119      	bne.n	80084f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	330c      	adds	r3, #12
 80084ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f023 0310 	bic.w	r3, r3, #16
 80084da:	647b      	str	r3, [r7, #68]	; 0x44
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084e4:	61ba      	str	r2, [r7, #24]
 80084e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6979      	ldr	r1, [r7, #20]
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	613b      	str	r3, [r7, #16]
   return(result);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e5      	bne.n	80084c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008506:	bf00      	nop
 8008508:	3754      	adds	r7, #84	; 0x54
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7f8 fbcb 	bl	8000cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b21      	cmp	r3, #33	; 0x21
 800854c:	d13e      	bne.n	80085cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008556:	d114      	bne.n	8008582 <UART_Transmit_IT+0x48>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d110      	bne.n	8008582 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008574:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	1c9a      	adds	r2, r3, #2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	621a      	str	r2, [r3, #32]
 8008580:	e008      	b.n	8008594 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	1c59      	adds	r1, r3, #1
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6211      	str	r1, [r2, #32]
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	b29b      	uxth	r3, r3
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4619      	mov	r1, r3
 80085a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10f      	bne.n	80085c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e000      	b.n	80085ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085cc:	2302      	movs	r3, #2
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff fcd8 	bl	8007fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b08c      	sub	sp, #48	; 0x30
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b22      	cmp	r3, #34	; 0x22
 800861c:	f040 80ab 	bne.w	8008776 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008628:	d117      	bne.n	800865a <UART_Receive_IT+0x50>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d113      	bne.n	800865a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b29b      	uxth	r3, r3
 8008644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008648:	b29a      	uxth	r2, r3
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	1c9a      	adds	r2, r3, #2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	629a      	str	r2, [r3, #40]	; 0x28
 8008658:	e026      	b.n	80086a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866c:	d007      	beq.n	800867e <UART_Receive_IT+0x74>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <UART_Receive_IT+0x82>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	b2da      	uxtb	r2, r3
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	e008      	b.n	800869e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008698:	b2da      	uxtb	r2, r3
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	4619      	mov	r1, r3
 80086b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d15a      	bne.n	8008772 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0220 	bic.w	r2, r2, #32
 80086ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695a      	ldr	r2, [r3, #20]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0201 	bic.w	r2, r2, #1
 80086ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d135      	bne.n	8008768 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	613b      	str	r3, [r7, #16]
   return(result);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f023 0310 	bic.w	r3, r3, #16
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	330c      	adds	r3, #12
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	623a      	str	r2, [r7, #32]
 8008724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	69f9      	ldr	r1, [r7, #28]
 8008728:	6a3a      	ldr	r2, [r7, #32]
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e5      	bne.n	8008702 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b10      	cmp	r3, #16
 8008742:	d10a      	bne.n	800875a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fc4d 	bl	8008000 <HAL_UARTEx_RxEventCallback>
 8008766:	e002      	b.n	800876e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff fc35 	bl	8007fd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e002      	b.n	8008778 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	e000      	b.n	8008778 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008776:	2302      	movs	r3, #2
  }
}
 8008778:	4618      	mov	r0, r3
 800877a:	3730      	adds	r7, #48	; 0x30
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008784:	b0c0      	sub	sp, #256	; 0x100
 8008786:	af00      	add	r7, sp, #0
 8008788:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879c:	68d9      	ldr	r1, [r3, #12]
 800879e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	ea40 0301 	orr.w	r3, r0, r1
 80087a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	431a      	orrs	r2, r3
 80087c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087d8:	f021 010c 	bic.w	r1, r1, #12
 80087dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087e6:	430b      	orrs	r3, r1
 80087e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fa:	6999      	ldr	r1, [r3, #24]
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	ea40 0301 	orr.w	r3, r0, r1
 8008806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b8f      	ldr	r3, [pc, #572]	; (8008a4c <UART_SetConfig+0x2cc>)
 8008810:	429a      	cmp	r2, r3
 8008812:	d005      	beq.n	8008820 <UART_SetConfig+0xa0>
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b8d      	ldr	r3, [pc, #564]	; (8008a50 <UART_SetConfig+0x2d0>)
 800881c:	429a      	cmp	r2, r3
 800881e:	d104      	bne.n	800882a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008820:	f7fd fe4a 	bl	80064b8 <HAL_RCC_GetPCLK2Freq>
 8008824:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008828:	e003      	b.n	8008832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800882a:	f7fd fe31 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 800882e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800883c:	f040 810c 	bne.w	8008a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008844:	2200      	movs	r2, #0
 8008846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800884a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800884e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008852:	4622      	mov	r2, r4
 8008854:	462b      	mov	r3, r5
 8008856:	1891      	adds	r1, r2, r2
 8008858:	65b9      	str	r1, [r7, #88]	; 0x58
 800885a:	415b      	adcs	r3, r3
 800885c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800885e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008862:	4621      	mov	r1, r4
 8008864:	eb12 0801 	adds.w	r8, r2, r1
 8008868:	4629      	mov	r1, r5
 800886a:	eb43 0901 	adc.w	r9, r3, r1
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800887a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800887e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008882:	4690      	mov	r8, r2
 8008884:	4699      	mov	r9, r3
 8008886:	4623      	mov	r3, r4
 8008888:	eb18 0303 	adds.w	r3, r8, r3
 800888c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008890:	462b      	mov	r3, r5
 8008892:	eb49 0303 	adc.w	r3, r9, r3
 8008896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800889a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088ae:	460b      	mov	r3, r1
 80088b0:	18db      	adds	r3, r3, r3
 80088b2:	653b      	str	r3, [r7, #80]	; 0x50
 80088b4:	4613      	mov	r3, r2
 80088b6:	eb42 0303 	adc.w	r3, r2, r3
 80088ba:	657b      	str	r3, [r7, #84]	; 0x54
 80088bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088c4:	f7f8 f87e 	bl	80009c4 <__aeabi_uldivmod>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4b61      	ldr	r3, [pc, #388]	; (8008a54 <UART_SetConfig+0x2d4>)
 80088ce:	fba3 2302 	umull	r2, r3, r3, r2
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	011c      	lsls	r4, r3, #4
 80088d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80088e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80088e8:	4642      	mov	r2, r8
 80088ea:	464b      	mov	r3, r9
 80088ec:	1891      	adds	r1, r2, r2
 80088ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80088f0:	415b      	adcs	r3, r3
 80088f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088f8:	4641      	mov	r1, r8
 80088fa:	eb12 0a01 	adds.w	sl, r2, r1
 80088fe:	4649      	mov	r1, r9
 8008900:	eb43 0b01 	adc.w	fp, r3, r1
 8008904:	f04f 0200 	mov.w	r2, #0
 8008908:	f04f 0300 	mov.w	r3, #0
 800890c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008918:	4692      	mov	sl, r2
 800891a:	469b      	mov	fp, r3
 800891c:	4643      	mov	r3, r8
 800891e:	eb1a 0303 	adds.w	r3, sl, r3
 8008922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008926:	464b      	mov	r3, r9
 8008928:	eb4b 0303 	adc.w	r3, fp, r3
 800892c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800893c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008944:	460b      	mov	r3, r1
 8008946:	18db      	adds	r3, r3, r3
 8008948:	643b      	str	r3, [r7, #64]	; 0x40
 800894a:	4613      	mov	r3, r2
 800894c:	eb42 0303 	adc.w	r3, r2, r3
 8008950:	647b      	str	r3, [r7, #68]	; 0x44
 8008952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800895a:	f7f8 f833 	bl	80009c4 <__aeabi_uldivmod>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4611      	mov	r1, r2
 8008964:	4b3b      	ldr	r3, [pc, #236]	; (8008a54 <UART_SetConfig+0x2d4>)
 8008966:	fba3 2301 	umull	r2, r3, r3, r1
 800896a:	095b      	lsrs	r3, r3, #5
 800896c:	2264      	movs	r2, #100	; 0x64
 800896e:	fb02 f303 	mul.w	r3, r2, r3
 8008972:	1acb      	subs	r3, r1, r3
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800897a:	4b36      	ldr	r3, [pc, #216]	; (8008a54 <UART_SetConfig+0x2d4>)
 800897c:	fba3 2302 	umull	r2, r3, r3, r2
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008988:	441c      	add	r4, r3
 800898a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800898e:	2200      	movs	r2, #0
 8008990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008994:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800899c:	4642      	mov	r2, r8
 800899e:	464b      	mov	r3, r9
 80089a0:	1891      	adds	r1, r2, r2
 80089a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80089a4:	415b      	adcs	r3, r3
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089ac:	4641      	mov	r1, r8
 80089ae:	1851      	adds	r1, r2, r1
 80089b0:	6339      	str	r1, [r7, #48]	; 0x30
 80089b2:	4649      	mov	r1, r9
 80089b4:	414b      	adcs	r3, r1
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089c4:	4659      	mov	r1, fp
 80089c6:	00cb      	lsls	r3, r1, #3
 80089c8:	4651      	mov	r1, sl
 80089ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ce:	4651      	mov	r1, sl
 80089d0:	00ca      	lsls	r2, r1, #3
 80089d2:	4610      	mov	r0, r2
 80089d4:	4619      	mov	r1, r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	4642      	mov	r2, r8
 80089da:	189b      	adds	r3, r3, r2
 80089dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089e0:	464b      	mov	r3, r9
 80089e2:	460a      	mov	r2, r1
 80089e4:	eb42 0303 	adc.w	r3, r2, r3
 80089e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80089f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80089fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a00:	460b      	mov	r3, r1
 8008a02:	18db      	adds	r3, r3, r3
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a06:	4613      	mov	r3, r2
 8008a08:	eb42 0303 	adc.w	r3, r2, r3
 8008a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a16:	f7f7 ffd5 	bl	80009c4 <__aeabi_uldivmod>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	; (8008a54 <UART_SetConfig+0x2d4>)
 8008a20:	fba3 1302 	umull	r1, r3, r3, r2
 8008a24:	095b      	lsrs	r3, r3, #5
 8008a26:	2164      	movs	r1, #100	; 0x64
 8008a28:	fb01 f303 	mul.w	r3, r1, r3
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	3332      	adds	r3, #50	; 0x32
 8008a32:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <UART_SetConfig+0x2d4>)
 8008a34:	fba2 2303 	umull	r2, r3, r2, r3
 8008a38:	095b      	lsrs	r3, r3, #5
 8008a3a:	f003 0207 	and.w	r2, r3, #7
 8008a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4422      	add	r2, r4
 8008a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a48:	e105      	b.n	8008c56 <UART_SetConfig+0x4d6>
 8008a4a:	bf00      	nop
 8008a4c:	40011000 	.word	0x40011000
 8008a50:	40011400 	.word	0x40011400
 8008a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	1891      	adds	r1, r2, r2
 8008a70:	6239      	str	r1, [r7, #32]
 8008a72:	415b      	adcs	r3, r3
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
 8008a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a7a:	4641      	mov	r1, r8
 8008a7c:	1854      	adds	r4, r2, r1
 8008a7e:	4649      	mov	r1, r9
 8008a80:	eb43 0501 	adc.w	r5, r3, r1
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	00eb      	lsls	r3, r5, #3
 8008a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a92:	00e2      	lsls	r2, r4, #3
 8008a94:	4614      	mov	r4, r2
 8008a96:	461d      	mov	r5, r3
 8008a98:	4643      	mov	r3, r8
 8008a9a:	18e3      	adds	r3, r4, r3
 8008a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	eb45 0303 	adc.w	r3, r5, r3
 8008aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	008b      	lsls	r3, r1, #2
 8008aca:	4621      	mov	r1, r4
 8008acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	008a      	lsls	r2, r1, #2
 8008ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ad8:	f7f7 ff74 	bl	80009c4 <__aeabi_uldivmod>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4b60      	ldr	r3, [pc, #384]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	011c      	lsls	r4, r3, #4
 8008aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008af4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008afc:	4642      	mov	r2, r8
 8008afe:	464b      	mov	r3, r9
 8008b00:	1891      	adds	r1, r2, r2
 8008b02:	61b9      	str	r1, [r7, #24]
 8008b04:	415b      	adcs	r3, r3
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	1851      	adds	r1, r2, r1
 8008b10:	6139      	str	r1, [r7, #16]
 8008b12:	4649      	mov	r1, r9
 8008b14:	414b      	adcs	r3, r1
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	f04f 0200 	mov.w	r2, #0
 8008b1c:	f04f 0300 	mov.w	r3, #0
 8008b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b24:	4659      	mov	r1, fp
 8008b26:	00cb      	lsls	r3, r1, #3
 8008b28:	4651      	mov	r1, sl
 8008b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b2e:	4651      	mov	r1, sl
 8008b30:	00ca      	lsls	r2, r1, #3
 8008b32:	4610      	mov	r0, r2
 8008b34:	4619      	mov	r1, r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	4642      	mov	r2, r8
 8008b3a:	189b      	adds	r3, r3, r2
 8008b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b40:	464b      	mov	r3, r9
 8008b42:	460a      	mov	r2, r1
 8008b44:	eb42 0303 	adc.w	r3, r2, r3
 8008b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b64:	4649      	mov	r1, r9
 8008b66:	008b      	lsls	r3, r1, #2
 8008b68:	4641      	mov	r1, r8
 8008b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b6e:	4641      	mov	r1, r8
 8008b70:	008a      	lsls	r2, r1, #2
 8008b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b76:	f7f7 ff25 	bl	80009c4 <__aeabi_uldivmod>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4b39      	ldr	r3, [pc, #228]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008b80:	fba3 1302 	umull	r1, r3, r3, r2
 8008b84:	095b      	lsrs	r3, r3, #5
 8008b86:	2164      	movs	r1, #100	; 0x64
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	3332      	adds	r3, #50	; 0x32
 8008b92:	4a34      	ldr	r2, [pc, #208]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008b94:	fba2 2303 	umull	r2, r3, r2, r3
 8008b98:	095b      	lsrs	r3, r3, #5
 8008b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b9e:	441c      	add	r4, r3
 8008ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ba8:	677a      	str	r2, [r7, #116]	; 0x74
 8008baa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bae:	4642      	mov	r2, r8
 8008bb0:	464b      	mov	r3, r9
 8008bb2:	1891      	adds	r1, r2, r2
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	415b      	adcs	r3, r3
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	1851      	adds	r1, r2, r1
 8008bc2:	6039      	str	r1, [r7, #0]
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	414b      	adcs	r3, r1
 8008bc8:	607b      	str	r3, [r7, #4]
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bd6:	4659      	mov	r1, fp
 8008bd8:	00cb      	lsls	r3, r1, #3
 8008bda:	4651      	mov	r1, sl
 8008bdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008be0:	4651      	mov	r1, sl
 8008be2:	00ca      	lsls	r2, r1, #3
 8008be4:	4610      	mov	r0, r2
 8008be6:	4619      	mov	r1, r3
 8008be8:	4603      	mov	r3, r0
 8008bea:	4642      	mov	r2, r8
 8008bec:	189b      	adds	r3, r3, r2
 8008bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	460a      	mov	r2, r1
 8008bf4:	eb42 0303 	adc.w	r3, r2, r3
 8008bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	663b      	str	r3, [r7, #96]	; 0x60
 8008c04:	667a      	str	r2, [r7, #100]	; 0x64
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c12:	4649      	mov	r1, r9
 8008c14:	008b      	lsls	r3, r1, #2
 8008c16:	4641      	mov	r1, r8
 8008c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	008a      	lsls	r2, r1, #2
 8008c20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c24:	f7f7 fece 	bl	80009c4 <__aeabi_uldivmod>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c32:	095b      	lsrs	r3, r3, #5
 8008c34:	2164      	movs	r1, #100	; 0x64
 8008c36:	fb01 f303 	mul.w	r3, r1, r3
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	3332      	adds	r3, #50	; 0x32
 8008c40:	4a08      	ldr	r2, [pc, #32]	; (8008c64 <UART_SetConfig+0x4e4>)
 8008c42:	fba2 2303 	umull	r2, r3, r2, r3
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	f003 020f 	and.w	r2, r3, #15
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4422      	add	r2, r4
 8008c54:	609a      	str	r2, [r3, #8]
}
 8008c56:	bf00      	nop
 8008c58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c62:	bf00      	nop
 8008c64:	51eb851f 	.word	0x51eb851f

08008c68 <__libc_init_array>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4d0d      	ldr	r5, [pc, #52]	; (8008ca0 <__libc_init_array+0x38>)
 8008c6c:	4c0d      	ldr	r4, [pc, #52]	; (8008ca4 <__libc_init_array+0x3c>)
 8008c6e:	1b64      	subs	r4, r4, r5
 8008c70:	10a4      	asrs	r4, r4, #2
 8008c72:	2600      	movs	r6, #0
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	d109      	bne.n	8008c8c <__libc_init_array+0x24>
 8008c78:	4d0b      	ldr	r5, [pc, #44]	; (8008ca8 <__libc_init_array+0x40>)
 8008c7a:	4c0c      	ldr	r4, [pc, #48]	; (8008cac <__libc_init_array+0x44>)
 8008c7c:	f000 f820 	bl	8008cc0 <_init>
 8008c80:	1b64      	subs	r4, r4, r5
 8008c82:	10a4      	asrs	r4, r4, #2
 8008c84:	2600      	movs	r6, #0
 8008c86:	42a6      	cmp	r6, r4
 8008c88:	d105      	bne.n	8008c96 <__libc_init_array+0x2e>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c90:	4798      	blx	r3
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7ee      	b.n	8008c74 <__libc_init_array+0xc>
 8008c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9a:	4798      	blx	r3
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	e7f2      	b.n	8008c86 <__libc_init_array+0x1e>
 8008ca0:	08008d00 	.word	0x08008d00
 8008ca4:	08008d00 	.word	0x08008d00
 8008ca8:	08008d00 	.word	0x08008d00
 8008cac:	08008d04 	.word	0x08008d04

08008cb0 <memset>:
 8008cb0:	4402      	add	r2, r0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d100      	bne.n	8008cba <memset+0xa>
 8008cb8:	4770      	bx	lr
 8008cba:	f803 1b01 	strb.w	r1, [r3], #1
 8008cbe:	e7f9      	b.n	8008cb4 <memset+0x4>

08008cc0 <_init>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr

08008ccc <_fini>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	bf00      	nop
 8008cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd2:	bc08      	pop	{r3}
 8008cd4:	469e      	mov	lr, r3
 8008cd6:	4770      	bx	lr
